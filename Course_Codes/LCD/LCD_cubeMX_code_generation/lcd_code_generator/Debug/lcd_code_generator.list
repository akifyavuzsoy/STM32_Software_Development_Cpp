
lcd_code_generator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008158  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  080082e0  080082e0  000182e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800835c  0800835c  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  0800835c  0800835c  0001835c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008364  08008364  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008364  08008364  00018364  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008368  08008368  00018368  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800836c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020094  2**0
                  CONTENTS
 10 .bss          000008d8  20000094  20000094  00020094  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000096c  2000096c  00020094  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ad5a  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003e10  00000000  00000000  0003ae1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011a0  00000000  00000000  0003ec30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001030  00000000  00000000  0003fdd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025a77  00000000  00000000  00040e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017a92  00000000  00000000  00066877  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cc251  00000000  00000000  0007e309  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0014a55a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004bf0  00000000  00000000  0014a5b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000094 	.word	0x20000094
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080082c8 	.word	0x080082c8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000098 	.word	0x20000098
 80001c4:	080082c8 	.word	0x080082c8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <_ZN3LCDD1Ev>:
 *      Author: ASUS
 */

#include <lcd.h>

LCD::~LCD() {
 80004c0:	b480      	push	{r7}
 80004c2:	b083      	sub	sp, #12
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
 80004c8:	4a04      	ldr	r2, [pc, #16]	; (80004dc <_ZN3LCDD1Ev+0x1c>)
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	4618      	mov	r0, r3
 80004d2:	370c      	adds	r7, #12
 80004d4:	46bd      	mov	sp, r7
 80004d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004da:	4770      	bx	lr
 80004dc:	0800833c 	.word	0x0800833c

080004e0 <_ZN3LCDD0Ev>:
LCD::~LCD() {
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b082      	sub	sp, #8
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
}
 80004e8:	6878      	ldr	r0, [r7, #4]
 80004ea:	f7ff ffe9 	bl	80004c0 <_ZN3LCDD1Ev>
 80004ee:	2134      	movs	r1, #52	; 0x34
 80004f0:	6878      	ldr	r0, [r7, #4]
 80004f2:	f007 fd61 	bl	8007fb8 <_ZdlPvj>
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	4618      	mov	r0, r3
 80004fa:	3708      	adds	r7, #8
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bd80      	pop	{r7, pc}

08000500 <_ZL15IntegerToStringmPc>:
 {0x14,0x15,0x16,0x17,0x18,0x19,0x1A,0x1B,0x1C,0x1D,0x1E,0x1F,0x20,0x21,0x22,0x23,0x24,0x25,0x26,0x27},
 {0x54,0x55,0x56,0x57,0x58,0x59,0x5A,0x5B,0x5C,0x5D,0x5E,0x5F,0x60,0x61,0x62,0x63,0x64,0x65,0x66,0x67}
};

static void IntegerToString(uint32_t integer, char* pBuffer)
{
 8000500:	b480      	push	{r7}
 8000502:	b085      	sub	sp, #20
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
 8000508:	6039      	str	r1, [r7, #0]
	if(integer == 0)
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	2b00      	cmp	r3, #0
 800050e:	d103      	bne.n	8000518 <_ZL15IntegerToStringmPc+0x18>
	{
		// Edge case
		pBuffer[0] = '0';
 8000510:	683b      	ldr	r3, [r7, #0]
 8000512:	2230      	movs	r2, #48	; 0x30
 8000514:	701a      	strb	r2, [r3, #0]
		return;
 8000516:	e02f      	b.n	8000578 <_ZL15IntegerToStringmPc+0x78>
	}

	uint32_t copyOfInt = integer;
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	60fb      	str	r3, [r7, #12]
	uint8_t noOfDigits = 0;
 800051c:	2300      	movs	r3, #0
 800051e:	72fb      	strb	r3, [r7, #11]
	// get number of digits
	while(copyOfInt > 0)
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	2b00      	cmp	r3, #0
 8000524:	d009      	beq.n	800053a <_ZL15IntegerToStringmPc+0x3a>
	{
		copyOfInt /= 10;
 8000526:	68fb      	ldr	r3, [r7, #12]
 8000528:	4a16      	ldr	r2, [pc, #88]	; (8000584 <_ZL15IntegerToStringmPc+0x84>)
 800052a:	fba2 2303 	umull	r2, r3, r2, r3
 800052e:	08db      	lsrs	r3, r3, #3
 8000530:	60fb      	str	r3, [r7, #12]
		noOfDigits++;
 8000532:	7afb      	ldrb	r3, [r7, #11]
 8000534:	3301      	adds	r3, #1
 8000536:	72fb      	strb	r3, [r7, #11]
	while(copyOfInt > 0)
 8000538:	e7f2      	b.n	8000520 <_ZL15IntegerToStringmPc+0x20>
	}
	// get each digit, convert to char, store in buffer
	while(integer > 0)
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	2b00      	cmp	r3, #0
 800053e:	d01b      	beq.n	8000578 <_ZL15IntegerToStringmPc+0x78>
	{
		pBuffer[noOfDigits - 1] = '0' + (integer % 10);
 8000540:	6879      	ldr	r1, [r7, #4]
 8000542:	4b10      	ldr	r3, [pc, #64]	; (8000584 <_ZL15IntegerToStringmPc+0x84>)
 8000544:	fba3 2301 	umull	r2, r3, r3, r1
 8000548:	08da      	lsrs	r2, r3, #3
 800054a:	4613      	mov	r3, r2
 800054c:	009b      	lsls	r3, r3, #2
 800054e:	4413      	add	r3, r2
 8000550:	005b      	lsls	r3, r3, #1
 8000552:	1aca      	subs	r2, r1, r3
 8000554:	b2d2      	uxtb	r2, r2
 8000556:	7afb      	ldrb	r3, [r7, #11]
 8000558:	3b01      	subs	r3, #1
 800055a:	6839      	ldr	r1, [r7, #0]
 800055c:	440b      	add	r3, r1
 800055e:	3230      	adds	r2, #48	; 0x30
 8000560:	b2d2      	uxtb	r2, r2
 8000562:	701a      	strb	r2, [r3, #0]
		integer /= 10;
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	4a07      	ldr	r2, [pc, #28]	; (8000584 <_ZL15IntegerToStringmPc+0x84>)
 8000568:	fba2 2303 	umull	r2, r3, r2, r3
 800056c:	08db      	lsrs	r3, r3, #3
 800056e:	607b      	str	r3, [r7, #4]
		noOfDigits--;
 8000570:	7afb      	ldrb	r3, [r7, #11]
 8000572:	3b01      	subs	r3, #1
 8000574:	72fb      	strb	r3, [r7, #11]
	while(integer > 0)
 8000576:	e7e0      	b.n	800053a <_ZL15IntegerToStringmPc+0x3a>
	}

}
 8000578:	3714      	adds	r7, #20
 800057a:	46bd      	mov	sp, r7
 800057c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop
 8000584:	cccccccd 	.word	0xcccccccd

08000588 <_ZN3LCD11WriteNibbleEch>:

void LCD::WriteNibble(char byte, uint8_t nibbleBitPos)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b086      	sub	sp, #24
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
 8000590:	460b      	mov	r3, r1
 8000592:	70fb      	strb	r3, [r7, #3]
 8000594:	4613      	mov	r3, r2
 8000596:	70bb      	strb	r3, [r7, #2]
	const GPIO_PinState pinState[2] = {GPIO_PIN_RESET, GPIO_PIN_SET};
 8000598:	2300      	movs	r3, #0
 800059a:	743b      	strb	r3, [r7, #16]
 800059c:	2301      	movs	r3, #1
 800059e:	747b      	strb	r3, [r7, #17]
	uint8_t nibbleArr[4] = {0};
 80005a0:	2300      	movs	r3, #0
 80005a2:	60fb      	str	r3, [r7, #12]
	uint8_t j = 0;
 80005a4:	2300      	movs	r3, #0
 80005a6:	75fb      	strb	r3, [r7, #23]

	for(uint8_t i=nibbleBitPos; i<nibbleBitPos+4; i++)
 80005a8:	78bb      	ldrb	r3, [r7, #2]
 80005aa:	75bb      	strb	r3, [r7, #22]
 80005ac:	78bb      	ldrb	r3, [r7, #2]
 80005ae:	1cda      	adds	r2, r3, #3
 80005b0:	7dbb      	ldrb	r3, [r7, #22]
 80005b2:	429a      	cmp	r2, r3
 80005b4:	db15      	blt.n	80005e2 <_ZN3LCD11WriteNibbleEch+0x5a>
	{
		nibbleArr[j] = (byte&(1<<i))>>i;
 80005b6:	78fa      	ldrb	r2, [r7, #3]
 80005b8:	7dbb      	ldrb	r3, [r7, #22]
 80005ba:	2101      	movs	r1, #1
 80005bc:	fa01 f303 	lsl.w	r3, r1, r3
 80005c0:	401a      	ands	r2, r3
 80005c2:	7dbb      	ldrb	r3, [r7, #22]
 80005c4:	411a      	asrs	r2, r3
 80005c6:	7dfb      	ldrb	r3, [r7, #23]
 80005c8:	b2d2      	uxtb	r2, r2
 80005ca:	f107 0118 	add.w	r1, r7, #24
 80005ce:	440b      	add	r3, r1
 80005d0:	f803 2c0c 	strb.w	r2, [r3, #-12]
		j++;
 80005d4:	7dfb      	ldrb	r3, [r7, #23]
 80005d6:	3301      	adds	r3, #1
 80005d8:	75fb      	strb	r3, [r7, #23]
	for(uint8_t i=nibbleBitPos; i<nibbleBitPos+4; i++)
 80005da:	7dbb      	ldrb	r3, [r7, #22]
 80005dc:	3301      	adds	r3, #1
 80005de:	75bb      	strb	r3, [r7, #22]
 80005e0:	e7e4      	b.n	80005ac <_ZN3LCD11WriteNibbleEch+0x24>
	}
	// Send nibble
	for(uint8_t i=0; i<4; i++)
 80005e2:	2300      	movs	r3, #0
 80005e4:	757b      	strb	r3, [r7, #21]
 80005e6:	7d7b      	ldrb	r3, [r7, #21]
 80005e8:	2b03      	cmp	r3, #3
 80005ea:	d81d      	bhi.n	8000628 <_ZN3LCD11WriteNibbleEch+0xa0>
	{
		HAL_GPIO_WritePin(dataPins[i].port, dataPins[i].selectedPin, pinState[nibbleArr[i]]);
 80005ec:	7d7b      	ldrb	r3, [r7, #21]
 80005ee:	687a      	ldr	r2, [r7, #4]
 80005f0:	3302      	adds	r3, #2
 80005f2:	00db      	lsls	r3, r3, #3
 80005f4:	4413      	add	r3, r2
 80005f6:	6858      	ldr	r0, [r3, #4]
 80005f8:	7d7b      	ldrb	r3, [r7, #21]
 80005fa:	687a      	ldr	r2, [r7, #4]
 80005fc:	3302      	adds	r3, #2
 80005fe:	00db      	lsls	r3, r3, #3
 8000600:	4413      	add	r3, r2
 8000602:	8919      	ldrh	r1, [r3, #8]
 8000604:	7d7b      	ldrb	r3, [r7, #21]
 8000606:	f107 0218 	add.w	r2, r7, #24
 800060a:	4413      	add	r3, r2
 800060c:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8000610:	f107 0218 	add.w	r2, r7, #24
 8000614:	4413      	add	r3, r2
 8000616:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 800061a:	461a      	mov	r2, r3
 800061c:	f001 f982 	bl	8001924 <HAL_GPIO_WritePin>
	for(uint8_t i=0; i<4; i++)
 8000620:	7d7b      	ldrb	r3, [r7, #21]
 8000622:	3301      	adds	r3, #1
 8000624:	757b      	strb	r3, [r7, #21]
 8000626:	e7de      	b.n	80005e6 <_ZN3LCD11WriteNibbleEch+0x5e>
	}
	// High to low pulse on EN pin (to transfer nibble)
	HAL_GPIO_WritePin(en.port, en.selectedPin, GPIO_PIN_SET);
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	68d8      	ldr	r0, [r3, #12]
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	8a1b      	ldrh	r3, [r3, #16]
 8000630:	2201      	movs	r2, #1
 8000632:	4619      	mov	r1, r3
 8000634:	f001 f976 	bl	8001924 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000638:	2001      	movs	r0, #1
 800063a:	f000 fea1 	bl	8001380 <HAL_Delay>
	HAL_GPIO_WritePin(en.port, en.selectedPin, GPIO_PIN_RESET);
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	68d8      	ldr	r0, [r3, #12]
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	8a1b      	ldrh	r3, [r3, #16]
 8000646:	2200      	movs	r2, #0
 8000648:	4619      	mov	r1, r3
 800064a:	f001 f96b 	bl	8001924 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800064e:	2001      	movs	r0, #1
 8000650:	f000 fe96 	bl	8001380 <HAL_Delay>
}
 8000654:	bf00      	nop
 8000656:	3718      	adds	r7, #24
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}

0800065c <_ZN3LCD9WriteByteE13GPIO_PinStatec>:

void LCD::WriteByte(GPIO_PinState lcdMode, char byte)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
 8000664:	460b      	mov	r3, r1
 8000666:	70fb      	strb	r3, [r7, #3]
 8000668:	4613      	mov	r3, r2
 800066a:	70bb      	strb	r3, [r7, #2]
	HAL_GPIO_WritePin(rs.port, rs.selectedPin, lcdMode);
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	6858      	ldr	r0, [r3, #4]
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	891b      	ldrh	r3, [r3, #8]
 8000674:	78fa      	ldrb	r2, [r7, #3]
 8000676:	4619      	mov	r1, r3
 8000678:	f001 f954 	bl	8001924 <HAL_GPIO_WritePin>
	LCD::WriteNibble(byte, HIGH_NIBBLE);
 800067c:	78bb      	ldrb	r3, [r7, #2]
 800067e:	2204      	movs	r2, #4
 8000680:	4619      	mov	r1, r3
 8000682:	6878      	ldr	r0, [r7, #4]
 8000684:	f7ff ff80 	bl	8000588 <_ZN3LCD11WriteNibbleEch>
	LCD::WriteNibble(byte, LOW_NIBBLE);
 8000688:	78bb      	ldrb	r3, [r7, #2]
 800068a:	2200      	movs	r2, #0
 800068c:	4619      	mov	r1, r3
 800068e:	6878      	ldr	r0, [r7, #4]
 8000690:	f7ff ff7a 	bl	8000588 <_ZN3LCD11WriteNibbleEch>
}
 8000694:	bf00      	nop
 8000696:	3708      	adds	r7, #8
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}

0800069c <_ZN3LCD10WriteBytesEPKc>:

void LCD::WriteBytes(const char* pData)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
 80006a4:	6039      	str	r1, [r7, #0]
	while(*pData != '\0')
 80006a6:	683b      	ldr	r3, [r7, #0]
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d00a      	beq.n	80006c4 <_ZN3LCD10WriteBytesEPKc+0x28>
	{
		LCD::WriteByte(GPIO_PIN_SET, *pData);
 80006ae:	683b      	ldr	r3, [r7, #0]
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	461a      	mov	r2, r3
 80006b4:	2101      	movs	r1, #1
 80006b6:	6878      	ldr	r0, [r7, #4]
 80006b8:	f7ff ffd0 	bl	800065c <_ZN3LCD9WriteByteE13GPIO_PinStatec>
		pData++;
 80006bc:	683b      	ldr	r3, [r7, #0]
 80006be:	3301      	adds	r3, #1
 80006c0:	603b      	str	r3, [r7, #0]
	while(*pData != '\0')
 80006c2:	e7f0      	b.n	80006a6 <_ZN3LCD10WriteBytesEPKc+0xa>
	}
}
 80006c4:	bf00      	nop
 80006c6:	3708      	adds	r7, #8
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}

080006cc <_ZN3LCD12WriteIntegerEm>:

void LCD::WriteInteger(uint32_t data)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b086      	sub	sp, #24
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
 80006d4:	6039      	str	r1, [r7, #0]
	const uint8_t maxNumberOfDigits = 10;
 80006d6:	230a      	movs	r3, #10
 80006d8:	75fb      	strb	r3, [r7, #23]
	char integerToStringBuffer[maxNumberOfDigits] = {0};
 80006da:	2300      	movs	r3, #0
 80006dc:	60fb      	str	r3, [r7, #12]
 80006de:	f107 0310 	add.w	r3, r7, #16
 80006e2:	2200      	movs	r2, #0
 80006e4:	601a      	str	r2, [r3, #0]
 80006e6:	809a      	strh	r2, [r3, #4]
	if(data < 10)
 80006e8:	683b      	ldr	r3, [r7, #0]
 80006ea:	2b09      	cmp	r3, #9
 80006ec:	d804      	bhi.n	80006f8 <_ZN3LCD12WriteIntegerEm+0x2c>
	{
		LCD::WriteByte(GPIO_PIN_SET, '0');
 80006ee:	2230      	movs	r2, #48	; 0x30
 80006f0:	2101      	movs	r1, #1
 80006f2:	6878      	ldr	r0, [r7, #4]
 80006f4:	f7ff ffb2 	bl	800065c <_ZN3LCD9WriteByteE13GPIO_PinStatec>
	}
	IntegerToString(data, integerToStringBuffer);
 80006f8:	f107 030c 	add.w	r3, r7, #12
 80006fc:	4619      	mov	r1, r3
 80006fe:	6838      	ldr	r0, [r7, #0]
 8000700:	f7ff fefe 	bl	8000500 <_ZL15IntegerToStringmPc>
	LCD::WriteBytes(integerToStringBuffer);
 8000704:	f107 030c 	add.w	r3, r7, #12
 8000708:	4619      	mov	r1, r3
 800070a:	6878      	ldr	r0, [r7, #4]
 800070c:	f7ff ffc6 	bl	800069c <_ZN3LCD10WriteBytesEPKc>
}
 8000710:	bf00      	nop
 8000712:	3718      	adds	r7, #24
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}

08000718 <_ZN3LCDC1ER11pinStruct_tS1_S1_S1_S1_S1_>:

LCD::LCD(pinStruct_t& RS,
 8000718:	b580      	push	{r7, lr}
 800071a:	b0b0      	sub	sp, #192	; 0xc0
 800071c:	af00      	add	r7, sp, #0
 800071e:	60f8      	str	r0, [r7, #12]
 8000720:	60b9      	str	r1, [r7, #8]
 8000722:	607a      	str	r2, [r7, #4]
 8000724:	603b      	str	r3, [r7, #0]
				pinStruct_t& EN,
				pinStruct_t& D4,
				pinStruct_t& D5,
				pinStruct_t& D6,
				pinStruct_t& D7)
 8000726:	4a6f      	ldr	r2, [pc, #444]	; (80008e4 <_ZN3LCDC1ER11pinStruct_tS1_S1_S1_S1_S1_+0x1cc>)
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	601a      	str	r2, [r3, #0]
{
	// LCD pin initialization
	GPIO_InitTypeDef lcdPinInitStruct[6] = {0};
 800072c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000730:	2278      	movs	r2, #120	; 0x78
 8000732:	2100      	movs	r1, #0
 8000734:	4618      	mov	r0, r3
 8000736:	f007 fc93 	bl	8008060 <memset>
	pinStruct_t lcdPinArray[6] = {RS,EN,D4,D5,D6,D7};
 800073a:	68ba      	ldr	r2, [r7, #8]
 800073c:	f107 0310 	add.w	r3, r7, #16
 8000740:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000744:	e883 0003 	stmia.w	r3, {r0, r1}
 8000748:	687a      	ldr	r2, [r7, #4]
 800074a:	f107 0318 	add.w	r3, r7, #24
 800074e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000752:	e883 0003 	stmia.w	r3, {r0, r1}
 8000756:	683a      	ldr	r2, [r7, #0]
 8000758:	f107 0320 	add.w	r3, r7, #32
 800075c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000760:	e883 0003 	stmia.w	r3, {r0, r1}
 8000764:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8000768:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800076c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000770:	e883 0003 	stmia.w	r3, {r0, r1}
 8000774:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8000778:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800077c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000780:	e883 0003 	stmia.w	r3, {r0, r1}
 8000784:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8000788:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800078c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000790:	e883 0003 	stmia.w	r3, {r0, r1}

	for(uint8_t i=0; i<6; i++)
 8000794:	2300      	movs	r3, #0
 8000796:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
 800079a:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 800079e:	2b05      	cmp	r3, #5
 80007a0:	d839      	bhi.n	8000816 <_ZN3LCDC1ER11pinStruct_tS1_S1_S1_S1_S1_+0xfe>
	{
		lcdPinInitStruct[i].Pin = lcdPinArray[i].selectedPin;
 80007a2:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 80007a6:	00db      	lsls	r3, r3, #3
 80007a8:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 80007ac:	4413      	add	r3, r2
 80007ae:	f833 3cac 	ldrh.w	r3, [r3, #-172]
 80007b2:	f897 20bf 	ldrb.w	r2, [r7, #191]	; 0xbf
 80007b6:	4619      	mov	r1, r3
 80007b8:	4613      	mov	r3, r2
 80007ba:	009b      	lsls	r3, r3, #2
 80007bc:	4413      	add	r3, r2
 80007be:	009b      	lsls	r3, r3, #2
 80007c0:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 80007c4:	4413      	add	r3, r2
 80007c6:	3b80      	subs	r3, #128	; 0x80
 80007c8:	6019      	str	r1, [r3, #0]
		lcdPinInitStruct[i].Mode = GPIO_MODE_OUTPUT_PP;
 80007ca:	f897 20bf 	ldrb.w	r2, [r7, #191]	; 0xbf
 80007ce:	4613      	mov	r3, r2
 80007d0:	009b      	lsls	r3, r3, #2
 80007d2:	4413      	add	r3, r2
 80007d4:	009b      	lsls	r3, r3, #2
 80007d6:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 80007da:	4413      	add	r3, r2
 80007dc:	3b7c      	subs	r3, #124	; 0x7c
 80007de:	2201      	movs	r2, #1
 80007e0:	601a      	str	r2, [r3, #0]
		HAL_GPIO_Init(lcdPinArray[i].port, &lcdPinInitStruct[i]);
 80007e2:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 80007e6:	00db      	lsls	r3, r3, #3
 80007e8:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 80007ec:	4413      	add	r3, r2
 80007ee:	f853 0cb0 	ldr.w	r0, [r3, #-176]
 80007f2:	f897 20bf 	ldrb.w	r2, [r7, #191]	; 0xbf
 80007f6:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80007fa:	4613      	mov	r3, r2
 80007fc:	009b      	lsls	r3, r3, #2
 80007fe:	4413      	add	r3, r2
 8000800:	009b      	lsls	r3, r3, #2
 8000802:	440b      	add	r3, r1
 8000804:	4619      	mov	r1, r3
 8000806:	f000 fef1 	bl	80015ec <HAL_GPIO_Init>
	for(uint8_t i=0; i<6; i++)
 800080a:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 800080e:	3301      	adds	r3, #1
 8000810:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
 8000814:	e7c1      	b.n	800079a <_ZN3LCDC1ER11pinStruct_tS1_S1_S1_S1_S1_+0x82>
	}
	// Private variable initialization
	rs = RS;
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	68ba      	ldr	r2, [r7, #8]
 800081a:	3304      	adds	r3, #4
 800081c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000820:	e883 0003 	stmia.w	r3, {r0, r1}
	en = EN;
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	687a      	ldr	r2, [r7, #4]
 8000828:	330c      	adds	r3, #12
 800082a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800082e:	e883 0003 	stmia.w	r3, {r0, r1}
	dataPins[0] = D4;
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	683a      	ldr	r2, [r7, #0]
 8000836:	3314      	adds	r3, #20
 8000838:	e892 0003 	ldmia.w	r2, {r0, r1}
 800083c:	e883 0003 	stmia.w	r3, {r0, r1}
	dataPins[1] = D5;
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8000846:	331c      	adds	r3, #28
 8000848:	e892 0003 	ldmia.w	r2, {r0, r1}
 800084c:	e883 0003 	stmia.w	r3, {r0, r1}
	dataPins[2] = D6;
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8000856:	3324      	adds	r3, #36	; 0x24
 8000858:	e892 0003 	ldmia.w	r2, {r0, r1}
 800085c:	e883 0003 	stmia.w	r3, {r0, r1}
	dataPins[3] = D7;
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8000866:	332c      	adds	r3, #44	; 0x2c
 8000868:	e892 0003 	ldmia.w	r2, {r0, r1}
 800086c:	e883 0003 	stmia.w	r3, {r0, r1}

	// LCD Initialization sequence according to the datasheet
	HAL_Delay(16);		// Power on delay
 8000870:	2010      	movs	r0, #16
 8000872:	f000 fd85 	bl	8001380 <HAL_Delay>
	LCD::WriteByte(GPIO_PIN_RESET, FUNCTION_SET_8BIT);		// Function set mode (8-bit mode)
 8000876:	2203      	movs	r2, #3
 8000878:	2100      	movs	r1, #0
 800087a:	68f8      	ldr	r0, [r7, #12]
 800087c:	f7ff feee 	bl	800065c <_ZN3LCD9WriteByteE13GPIO_PinStatec>
	HAL_Delay(5);			// Wait for more than 4.1ms
 8000880:	2005      	movs	r0, #5
 8000882:	f000 fd7d 	bl	8001380 <HAL_Delay>
	LCD::WriteByte(GPIO_PIN_RESET, FUNCTION_SET_8BIT);		// Function set mode (8-bit mode)
 8000886:	2203      	movs	r2, #3
 8000888:	2100      	movs	r1, #0
 800088a:	68f8      	ldr	r0, [r7, #12]
 800088c:	f7ff fee6 	bl	800065c <_ZN3LCD9WriteByteE13GPIO_PinStatec>
	HAL_Delay(1);			// Wait for more than 100us
 8000890:	2001      	movs	r0, #1
 8000892:	f000 fd75 	bl	8001380 <HAL_Delay>

	// 4-bit operation commands
	uint8_t fourBitCommandSetting[5] = {
 8000896:	4a14      	ldr	r2, [pc, #80]	; (80008e8 <_ZN3LCDC1ER11pinStruct_tS1_S1_S1_S1_S1_+0x1d0>)
 8000898:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800089c:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008a0:	6018      	str	r0, [r3, #0]
 80008a2:	3304      	adds	r3, #4
 80008a4:	7019      	strb	r1, [r3, #0]
		CLEAR_DISPLAY,
		DISPLAY_ON_CURSOR_OFF,
		ENTRY_MODE_INCREMENT_CURSOR
	};

	for(uint8_t i=0; i<5; i++)
 80008a6:	2300      	movs	r3, #0
 80008a8:	f887 30be 	strb.w	r3, [r7, #190]	; 0xbe
 80008ac:	f897 30be 	ldrb.w	r3, [r7, #190]	; 0xbe
 80008b0:	2b04      	cmp	r3, #4
 80008b2:	d811      	bhi.n	80008d8 <_ZN3LCDC1ER11pinStruct_tS1_S1_S1_S1_S1_+0x1c0>
	{
		LCD::WriteByte(GPIO_PIN_RESET, fourBitCommandSetting[i]);
 80008b4:	f897 30be 	ldrb.w	r3, [r7, #190]	; 0xbe
 80008b8:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 80008bc:	4413      	add	r3, r2
 80008be:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 80008c2:	461a      	mov	r2, r3
 80008c4:	2100      	movs	r1, #0
 80008c6:	68f8      	ldr	r0, [r7, #12]
 80008c8:	f7ff fec8 	bl	800065c <_ZN3LCD9WriteByteE13GPIO_PinStatec>
	for(uint8_t i=0; i<5; i++)
 80008cc:	f897 30be 	ldrb.w	r3, [r7, #190]	; 0xbe
 80008d0:	3301      	adds	r3, #1
 80008d2:	f887 30be 	strb.w	r3, [r7, #190]	; 0xbe
 80008d6:	e7e9      	b.n	80008ac <_ZN3LCDC1ER11pinStruct_tS1_S1_S1_S1_S1_+0x194>
	}
}
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	4618      	mov	r0, r3
 80008dc:	37c0      	adds	r7, #192	; 0xc0
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	0800833c 	.word	0x0800833c
 80008e8:	080082e0 	.word	0x080082e0

080008ec <_ZN3LCD5PrintEPKc>:
{
	LCD::WriteByte(GPIO_PIN_SET, data);
}

void LCD::Print(const char* pData)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
 80008f4:	6039      	str	r1, [r7, #0]
	LCD::WriteBytes(pData);
 80008f6:	6839      	ldr	r1, [r7, #0]
 80008f8:	6878      	ldr	r0, [r7, #4]
 80008fa:	f7ff fecf 	bl	800069c <_ZN3LCD10WriteBytesEPKc>
}
 80008fe:	bf00      	nop
 8000900:	3708      	adds	r7, #8
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}

08000906 <_ZN3LCD5PrintERh>:

void LCD::Print(uint8_t& data)
{
 8000906:	b580      	push	{r7, lr}
 8000908:	b082      	sub	sp, #8
 800090a:	af00      	add	r7, sp, #0
 800090c:	6078      	str	r0, [r7, #4]
 800090e:	6039      	str	r1, [r7, #0]
	LCD::WriteInteger(data);
 8000910:	683b      	ldr	r3, [r7, #0]
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	4619      	mov	r1, r3
 8000916:	6878      	ldr	r0, [r7, #4]
 8000918:	f7ff fed8 	bl	80006cc <_ZN3LCD12WriteIntegerEm>
}
 800091c:	bf00      	nop
 800091e:	3708      	adds	r7, #8
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}

08000924 <_ZN3LCD5ClearEv>:
{
	LCD::WriteInteger(data);
}

void LCD::Clear(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
	LCD::WriteByte(GPIO_PIN_RESET, CLEAR_DISPLAY);
 800092c:	2201      	movs	r2, #1
 800092e:	2100      	movs	r1, #0
 8000930:	6878      	ldr	r0, [r7, #4]
 8000932:	f7ff fe93 	bl	800065c <_ZN3LCD9WriteByteE13GPIO_PinStatec>
}
 8000936:	bf00      	nop
 8000938:	3708      	adds	r7, #8
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
	...

08000940 <__tcf_0>:
  pinStruct_t d4 = {GPIOD, GPIO_PIN_2};			// D4
  pinStruct_t d5 = {GPIOD, GPIO_PIN_3};			// D5
  pinStruct_t d6 = {GPIOD, GPIO_PIN_6};			// D6
  pinStruct_t d7 = {GPIOD, GPIO_PIN_7};			// D7

  static LCD lcd(rs,en,d4,d5,d6,d7);
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
 8000944:	4801      	ldr	r0, [pc, #4]	; (800094c <__tcf_0+0xc>)
 8000946:	f7ff fdbb 	bl	80004c0 <_ZN3LCDD1Ev>
 800094a:	bd80      	pop	{r7, pc}
 800094c:	200001a4 	.word	0x200001a4

08000950 <main>:
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b092      	sub	sp, #72	; 0x48
 8000954:	af04      	add	r7, sp, #16
  HAL_Init();
 8000956:	f000 fca1 	bl	800129c <HAL_Init>
  SystemClock_Config();
 800095a:	f000 f8a5 	bl	8000aa8 <_Z18SystemClock_Configv>
  MX_GPIO_Init();
 800095e:	f000 f9bb 	bl	8000cd8 <_ZL12MX_GPIO_Initv>
  MX_I2C1_Init();
 8000962:	f000 f915 	bl	8000b90 <_ZL12MX_I2C1_Initv>
  MX_I2S3_Init();
 8000966:	f000 f947 	bl	8000bf8 <_ZL12MX_I2S3_Initv>
  MX_SPI1_Init();
 800096a:	f000 f979 	bl	8000c60 <_ZL12MX_SPI1_Initv>
  MX_USB_HOST_Init();
 800096e:	f007 f81b 	bl	80079a8 <MX_USB_HOST_Init>
  pinStruct_t rs = {GPIOD, GPIO_PIN_0};			// RS
 8000972:	4a42      	ldr	r2, [pc, #264]	; (8000a7c <main+0x12c>)
 8000974:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000978:	e892 0003 	ldmia.w	r2, {r0, r1}
 800097c:	e883 0003 	stmia.w	r3, {r0, r1}
  pinStruct_t en = {GPIOD, GPIO_PIN_1};			// EN
 8000980:	4a3f      	ldr	r2, [pc, #252]	; (8000a80 <main+0x130>)
 8000982:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000986:	e892 0003 	ldmia.w	r2, {r0, r1}
 800098a:	e883 0003 	stmia.w	r3, {r0, r1}
  pinStruct_t d4 = {GPIOD, GPIO_PIN_2};			// D4
 800098e:	4a3d      	ldr	r2, [pc, #244]	; (8000a84 <main+0x134>)
 8000990:	f107 0320 	add.w	r3, r7, #32
 8000994:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000998:	e883 0003 	stmia.w	r3, {r0, r1}
  pinStruct_t d5 = {GPIOD, GPIO_PIN_3};			// D5
 800099c:	4a3a      	ldr	r2, [pc, #232]	; (8000a88 <main+0x138>)
 800099e:	f107 0318 	add.w	r3, r7, #24
 80009a2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009a6:	e883 0003 	stmia.w	r3, {r0, r1}
  pinStruct_t d6 = {GPIOD, GPIO_PIN_6};			// D6
 80009aa:	4a38      	ldr	r2, [pc, #224]	; (8000a8c <main+0x13c>)
 80009ac:	f107 0310 	add.w	r3, r7, #16
 80009b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009b4:	e883 0003 	stmia.w	r3, {r0, r1}
  pinStruct_t d7 = {GPIOD, GPIO_PIN_7};			// D7
 80009b8:	4a35      	ldr	r2, [pc, #212]	; (8000a90 <main+0x140>)
 80009ba:	f107 0308 	add.w	r3, r7, #8
 80009be:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009c2:	e883 0003 	stmia.w	r3, {r0, r1}
  static LCD lcd(rs,en,d4,d5,d6,d7);
 80009c6:	4b33      	ldr	r3, [pc, #204]	; (8000a94 <main+0x144>)
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	f3bf 8f5b 	dmb	ish
 80009ce:	b2db      	uxtb	r3, r3
 80009d0:	f003 0301 	and.w	r3, r3, #1
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	bf0c      	ite	eq
 80009d8:	2301      	moveq	r3, #1
 80009da:	2300      	movne	r3, #0
 80009dc:	b2db      	uxtb	r3, r3
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d023      	beq.n	8000a2a <main+0xda>
 80009e2:	482c      	ldr	r0, [pc, #176]	; (8000a94 <main+0x144>)
 80009e4:	f007 faea 	bl	8007fbc <__cxa_guard_acquire>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	bf14      	ite	ne
 80009ee:	2301      	movne	r3, #1
 80009f0:	2300      	moveq	r3, #0
 80009f2:	b2db      	uxtb	r3, r3
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d018      	beq.n	8000a2a <main+0xda>
 80009f8:	f107 0020 	add.w	r0, r7, #32
 80009fc:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000a00:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000a04:	f107 0308 	add.w	r3, r7, #8
 8000a08:	9302      	str	r3, [sp, #8]
 8000a0a:	f107 0310 	add.w	r3, r7, #16
 8000a0e:	9301      	str	r3, [sp, #4]
 8000a10:	f107 0318 	add.w	r3, r7, #24
 8000a14:	9300      	str	r3, [sp, #0]
 8000a16:	4603      	mov	r3, r0
 8000a18:	481f      	ldr	r0, [pc, #124]	; (8000a98 <main+0x148>)
 8000a1a:	f7ff fe7d 	bl	8000718 <_ZN3LCDC1ER11pinStruct_tS1_S1_S1_S1_S1_>
 8000a1e:	481d      	ldr	r0, [pc, #116]	; (8000a94 <main+0x144>)
 8000a20:	f007 fad8 	bl	8007fd4 <__cxa_guard_release>
 8000a24:	481d      	ldr	r0, [pc, #116]	; (8000a9c <main+0x14c>)
 8000a26:	f007 fada 	bl	8007fde <atexit>

  // Example 3:
  lcd.Print("Hello World");
 8000a2a:	491d      	ldr	r1, [pc, #116]	; (8000aa0 <main+0x150>)
 8000a2c:	481a      	ldr	r0, [pc, #104]	; (8000a98 <main+0x148>)
 8000a2e:	f7ff ff5d 	bl	80008ec <_ZN3LCD5PrintEPKc>
  HAL_Delay(1000);
 8000a32:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a36:	f000 fca3 	bl	8001380 <HAL_Delay>
  lcd.Clear();
 8000a3a:	4817      	ldr	r0, [pc, #92]	; (8000a98 <main+0x148>)
 8000a3c:	f7ff ff72 	bl	8000924 <_ZN3LCD5ClearEv>
  HAL_Delay(1000);
 8000a40:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a44:	f000 fc9c 	bl	8001380 <HAL_Delay>
  lcd.Print("Lovely goal");
 8000a48:	4916      	ldr	r1, [pc, #88]	; (8000aa4 <main+0x154>)
 8000a4a:	4813      	ldr	r0, [pc, #76]	; (8000a98 <main+0x148>)
 8000a4c:	f7ff ff4e 	bl	80008ec <_ZN3LCD5PrintEPKc>
  HAL_Delay(1000);
 8000a50:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a54:	f000 fc94 	bl	8001380 <HAL_Delay>
  lcd.Clear();
 8000a58:	480f      	ldr	r0, [pc, #60]	; (8000a98 <main+0x148>)
 8000a5a:	f7ff ff63 	bl	8000924 <_ZN3LCD5ClearEv>
  HAL_Delay(1000);
 8000a5e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a62:	f000 fc8d 	bl	8001380 <HAL_Delay>
  uint8_t var = 7;
 8000a66:	2307      	movs	r3, #7
 8000a68:	71fb      	strb	r3, [r7, #7]
  lcd.Print(var);
 8000a6a:	1dfb      	adds	r3, r7, #7
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	480a      	ldr	r0, [pc, #40]	; (8000a98 <main+0x148>)
 8000a70:	f7ff ff49 	bl	8000906 <_ZN3LCD5PrintERh>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000a74:	f006 ffbe 	bl	80079f4 <MX_USB_HOST_Process>
 8000a78:	e7fc      	b.n	8000a74 <main+0x124>
 8000a7a:	bf00      	nop
 8000a7c:	08008300 	.word	0x08008300
 8000a80:	08008308 	.word	0x08008308
 8000a84:	08008310 	.word	0x08008310
 8000a88:	08008318 	.word	0x08008318
 8000a8c:	08008320 	.word	0x08008320
 8000a90:	08008328 	.word	0x08008328
 8000a94:	200001d8 	.word	0x200001d8
 8000a98:	200001a4 	.word	0x200001a4
 8000a9c:	08000941 	.word	0x08000941
 8000aa0:	080082e8 	.word	0x080082e8
 8000aa4:	080082f4 	.word	0x080082f4

08000aa8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b094      	sub	sp, #80	; 0x50
 8000aac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aae:	f107 0320 	add.w	r3, r7, #32
 8000ab2:	2230      	movs	r2, #48	; 0x30
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f007 fad2 	bl	8008060 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000abc:	f107 030c 	add.w	r3, r7, #12
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	601a      	str	r2, [r3, #0]
 8000ac4:	605a      	str	r2, [r3, #4]
 8000ac6:	609a      	str	r2, [r3, #8]
 8000ac8:	60da      	str	r2, [r3, #12]
 8000aca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000acc:	2300      	movs	r3, #0
 8000ace:	60bb      	str	r3, [r7, #8]
 8000ad0:	4b2d      	ldr	r3, [pc, #180]	; (8000b88 <_Z18SystemClock_Configv+0xe0>)
 8000ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad4:	4a2c      	ldr	r2, [pc, #176]	; (8000b88 <_Z18SystemClock_Configv+0xe0>)
 8000ad6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ada:	6413      	str	r3, [r2, #64]	; 0x40
 8000adc:	4b2a      	ldr	r3, [pc, #168]	; (8000b88 <_Z18SystemClock_Configv+0xe0>)
 8000ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ae4:	60bb      	str	r3, [r7, #8]
 8000ae6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ae8:	2300      	movs	r3, #0
 8000aea:	607b      	str	r3, [r7, #4]
 8000aec:	4b27      	ldr	r3, [pc, #156]	; (8000b8c <_Z18SystemClock_Configv+0xe4>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a26      	ldr	r2, [pc, #152]	; (8000b8c <_Z18SystemClock_Configv+0xe4>)
 8000af2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000af6:	6013      	str	r3, [r2, #0]
 8000af8:	4b24      	ldr	r3, [pc, #144]	; (8000b8c <_Z18SystemClock_Configv+0xe4>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b00:	607b      	str	r3, [r7, #4]
 8000b02:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b04:	2301      	movs	r3, #1
 8000b06:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b08:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b0c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b0e:	2302      	movs	r3, #2
 8000b10:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b12:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b16:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000b18:	2308      	movs	r3, #8
 8000b1a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000b1c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000b20:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b22:	2302      	movs	r3, #2
 8000b24:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000b26:	2307      	movs	r3, #7
 8000b28:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b2a:	f107 0320 	add.w	r3, r7, #32
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f003 fa66 	bl	8004000 <HAL_RCC_OscConfig>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	bf14      	ite	ne
 8000b3a:	2301      	movne	r3, #1
 8000b3c:	2300      	moveq	r3, #0
 8000b3e:	b2db      	uxtb	r3, r3
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <_Z18SystemClock_Configv+0xa0>
  {
    Error_Handler();
 8000b44:	f000 f9c6 	bl	8000ed4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b48:	230f      	movs	r3, #15
 8000b4a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b4c:	2302      	movs	r3, #2
 8000b4e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b50:	2300      	movs	r3, #0
 8000b52:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b54:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b58:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b5e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000b60:	f107 030c 	add.w	r3, r7, #12
 8000b64:	2105      	movs	r1, #5
 8000b66:	4618      	mov	r0, r3
 8000b68:	f003 fcc2 	bl	80044f0 <HAL_RCC_ClockConfig>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	bf14      	ite	ne
 8000b72:	2301      	movne	r3, #1
 8000b74:	2300      	moveq	r3, #0
 8000b76:	b2db      	uxtb	r3, r3
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <_Z18SystemClock_Configv+0xd8>
  {
    Error_Handler();
 8000b7c:	f000 f9aa 	bl	8000ed4 <Error_Handler>
  }
}
 8000b80:	bf00      	nop
 8000b82:	3750      	adds	r7, #80	; 0x50
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	40023800 	.word	0x40023800
 8000b8c:	40007000 	.word	0x40007000

08000b90 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b94:	4b15      	ldr	r3, [pc, #84]	; (8000bec <_ZL12MX_I2C1_Initv+0x5c>)
 8000b96:	4a16      	ldr	r2, [pc, #88]	; (8000bf0 <_ZL12MX_I2C1_Initv+0x60>)
 8000b98:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000b9a:	4b14      	ldr	r3, [pc, #80]	; (8000bec <_ZL12MX_I2C1_Initv+0x5c>)
 8000b9c:	4a15      	ldr	r2, [pc, #84]	; (8000bf4 <_ZL12MX_I2C1_Initv+0x64>)
 8000b9e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ba0:	4b12      	ldr	r3, [pc, #72]	; (8000bec <_ZL12MX_I2C1_Initv+0x5c>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000ba6:	4b11      	ldr	r3, [pc, #68]	; (8000bec <_ZL12MX_I2C1_Initv+0x5c>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bac:	4b0f      	ldr	r3, [pc, #60]	; (8000bec <_ZL12MX_I2C1_Initv+0x5c>)
 8000bae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000bb2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bb4:	4b0d      	ldr	r3, [pc, #52]	; (8000bec <_ZL12MX_I2C1_Initv+0x5c>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000bba:	4b0c      	ldr	r3, [pc, #48]	; (8000bec <_ZL12MX_I2C1_Initv+0x5c>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bc0:	4b0a      	ldr	r3, [pc, #40]	; (8000bec <_ZL12MX_I2C1_Initv+0x5c>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bc6:	4b09      	ldr	r3, [pc, #36]	; (8000bec <_ZL12MX_I2C1_Initv+0x5c>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000bcc:	4807      	ldr	r0, [pc, #28]	; (8000bec <_ZL12MX_I2C1_Initv+0x5c>)
 8000bce:	f002 fc33 	bl	8003438 <HAL_I2C_Init>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	bf14      	ite	ne
 8000bd8:	2301      	movne	r3, #1
 8000bda:	2300      	moveq	r3, #0
 8000bdc:	b2db      	uxtb	r3, r3
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 8000be2:	f000 f977 	bl	8000ed4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000be6:	bf00      	nop
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	200000b0 	.word	0x200000b0
 8000bf0:	40005400 	.word	0x40005400
 8000bf4:	000186a0 	.word	0x000186a0

08000bf8 <_ZL12MX_I2S3_Initv>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000bfc:	4b15      	ldr	r3, [pc, #84]	; (8000c54 <_ZL12MX_I2S3_Initv+0x5c>)
 8000bfe:	4a16      	ldr	r2, [pc, #88]	; (8000c58 <_ZL12MX_I2S3_Initv+0x60>)
 8000c00:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000c02:	4b14      	ldr	r3, [pc, #80]	; (8000c54 <_ZL12MX_I2S3_Initv+0x5c>)
 8000c04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c08:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000c0a:	4b12      	ldr	r3, [pc, #72]	; (8000c54 <_ZL12MX_I2S3_Initv+0x5c>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000c10:	4b10      	ldr	r3, [pc, #64]	; (8000c54 <_ZL12MX_I2S3_Initv+0x5c>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000c16:	4b0f      	ldr	r3, [pc, #60]	; (8000c54 <_ZL12MX_I2S3_Initv+0x5c>)
 8000c18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c1c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000c1e:	4b0d      	ldr	r3, [pc, #52]	; (8000c54 <_ZL12MX_I2S3_Initv+0x5c>)
 8000c20:	4a0e      	ldr	r2, [pc, #56]	; (8000c5c <_ZL12MX_I2S3_Initv+0x64>)
 8000c22:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000c24:	4b0b      	ldr	r3, [pc, #44]	; (8000c54 <_ZL12MX_I2S3_Initv+0x5c>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000c2a:	4b0a      	ldr	r3, [pc, #40]	; (8000c54 <_ZL12MX_I2S3_Initv+0x5c>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000c30:	4b08      	ldr	r3, [pc, #32]	; (8000c54 <_ZL12MX_I2S3_Initv+0x5c>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000c36:	4807      	ldr	r0, [pc, #28]	; (8000c54 <_ZL12MX_I2S3_Initv+0x5c>)
 8000c38:	f002 fd42 	bl	80036c0 <HAL_I2S_Init>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	bf14      	ite	ne
 8000c42:	2301      	movne	r3, #1
 8000c44:	2300      	moveq	r3, #0
 8000c46:	b2db      	uxtb	r3, r3
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <_ZL12MX_I2S3_Initv+0x58>
  {
    Error_Handler();
 8000c4c:	f000 f942 	bl	8000ed4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000c50:	bf00      	nop
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	20000104 	.word	0x20000104
 8000c58:	40003c00 	.word	0x40003c00
 8000c5c:	00017700 	.word	0x00017700

08000c60 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c64:	4b1a      	ldr	r3, [pc, #104]	; (8000cd0 <_ZL12MX_SPI1_Initv+0x70>)
 8000c66:	4a1b      	ldr	r2, [pc, #108]	; (8000cd4 <_ZL12MX_SPI1_Initv+0x74>)
 8000c68:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c6a:	4b19      	ldr	r3, [pc, #100]	; (8000cd0 <_ZL12MX_SPI1_Initv+0x70>)
 8000c6c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c70:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c72:	4b17      	ldr	r3, [pc, #92]	; (8000cd0 <_ZL12MX_SPI1_Initv+0x70>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c78:	4b15      	ldr	r3, [pc, #84]	; (8000cd0 <_ZL12MX_SPI1_Initv+0x70>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c7e:	4b14      	ldr	r3, [pc, #80]	; (8000cd0 <_ZL12MX_SPI1_Initv+0x70>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c84:	4b12      	ldr	r3, [pc, #72]	; (8000cd0 <_ZL12MX_SPI1_Initv+0x70>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c8a:	4b11      	ldr	r3, [pc, #68]	; (8000cd0 <_ZL12MX_SPI1_Initv+0x70>)
 8000c8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c90:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c92:	4b0f      	ldr	r3, [pc, #60]	; (8000cd0 <_ZL12MX_SPI1_Initv+0x70>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c98:	4b0d      	ldr	r3, [pc, #52]	; (8000cd0 <_ZL12MX_SPI1_Initv+0x70>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c9e:	4b0c      	ldr	r3, [pc, #48]	; (8000cd0 <_ZL12MX_SPI1_Initv+0x70>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ca4:	4b0a      	ldr	r3, [pc, #40]	; (8000cd0 <_ZL12MX_SPI1_Initv+0x70>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000caa:	4b09      	ldr	r3, [pc, #36]	; (8000cd0 <_ZL12MX_SPI1_Initv+0x70>)
 8000cac:	220a      	movs	r2, #10
 8000cae:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000cb0:	4807      	ldr	r0, [pc, #28]	; (8000cd0 <_ZL12MX_SPI1_Initv+0x70>)
 8000cb2:	f003 ff45 	bl	8004b40 <HAL_SPI_Init>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	bf14      	ite	ne
 8000cbc:	2301      	movne	r3, #1
 8000cbe:	2300      	moveq	r3, #0
 8000cc0:	b2db      	uxtb	r3, r3
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 8000cc6:	f000 f905 	bl	8000ed4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000cca:	bf00      	nop
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	2000014c 	.word	0x2000014c
 8000cd4:	40013000 	.word	0x40013000

08000cd8 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b08c      	sub	sp, #48	; 0x30
 8000cdc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cde:	f107 031c 	add.w	r3, r7, #28
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	601a      	str	r2, [r3, #0]
 8000ce6:	605a      	str	r2, [r3, #4]
 8000ce8:	609a      	str	r2, [r3, #8]
 8000cea:	60da      	str	r2, [r3, #12]
 8000cec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cee:	2300      	movs	r3, #0
 8000cf0:	61bb      	str	r3, [r7, #24]
 8000cf2:	4b72      	ldr	r3, [pc, #456]	; (8000ebc <_ZL12MX_GPIO_Initv+0x1e4>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf6:	4a71      	ldr	r2, [pc, #452]	; (8000ebc <_ZL12MX_GPIO_Initv+0x1e4>)
 8000cf8:	f043 0310 	orr.w	r3, r3, #16
 8000cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfe:	4b6f      	ldr	r3, [pc, #444]	; (8000ebc <_ZL12MX_GPIO_Initv+0x1e4>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d02:	f003 0310 	and.w	r3, r3, #16
 8000d06:	61bb      	str	r3, [r7, #24]
 8000d08:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	617b      	str	r3, [r7, #20]
 8000d0e:	4b6b      	ldr	r3, [pc, #428]	; (8000ebc <_ZL12MX_GPIO_Initv+0x1e4>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d12:	4a6a      	ldr	r2, [pc, #424]	; (8000ebc <_ZL12MX_GPIO_Initv+0x1e4>)
 8000d14:	f043 0304 	orr.w	r3, r3, #4
 8000d18:	6313      	str	r3, [r2, #48]	; 0x30
 8000d1a:	4b68      	ldr	r3, [pc, #416]	; (8000ebc <_ZL12MX_GPIO_Initv+0x1e4>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1e:	f003 0304 	and.w	r3, r3, #4
 8000d22:	617b      	str	r3, [r7, #20]
 8000d24:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d26:	2300      	movs	r3, #0
 8000d28:	613b      	str	r3, [r7, #16]
 8000d2a:	4b64      	ldr	r3, [pc, #400]	; (8000ebc <_ZL12MX_GPIO_Initv+0x1e4>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2e:	4a63      	ldr	r2, [pc, #396]	; (8000ebc <_ZL12MX_GPIO_Initv+0x1e4>)
 8000d30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d34:	6313      	str	r3, [r2, #48]	; 0x30
 8000d36:	4b61      	ldr	r3, [pc, #388]	; (8000ebc <_ZL12MX_GPIO_Initv+0x1e4>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d3e:	613b      	str	r3, [r7, #16]
 8000d40:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d42:	2300      	movs	r3, #0
 8000d44:	60fb      	str	r3, [r7, #12]
 8000d46:	4b5d      	ldr	r3, [pc, #372]	; (8000ebc <_ZL12MX_GPIO_Initv+0x1e4>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4a:	4a5c      	ldr	r2, [pc, #368]	; (8000ebc <_ZL12MX_GPIO_Initv+0x1e4>)
 8000d4c:	f043 0301 	orr.w	r3, r3, #1
 8000d50:	6313      	str	r3, [r2, #48]	; 0x30
 8000d52:	4b5a      	ldr	r3, [pc, #360]	; (8000ebc <_ZL12MX_GPIO_Initv+0x1e4>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d56:	f003 0301 	and.w	r3, r3, #1
 8000d5a:	60fb      	str	r3, [r7, #12]
 8000d5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d5e:	2300      	movs	r3, #0
 8000d60:	60bb      	str	r3, [r7, #8]
 8000d62:	4b56      	ldr	r3, [pc, #344]	; (8000ebc <_ZL12MX_GPIO_Initv+0x1e4>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d66:	4a55      	ldr	r2, [pc, #340]	; (8000ebc <_ZL12MX_GPIO_Initv+0x1e4>)
 8000d68:	f043 0302 	orr.w	r3, r3, #2
 8000d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d6e:	4b53      	ldr	r3, [pc, #332]	; (8000ebc <_ZL12MX_GPIO_Initv+0x1e4>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d72:	f003 0302 	and.w	r3, r3, #2
 8000d76:	60bb      	str	r3, [r7, #8]
 8000d78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	607b      	str	r3, [r7, #4]
 8000d7e:	4b4f      	ldr	r3, [pc, #316]	; (8000ebc <_ZL12MX_GPIO_Initv+0x1e4>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d82:	4a4e      	ldr	r2, [pc, #312]	; (8000ebc <_ZL12MX_GPIO_Initv+0x1e4>)
 8000d84:	f043 0308 	orr.w	r3, r3, #8
 8000d88:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8a:	4b4c      	ldr	r3, [pc, #304]	; (8000ebc <_ZL12MX_GPIO_Initv+0x1e4>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8e:	f003 0308 	and.w	r3, r3, #8
 8000d92:	607b      	str	r3, [r7, #4]
 8000d94:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000d96:	2200      	movs	r2, #0
 8000d98:	2108      	movs	r1, #8
 8000d9a:	4849      	ldr	r0, [pc, #292]	; (8000ec0 <_ZL12MX_GPIO_Initv+0x1e8>)
 8000d9c:	f000 fdc2 	bl	8001924 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000da0:	2201      	movs	r2, #1
 8000da2:	2101      	movs	r1, #1
 8000da4:	4847      	ldr	r0, [pc, #284]	; (8000ec4 <_ZL12MX_GPIO_Initv+0x1ec>)
 8000da6:	f000 fdbd 	bl	8001924 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000daa:	2200      	movs	r2, #0
 8000dac:	f24f 01df 	movw	r1, #61663	; 0xf0df
 8000db0:	4845      	ldr	r0, [pc, #276]	; (8000ec8 <_ZL12MX_GPIO_Initv+0x1f0>)
 8000db2:	f000 fdb7 	bl	8001924 <HAL_GPIO_WritePin>
                          |RS_PIN_Pin|EN_PIN_Pin|D4_PIN_Pin|D5_PIN_Pin
                          |Audio_RST_Pin|D6_PIN_Pin|D7_PIN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000db6:	2308      	movs	r3, #8
 8000db8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000dc6:	f107 031c 	add.w	r3, r7, #28
 8000dca:	4619      	mov	r1, r3
 8000dcc:	483c      	ldr	r0, [pc, #240]	; (8000ec0 <_ZL12MX_GPIO_Initv+0x1e8>)
 8000dce:	f000 fc0d 	bl	80015ec <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dde:	2300      	movs	r3, #0
 8000de0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000de2:	f107 031c 	add.w	r3, r7, #28
 8000de6:	4619      	mov	r1, r3
 8000de8:	4836      	ldr	r0, [pc, #216]	; (8000ec4 <_ZL12MX_GPIO_Initv+0x1ec>)
 8000dea:	f000 fbff 	bl	80015ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000dee:	2308      	movs	r3, #8
 8000df0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df2:	2302      	movs	r3, #2
 8000df4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df6:	2300      	movs	r3, #0
 8000df8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000dfe:	2305      	movs	r3, #5
 8000e00:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000e02:	f107 031c 	add.w	r3, r7, #28
 8000e06:	4619      	mov	r1, r3
 8000e08:	482e      	ldr	r0, [pc, #184]	; (8000ec4 <_ZL12MX_GPIO_Initv+0x1ec>)
 8000e0a:	f000 fbef 	bl	80015ec <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000e12:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000e16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e1c:	f107 031c 	add.w	r3, r7, #28
 8000e20:	4619      	mov	r1, r3
 8000e22:	482a      	ldr	r0, [pc, #168]	; (8000ecc <_ZL12MX_GPIO_Initv+0x1f4>)
 8000e24:	f000 fbe2 	bl	80015ec <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000e28:	2304      	movs	r3, #4
 8000e2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e30:	2300      	movs	r3, #0
 8000e32:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000e34:	f107 031c 	add.w	r3, r7, #28
 8000e38:	4619      	mov	r1, r3
 8000e3a:	4825      	ldr	r0, [pc, #148]	; (8000ed0 <_ZL12MX_GPIO_Initv+0x1f8>)
 8000e3c:	f000 fbd6 	bl	80015ec <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000e40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e46:	2302      	movs	r3, #2
 8000e48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e52:	2305      	movs	r3, #5
 8000e54:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000e56:	f107 031c 	add.w	r3, r7, #28
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	481c      	ldr	r0, [pc, #112]	; (8000ed0 <_ZL12MX_GPIO_Initv+0x1f8>)
 8000e5e:	f000 fbc5 	bl	80015ec <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           RS_PIN_Pin EN_PIN_Pin D4_PIN_Pin D5_PIN_Pin
                           Audio_RST_Pin D6_PIN_Pin D7_PIN_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000e62:	f24f 03df 	movw	r3, #61663	; 0xf0df
 8000e66:	61fb      	str	r3, [r7, #28]
                          |RS_PIN_Pin|EN_PIN_Pin|D4_PIN_Pin|D5_PIN_Pin
                          |Audio_RST_Pin|D6_PIN_Pin|D7_PIN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e70:	2300      	movs	r3, #0
 8000e72:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e74:	f107 031c 	add.w	r3, r7, #28
 8000e78:	4619      	mov	r1, r3
 8000e7a:	4813      	ldr	r0, [pc, #76]	; (8000ec8 <_ZL12MX_GPIO_Initv+0x1f0>)
 8000e7c:	f000 fbb6 	bl	80015ec <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000e80:	2320      	movs	r3, #32
 8000e82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e84:	2300      	movs	r3, #0
 8000e86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000e8c:	f107 031c 	add.w	r3, r7, #28
 8000e90:	4619      	mov	r1, r3
 8000e92:	480d      	ldr	r0, [pc, #52]	; (8000ec8 <_ZL12MX_GPIO_Initv+0x1f0>)
 8000e94:	f000 fbaa 	bl	80015ec <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000e98:	2302      	movs	r3, #2
 8000e9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000e9c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000ea0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000ea6:	f107 031c 	add.w	r3, r7, #28
 8000eaa:	4619      	mov	r1, r3
 8000eac:	4804      	ldr	r0, [pc, #16]	; (8000ec0 <_ZL12MX_GPIO_Initv+0x1e8>)
 8000eae:	f000 fb9d 	bl	80015ec <HAL_GPIO_Init>

}
 8000eb2:	bf00      	nop
 8000eb4:	3730      	adds	r7, #48	; 0x30
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	40023800 	.word	0x40023800
 8000ec0:	40021000 	.word	0x40021000
 8000ec4:	40020800 	.word	0x40020800
 8000ec8:	40020c00 	.word	0x40020c00
 8000ecc:	40020000 	.word	0x40020000
 8000ed0:	40020400 	.word	0x40020400

08000ed4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ed8:	b672      	cpsid	i
}
 8000eda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000edc:	e7fe      	b.n	8000edc <Error_Handler+0x8>
	...

08000ee0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	607b      	str	r3, [r7, #4]
 8000eea:	4b10      	ldr	r3, [pc, #64]	; (8000f2c <HAL_MspInit+0x4c>)
 8000eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eee:	4a0f      	ldr	r2, [pc, #60]	; (8000f2c <HAL_MspInit+0x4c>)
 8000ef0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ef4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ef6:	4b0d      	ldr	r3, [pc, #52]	; (8000f2c <HAL_MspInit+0x4c>)
 8000ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000efa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000efe:	607b      	str	r3, [r7, #4]
 8000f00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f02:	2300      	movs	r3, #0
 8000f04:	603b      	str	r3, [r7, #0]
 8000f06:	4b09      	ldr	r3, [pc, #36]	; (8000f2c <HAL_MspInit+0x4c>)
 8000f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0a:	4a08      	ldr	r2, [pc, #32]	; (8000f2c <HAL_MspInit+0x4c>)
 8000f0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f10:	6413      	str	r3, [r2, #64]	; 0x40
 8000f12:	4b06      	ldr	r3, [pc, #24]	; (8000f2c <HAL_MspInit+0x4c>)
 8000f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f1a:	603b      	str	r3, [r7, #0]
 8000f1c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000f1e:	2007      	movs	r0, #7
 8000f20:	f000 fb22 	bl	8001568 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f24:	bf00      	nop
 8000f26:	3708      	adds	r7, #8
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	40023800 	.word	0x40023800

08000f30 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b08a      	sub	sp, #40	; 0x28
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f38:	f107 0314 	add.w	r3, r7, #20
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	605a      	str	r2, [r3, #4]
 8000f42:	609a      	str	r2, [r3, #8]
 8000f44:	60da      	str	r2, [r3, #12]
 8000f46:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a19      	ldr	r2, [pc, #100]	; (8000fb4 <HAL_I2C_MspInit+0x84>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d12c      	bne.n	8000fac <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f52:	2300      	movs	r3, #0
 8000f54:	613b      	str	r3, [r7, #16]
 8000f56:	4b18      	ldr	r3, [pc, #96]	; (8000fb8 <HAL_I2C_MspInit+0x88>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	4a17      	ldr	r2, [pc, #92]	; (8000fb8 <HAL_I2C_MspInit+0x88>)
 8000f5c:	f043 0302 	orr.w	r3, r3, #2
 8000f60:	6313      	str	r3, [r2, #48]	; 0x30
 8000f62:	4b15      	ldr	r3, [pc, #84]	; (8000fb8 <HAL_I2C_MspInit+0x88>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f66:	f003 0302 	and.w	r3, r3, #2
 8000f6a:	613b      	str	r3, [r7, #16]
 8000f6c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000f6e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000f72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f74:	2312      	movs	r3, #18
 8000f76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f80:	2304      	movs	r3, #4
 8000f82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f84:	f107 0314 	add.w	r3, r7, #20
 8000f88:	4619      	mov	r1, r3
 8000f8a:	480c      	ldr	r0, [pc, #48]	; (8000fbc <HAL_I2C_MspInit+0x8c>)
 8000f8c:	f000 fb2e 	bl	80015ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f90:	2300      	movs	r3, #0
 8000f92:	60fb      	str	r3, [r7, #12]
 8000f94:	4b08      	ldr	r3, [pc, #32]	; (8000fb8 <HAL_I2C_MspInit+0x88>)
 8000f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f98:	4a07      	ldr	r2, [pc, #28]	; (8000fb8 <HAL_I2C_MspInit+0x88>)
 8000f9a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f9e:	6413      	str	r3, [r2, #64]	; 0x40
 8000fa0:	4b05      	ldr	r3, [pc, #20]	; (8000fb8 <HAL_I2C_MspInit+0x88>)
 8000fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fa8:	60fb      	str	r3, [r7, #12]
 8000faa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000fac:	bf00      	nop
 8000fae:	3728      	adds	r7, #40	; 0x28
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	40005400 	.word	0x40005400
 8000fb8:	40023800 	.word	0x40023800
 8000fbc:	40020400 	.word	0x40020400

08000fc0 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b08e      	sub	sp, #56	; 0x38
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fcc:	2200      	movs	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	605a      	str	r2, [r3, #4]
 8000fd2:	609a      	str	r2, [r3, #8]
 8000fd4:	60da      	str	r2, [r3, #12]
 8000fd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fd8:	f107 0314 	add.w	r3, r7, #20
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	605a      	str	r2, [r3, #4]
 8000fe2:	609a      	str	r2, [r3, #8]
 8000fe4:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4a31      	ldr	r2, [pc, #196]	; (80010b0 <HAL_I2S_MspInit+0xf0>)
 8000fec:	4293      	cmp	r3, r2
 8000fee:	d15a      	bne.n	80010a6 <HAL_I2S_MspInit+0xe6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000ff4:	23c0      	movs	r3, #192	; 0xc0
 8000ff6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ffc:	f107 0314 	add.w	r3, r7, #20
 8001000:	4618      	mov	r0, r3
 8001002:	f003 fc5d 	bl	80048c0 <HAL_RCCEx_PeriphCLKConfig>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 800100c:	f7ff ff62 	bl	8000ed4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001010:	2300      	movs	r3, #0
 8001012:	613b      	str	r3, [r7, #16]
 8001014:	4b27      	ldr	r3, [pc, #156]	; (80010b4 <HAL_I2S_MspInit+0xf4>)
 8001016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001018:	4a26      	ldr	r2, [pc, #152]	; (80010b4 <HAL_I2S_MspInit+0xf4>)
 800101a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800101e:	6413      	str	r3, [r2, #64]	; 0x40
 8001020:	4b24      	ldr	r3, [pc, #144]	; (80010b4 <HAL_I2S_MspInit+0xf4>)
 8001022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001024:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001028:	613b      	str	r3, [r7, #16]
 800102a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800102c:	2300      	movs	r3, #0
 800102e:	60fb      	str	r3, [r7, #12]
 8001030:	4b20      	ldr	r3, [pc, #128]	; (80010b4 <HAL_I2S_MspInit+0xf4>)
 8001032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001034:	4a1f      	ldr	r2, [pc, #124]	; (80010b4 <HAL_I2S_MspInit+0xf4>)
 8001036:	f043 0301 	orr.w	r3, r3, #1
 800103a:	6313      	str	r3, [r2, #48]	; 0x30
 800103c:	4b1d      	ldr	r3, [pc, #116]	; (80010b4 <HAL_I2S_MspInit+0xf4>)
 800103e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001040:	f003 0301 	and.w	r3, r3, #1
 8001044:	60fb      	str	r3, [r7, #12]
 8001046:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001048:	2300      	movs	r3, #0
 800104a:	60bb      	str	r3, [r7, #8]
 800104c:	4b19      	ldr	r3, [pc, #100]	; (80010b4 <HAL_I2S_MspInit+0xf4>)
 800104e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001050:	4a18      	ldr	r2, [pc, #96]	; (80010b4 <HAL_I2S_MspInit+0xf4>)
 8001052:	f043 0304 	orr.w	r3, r3, #4
 8001056:	6313      	str	r3, [r2, #48]	; 0x30
 8001058:	4b16      	ldr	r3, [pc, #88]	; (80010b4 <HAL_I2S_MspInit+0xf4>)
 800105a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105c:	f003 0304 	and.w	r3, r3, #4
 8001060:	60bb      	str	r3, [r7, #8]
 8001062:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001064:	2310      	movs	r3, #16
 8001066:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001068:	2302      	movs	r3, #2
 800106a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106c:	2300      	movs	r3, #0
 800106e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001070:	2300      	movs	r3, #0
 8001072:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001074:	2306      	movs	r3, #6
 8001076:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001078:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800107c:	4619      	mov	r1, r3
 800107e:	480e      	ldr	r0, [pc, #56]	; (80010b8 <HAL_I2S_MspInit+0xf8>)
 8001080:	f000 fab4 	bl	80015ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001084:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001088:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800108a:	2302      	movs	r3, #2
 800108c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108e:	2300      	movs	r3, #0
 8001090:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001092:	2300      	movs	r3, #0
 8001094:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001096:	2306      	movs	r3, #6
 8001098:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800109a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800109e:	4619      	mov	r1, r3
 80010a0:	4806      	ldr	r0, [pc, #24]	; (80010bc <HAL_I2S_MspInit+0xfc>)
 80010a2:	f000 faa3 	bl	80015ec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80010a6:	bf00      	nop
 80010a8:	3738      	adds	r7, #56	; 0x38
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	40003c00 	.word	0x40003c00
 80010b4:	40023800 	.word	0x40023800
 80010b8:	40020000 	.word	0x40020000
 80010bc:	40020800 	.word	0x40020800

080010c0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b08a      	sub	sp, #40	; 0x28
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c8:	f107 0314 	add.w	r3, r7, #20
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	605a      	str	r2, [r3, #4]
 80010d2:	609a      	str	r2, [r3, #8]
 80010d4:	60da      	str	r2, [r3, #12]
 80010d6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a19      	ldr	r2, [pc, #100]	; (8001144 <HAL_SPI_MspInit+0x84>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d12b      	bne.n	800113a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80010e2:	2300      	movs	r3, #0
 80010e4:	613b      	str	r3, [r7, #16]
 80010e6:	4b18      	ldr	r3, [pc, #96]	; (8001148 <HAL_SPI_MspInit+0x88>)
 80010e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ea:	4a17      	ldr	r2, [pc, #92]	; (8001148 <HAL_SPI_MspInit+0x88>)
 80010ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80010f0:	6453      	str	r3, [r2, #68]	; 0x44
 80010f2:	4b15      	ldr	r3, [pc, #84]	; (8001148 <HAL_SPI_MspInit+0x88>)
 80010f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010fa:	613b      	str	r3, [r7, #16]
 80010fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010fe:	2300      	movs	r3, #0
 8001100:	60fb      	str	r3, [r7, #12]
 8001102:	4b11      	ldr	r3, [pc, #68]	; (8001148 <HAL_SPI_MspInit+0x88>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001106:	4a10      	ldr	r2, [pc, #64]	; (8001148 <HAL_SPI_MspInit+0x88>)
 8001108:	f043 0301 	orr.w	r3, r3, #1
 800110c:	6313      	str	r3, [r2, #48]	; 0x30
 800110e:	4b0e      	ldr	r3, [pc, #56]	; (8001148 <HAL_SPI_MspInit+0x88>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001112:	f003 0301 	and.w	r3, r3, #1
 8001116:	60fb      	str	r3, [r7, #12]
 8001118:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800111a:	23e0      	movs	r3, #224	; 0xe0
 800111c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111e:	2302      	movs	r3, #2
 8001120:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001122:	2300      	movs	r3, #0
 8001124:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001126:	2300      	movs	r3, #0
 8001128:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800112a:	2305      	movs	r3, #5
 800112c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800112e:	f107 0314 	add.w	r3, r7, #20
 8001132:	4619      	mov	r1, r3
 8001134:	4805      	ldr	r0, [pc, #20]	; (800114c <HAL_SPI_MspInit+0x8c>)
 8001136:	f000 fa59 	bl	80015ec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800113a:	bf00      	nop
 800113c:	3728      	adds	r7, #40	; 0x28
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	40013000 	.word	0x40013000
 8001148:	40023800 	.word	0x40023800
 800114c:	40020000 	.word	0x40020000

08001150 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001154:	e7fe      	b.n	8001154 <NMI_Handler+0x4>

08001156 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001156:	b480      	push	{r7}
 8001158:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800115a:	e7fe      	b.n	800115a <HardFault_Handler+0x4>

0800115c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001160:	e7fe      	b.n	8001160 <MemManage_Handler+0x4>

08001162 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001162:	b480      	push	{r7}
 8001164:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001166:	e7fe      	b.n	8001166 <BusFault_Handler+0x4>

08001168 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800116c:	e7fe      	b.n	800116c <UsageFault_Handler+0x4>

0800116e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800116e:	b480      	push	{r7}
 8001170:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001172:	bf00      	nop
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr

0800117c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001180:	bf00      	nop
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr

0800118a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800118a:	b480      	push	{r7}
 800118c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800118e:	bf00      	nop
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr

08001198 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800119c:	f000 f8d0 	bl	8001340 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011a0:	bf00      	nop
 80011a2:	bd80      	pop	{r7, pc}

080011a4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80011a8:	4802      	ldr	r0, [pc, #8]	; (80011b4 <OTG_FS_IRQHandler+0x10>)
 80011aa:	f000 fe3f 	bl	8001e2c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80011ae:	bf00      	nop
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	20000658 	.word	0x20000658

080011b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b086      	sub	sp, #24
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011c0:	4a14      	ldr	r2, [pc, #80]	; (8001214 <_sbrk+0x5c>)
 80011c2:	4b15      	ldr	r3, [pc, #84]	; (8001218 <_sbrk+0x60>)
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011cc:	4b13      	ldr	r3, [pc, #76]	; (800121c <_sbrk+0x64>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d102      	bne.n	80011da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011d4:	4b11      	ldr	r3, [pc, #68]	; (800121c <_sbrk+0x64>)
 80011d6:	4a12      	ldr	r2, [pc, #72]	; (8001220 <_sbrk+0x68>)
 80011d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011da:	4b10      	ldr	r3, [pc, #64]	; (800121c <_sbrk+0x64>)
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4413      	add	r3, r2
 80011e2:	693a      	ldr	r2, [r7, #16]
 80011e4:	429a      	cmp	r2, r3
 80011e6:	d207      	bcs.n	80011f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011e8:	f006 ff00 	bl	8007fec <__errno>
 80011ec:	4603      	mov	r3, r0
 80011ee:	220c      	movs	r2, #12
 80011f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011f2:	f04f 33ff 	mov.w	r3, #4294967295
 80011f6:	e009      	b.n	800120c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011f8:	4b08      	ldr	r3, [pc, #32]	; (800121c <_sbrk+0x64>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011fe:	4b07      	ldr	r3, [pc, #28]	; (800121c <_sbrk+0x64>)
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4413      	add	r3, r2
 8001206:	4a05      	ldr	r2, [pc, #20]	; (800121c <_sbrk+0x64>)
 8001208:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800120a:	68fb      	ldr	r3, [r7, #12]
}
 800120c:	4618      	mov	r0, r3
 800120e:	3718      	adds	r7, #24
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	20020000 	.word	0x20020000
 8001218:	00000400 	.word	0x00000400
 800121c:	200001dc 	.word	0x200001dc
 8001220:	20000970 	.word	0x20000970

08001224 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001228:	4b06      	ldr	r3, [pc, #24]	; (8001244 <SystemInit+0x20>)
 800122a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800122e:	4a05      	ldr	r2, [pc, #20]	; (8001244 <SystemInit+0x20>)
 8001230:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001234:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001238:	bf00      	nop
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	e000ed00 	.word	0xe000ed00

08001248 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001248:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001280 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800124c:	480d      	ldr	r0, [pc, #52]	; (8001284 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800124e:	490e      	ldr	r1, [pc, #56]	; (8001288 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001250:	4a0e      	ldr	r2, [pc, #56]	; (800128c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001252:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001254:	e002      	b.n	800125c <LoopCopyDataInit>

08001256 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001256:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001258:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800125a:	3304      	adds	r3, #4

0800125c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800125c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800125e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001260:	d3f9      	bcc.n	8001256 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001262:	4a0b      	ldr	r2, [pc, #44]	; (8001290 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001264:	4c0b      	ldr	r4, [pc, #44]	; (8001294 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001266:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001268:	e001      	b.n	800126e <LoopFillZerobss>

0800126a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800126a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800126c:	3204      	adds	r2, #4

0800126e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800126e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001270:	d3fb      	bcc.n	800126a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001272:	f7ff ffd7 	bl	8001224 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001276:	f006 febf 	bl	8007ff8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800127a:	f7ff fb69 	bl	8000950 <main>
  bx  lr    
 800127e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001280:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001284:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001288:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 800128c:	0800836c 	.word	0x0800836c
  ldr r2, =_sbss
 8001290:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8001294:	2000096c 	.word	0x2000096c

08001298 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001298:	e7fe      	b.n	8001298 <ADC_IRQHandler>
	...

0800129c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012a0:	4b0e      	ldr	r3, [pc, #56]	; (80012dc <HAL_Init+0x40>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a0d      	ldr	r2, [pc, #52]	; (80012dc <HAL_Init+0x40>)
 80012a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012ac:	4b0b      	ldr	r3, [pc, #44]	; (80012dc <HAL_Init+0x40>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a0a      	ldr	r2, [pc, #40]	; (80012dc <HAL_Init+0x40>)
 80012b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012b8:	4b08      	ldr	r3, [pc, #32]	; (80012dc <HAL_Init+0x40>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a07      	ldr	r2, [pc, #28]	; (80012dc <HAL_Init+0x40>)
 80012be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012c4:	2003      	movs	r0, #3
 80012c6:	f000 f94f 	bl	8001568 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012ca:	2000      	movs	r0, #0
 80012cc:	f000 f808 	bl	80012e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012d0:	f7ff fe06 	bl	8000ee0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012d4:	2300      	movs	r3, #0
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	40023c00 	.word	0x40023c00

080012e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012e8:	4b12      	ldr	r3, [pc, #72]	; (8001334 <HAL_InitTick+0x54>)
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	4b12      	ldr	r3, [pc, #72]	; (8001338 <HAL_InitTick+0x58>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	4619      	mov	r1, r3
 80012f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80012fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80012fe:	4618      	mov	r0, r3
 8001300:	f000 f967 	bl	80015d2 <HAL_SYSTICK_Config>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800130a:	2301      	movs	r3, #1
 800130c:	e00e      	b.n	800132c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2b0f      	cmp	r3, #15
 8001312:	d80a      	bhi.n	800132a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001314:	2200      	movs	r2, #0
 8001316:	6879      	ldr	r1, [r7, #4]
 8001318:	f04f 30ff 	mov.w	r0, #4294967295
 800131c:	f000 f92f 	bl	800157e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001320:	4a06      	ldr	r2, [pc, #24]	; (800133c <HAL_InitTick+0x5c>)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001326:	2300      	movs	r3, #0
 8001328:	e000      	b.n	800132c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
}
 800132c:	4618      	mov	r0, r3
 800132e:	3708      	adds	r7, #8
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	20000000 	.word	0x20000000
 8001338:	20000008 	.word	0x20000008
 800133c:	20000004 	.word	0x20000004

08001340 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001344:	4b06      	ldr	r3, [pc, #24]	; (8001360 <HAL_IncTick+0x20>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	461a      	mov	r2, r3
 800134a:	4b06      	ldr	r3, [pc, #24]	; (8001364 <HAL_IncTick+0x24>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4413      	add	r3, r2
 8001350:	4a04      	ldr	r2, [pc, #16]	; (8001364 <HAL_IncTick+0x24>)
 8001352:	6013      	str	r3, [r2, #0]
}
 8001354:	bf00      	nop
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	20000008 	.word	0x20000008
 8001364:	2000027c 	.word	0x2000027c

08001368 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  return uwTick;
 800136c:	4b03      	ldr	r3, [pc, #12]	; (800137c <HAL_GetTick+0x14>)
 800136e:	681b      	ldr	r3, [r3, #0]
}
 8001370:	4618      	mov	r0, r3
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	2000027c 	.word	0x2000027c

08001380 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001388:	f7ff ffee 	bl	8001368 <HAL_GetTick>
 800138c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001398:	d005      	beq.n	80013a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800139a:	4b0a      	ldr	r3, [pc, #40]	; (80013c4 <HAL_Delay+0x44>)
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	461a      	mov	r2, r3
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	4413      	add	r3, r2
 80013a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80013a6:	bf00      	nop
 80013a8:	f7ff ffde 	bl	8001368 <HAL_GetTick>
 80013ac:	4602      	mov	r2, r0
 80013ae:	68bb      	ldr	r3, [r7, #8]
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	68fa      	ldr	r2, [r7, #12]
 80013b4:	429a      	cmp	r2, r3
 80013b6:	d8f7      	bhi.n	80013a8 <HAL_Delay+0x28>
  {
  }
}
 80013b8:	bf00      	nop
 80013ba:	bf00      	nop
 80013bc:	3710      	adds	r7, #16
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	20000008 	.word	0x20000008

080013c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b085      	sub	sp, #20
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	f003 0307 	and.w	r3, r3, #7
 80013d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013d8:	4b0c      	ldr	r3, [pc, #48]	; (800140c <__NVIC_SetPriorityGrouping+0x44>)
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013de:	68ba      	ldr	r2, [r7, #8]
 80013e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013e4:	4013      	ands	r3, r2
 80013e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013fa:	4a04      	ldr	r2, [pc, #16]	; (800140c <__NVIC_SetPriorityGrouping+0x44>)
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	60d3      	str	r3, [r2, #12]
}
 8001400:	bf00      	nop
 8001402:	3714      	adds	r7, #20
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr
 800140c:	e000ed00 	.word	0xe000ed00

08001410 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001414:	4b04      	ldr	r3, [pc, #16]	; (8001428 <__NVIC_GetPriorityGrouping+0x18>)
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	0a1b      	lsrs	r3, r3, #8
 800141a:	f003 0307 	and.w	r3, r3, #7
}
 800141e:	4618      	mov	r0, r3
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr
 8001428:	e000ed00 	.word	0xe000ed00

0800142c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	4603      	mov	r3, r0
 8001434:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800143a:	2b00      	cmp	r3, #0
 800143c:	db0b      	blt.n	8001456 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800143e:	79fb      	ldrb	r3, [r7, #7]
 8001440:	f003 021f 	and.w	r2, r3, #31
 8001444:	4907      	ldr	r1, [pc, #28]	; (8001464 <__NVIC_EnableIRQ+0x38>)
 8001446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144a:	095b      	lsrs	r3, r3, #5
 800144c:	2001      	movs	r0, #1
 800144e:	fa00 f202 	lsl.w	r2, r0, r2
 8001452:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001456:	bf00      	nop
 8001458:	370c      	adds	r7, #12
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	e000e100 	.word	0xe000e100

08001468 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	4603      	mov	r3, r0
 8001470:	6039      	str	r1, [r7, #0]
 8001472:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001474:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001478:	2b00      	cmp	r3, #0
 800147a:	db0a      	blt.n	8001492 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	b2da      	uxtb	r2, r3
 8001480:	490c      	ldr	r1, [pc, #48]	; (80014b4 <__NVIC_SetPriority+0x4c>)
 8001482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001486:	0112      	lsls	r2, r2, #4
 8001488:	b2d2      	uxtb	r2, r2
 800148a:	440b      	add	r3, r1
 800148c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001490:	e00a      	b.n	80014a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	b2da      	uxtb	r2, r3
 8001496:	4908      	ldr	r1, [pc, #32]	; (80014b8 <__NVIC_SetPriority+0x50>)
 8001498:	79fb      	ldrb	r3, [r7, #7]
 800149a:	f003 030f 	and.w	r3, r3, #15
 800149e:	3b04      	subs	r3, #4
 80014a0:	0112      	lsls	r2, r2, #4
 80014a2:	b2d2      	uxtb	r2, r2
 80014a4:	440b      	add	r3, r1
 80014a6:	761a      	strb	r2, [r3, #24]
}
 80014a8:	bf00      	nop
 80014aa:	370c      	adds	r7, #12
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr
 80014b4:	e000e100 	.word	0xe000e100
 80014b8:	e000ed00 	.word	0xe000ed00

080014bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014bc:	b480      	push	{r7}
 80014be:	b089      	sub	sp, #36	; 0x24
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	60f8      	str	r0, [r7, #12]
 80014c4:	60b9      	str	r1, [r7, #8]
 80014c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	f003 0307 	and.w	r3, r3, #7
 80014ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014d0:	69fb      	ldr	r3, [r7, #28]
 80014d2:	f1c3 0307 	rsb	r3, r3, #7
 80014d6:	2b04      	cmp	r3, #4
 80014d8:	bf28      	it	cs
 80014da:	2304      	movcs	r3, #4
 80014dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	3304      	adds	r3, #4
 80014e2:	2b06      	cmp	r3, #6
 80014e4:	d902      	bls.n	80014ec <NVIC_EncodePriority+0x30>
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	3b03      	subs	r3, #3
 80014ea:	e000      	b.n	80014ee <NVIC_EncodePriority+0x32>
 80014ec:	2300      	movs	r3, #0
 80014ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014f0:	f04f 32ff 	mov.w	r2, #4294967295
 80014f4:	69bb      	ldr	r3, [r7, #24]
 80014f6:	fa02 f303 	lsl.w	r3, r2, r3
 80014fa:	43da      	mvns	r2, r3
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	401a      	ands	r2, r3
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001504:	f04f 31ff 	mov.w	r1, #4294967295
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	fa01 f303 	lsl.w	r3, r1, r3
 800150e:	43d9      	mvns	r1, r3
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001514:	4313      	orrs	r3, r2
         );
}
 8001516:	4618      	mov	r0, r3
 8001518:	3724      	adds	r7, #36	; 0x24
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
	...

08001524 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	3b01      	subs	r3, #1
 8001530:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001534:	d301      	bcc.n	800153a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001536:	2301      	movs	r3, #1
 8001538:	e00f      	b.n	800155a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800153a:	4a0a      	ldr	r2, [pc, #40]	; (8001564 <SysTick_Config+0x40>)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	3b01      	subs	r3, #1
 8001540:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001542:	210f      	movs	r1, #15
 8001544:	f04f 30ff 	mov.w	r0, #4294967295
 8001548:	f7ff ff8e 	bl	8001468 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800154c:	4b05      	ldr	r3, [pc, #20]	; (8001564 <SysTick_Config+0x40>)
 800154e:	2200      	movs	r2, #0
 8001550:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001552:	4b04      	ldr	r3, [pc, #16]	; (8001564 <SysTick_Config+0x40>)
 8001554:	2207      	movs	r2, #7
 8001556:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001558:	2300      	movs	r3, #0
}
 800155a:	4618      	mov	r0, r3
 800155c:	3708      	adds	r7, #8
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	e000e010 	.word	0xe000e010

08001568 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	f7ff ff29 	bl	80013c8 <__NVIC_SetPriorityGrouping>
}
 8001576:	bf00      	nop
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}

0800157e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800157e:	b580      	push	{r7, lr}
 8001580:	b086      	sub	sp, #24
 8001582:	af00      	add	r7, sp, #0
 8001584:	4603      	mov	r3, r0
 8001586:	60b9      	str	r1, [r7, #8]
 8001588:	607a      	str	r2, [r7, #4]
 800158a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800158c:	2300      	movs	r3, #0
 800158e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001590:	f7ff ff3e 	bl	8001410 <__NVIC_GetPriorityGrouping>
 8001594:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001596:	687a      	ldr	r2, [r7, #4]
 8001598:	68b9      	ldr	r1, [r7, #8]
 800159a:	6978      	ldr	r0, [r7, #20]
 800159c:	f7ff ff8e 	bl	80014bc <NVIC_EncodePriority>
 80015a0:	4602      	mov	r2, r0
 80015a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015a6:	4611      	mov	r1, r2
 80015a8:	4618      	mov	r0, r3
 80015aa:	f7ff ff5d 	bl	8001468 <__NVIC_SetPriority>
}
 80015ae:	bf00      	nop
 80015b0:	3718      	adds	r7, #24
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}

080015b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015b6:	b580      	push	{r7, lr}
 80015b8:	b082      	sub	sp, #8
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	4603      	mov	r3, r0
 80015be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7ff ff31 	bl	800142c <__NVIC_EnableIRQ>
}
 80015ca:	bf00      	nop
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015d2:	b580      	push	{r7, lr}
 80015d4:	b082      	sub	sp, #8
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f7ff ffa2 	bl	8001524 <SysTick_Config>
 80015e0:	4603      	mov	r3, r0
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
	...

080015ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b089      	sub	sp, #36	; 0x24
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80015f6:	2300      	movs	r3, #0
 80015f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015fa:	2300      	movs	r3, #0
 80015fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80015fe:	2300      	movs	r3, #0
 8001600:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001602:	2300      	movs	r3, #0
 8001604:	61fb      	str	r3, [r7, #28]
 8001606:	e16b      	b.n	80018e0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001608:	2201      	movs	r2, #1
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	fa02 f303 	lsl.w	r3, r2, r3
 8001610:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	697a      	ldr	r2, [r7, #20]
 8001618:	4013      	ands	r3, r2
 800161a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800161c:	693a      	ldr	r2, [r7, #16]
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	429a      	cmp	r2, r3
 8001622:	f040 815a 	bne.w	80018da <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	f003 0303 	and.w	r3, r3, #3
 800162e:	2b01      	cmp	r3, #1
 8001630:	d005      	beq.n	800163e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800163a:	2b02      	cmp	r3, #2
 800163c:	d130      	bne.n	80016a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001644:	69fb      	ldr	r3, [r7, #28]
 8001646:	005b      	lsls	r3, r3, #1
 8001648:	2203      	movs	r2, #3
 800164a:	fa02 f303 	lsl.w	r3, r2, r3
 800164e:	43db      	mvns	r3, r3
 8001650:	69ba      	ldr	r2, [r7, #24]
 8001652:	4013      	ands	r3, r2
 8001654:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	68da      	ldr	r2, [r3, #12]
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	005b      	lsls	r3, r3, #1
 800165e:	fa02 f303 	lsl.w	r3, r2, r3
 8001662:	69ba      	ldr	r2, [r7, #24]
 8001664:	4313      	orrs	r3, r2
 8001666:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	69ba      	ldr	r2, [r7, #24]
 800166c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001674:	2201      	movs	r2, #1
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	fa02 f303 	lsl.w	r3, r2, r3
 800167c:	43db      	mvns	r3, r3
 800167e:	69ba      	ldr	r2, [r7, #24]
 8001680:	4013      	ands	r3, r2
 8001682:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	091b      	lsrs	r3, r3, #4
 800168a:	f003 0201 	and.w	r2, r3, #1
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	fa02 f303 	lsl.w	r3, r2, r3
 8001694:	69ba      	ldr	r2, [r7, #24]
 8001696:	4313      	orrs	r3, r2
 8001698:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	69ba      	ldr	r2, [r7, #24]
 800169e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f003 0303 	and.w	r3, r3, #3
 80016a8:	2b03      	cmp	r3, #3
 80016aa:	d017      	beq.n	80016dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	005b      	lsls	r3, r3, #1
 80016b6:	2203      	movs	r2, #3
 80016b8:	fa02 f303 	lsl.w	r3, r2, r3
 80016bc:	43db      	mvns	r3, r3
 80016be:	69ba      	ldr	r2, [r7, #24]
 80016c0:	4013      	ands	r3, r2
 80016c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	689a      	ldr	r2, [r3, #8]
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	005b      	lsls	r3, r3, #1
 80016cc:	fa02 f303 	lsl.w	r3, r2, r3
 80016d0:	69ba      	ldr	r2, [r7, #24]
 80016d2:	4313      	orrs	r3, r2
 80016d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	69ba      	ldr	r2, [r7, #24]
 80016da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f003 0303 	and.w	r3, r3, #3
 80016e4:	2b02      	cmp	r3, #2
 80016e6:	d123      	bne.n	8001730 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016e8:	69fb      	ldr	r3, [r7, #28]
 80016ea:	08da      	lsrs	r2, r3, #3
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	3208      	adds	r2, #8
 80016f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	f003 0307 	and.w	r3, r3, #7
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	220f      	movs	r2, #15
 8001700:	fa02 f303 	lsl.w	r3, r2, r3
 8001704:	43db      	mvns	r3, r3
 8001706:	69ba      	ldr	r2, [r7, #24]
 8001708:	4013      	ands	r3, r2
 800170a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	691a      	ldr	r2, [r3, #16]
 8001710:	69fb      	ldr	r3, [r7, #28]
 8001712:	f003 0307 	and.w	r3, r3, #7
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	fa02 f303 	lsl.w	r3, r2, r3
 800171c:	69ba      	ldr	r2, [r7, #24]
 800171e:	4313      	orrs	r3, r2
 8001720:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	08da      	lsrs	r2, r3, #3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	3208      	adds	r2, #8
 800172a:	69b9      	ldr	r1, [r7, #24]
 800172c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	005b      	lsls	r3, r3, #1
 800173a:	2203      	movs	r2, #3
 800173c:	fa02 f303 	lsl.w	r3, r2, r3
 8001740:	43db      	mvns	r3, r3
 8001742:	69ba      	ldr	r2, [r7, #24]
 8001744:	4013      	ands	r3, r2
 8001746:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f003 0203 	and.w	r2, r3, #3
 8001750:	69fb      	ldr	r3, [r7, #28]
 8001752:	005b      	lsls	r3, r3, #1
 8001754:	fa02 f303 	lsl.w	r3, r2, r3
 8001758:	69ba      	ldr	r2, [r7, #24]
 800175a:	4313      	orrs	r3, r2
 800175c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	69ba      	ldr	r2, [r7, #24]
 8001762:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800176c:	2b00      	cmp	r3, #0
 800176e:	f000 80b4 	beq.w	80018da <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001772:	2300      	movs	r3, #0
 8001774:	60fb      	str	r3, [r7, #12]
 8001776:	4b60      	ldr	r3, [pc, #384]	; (80018f8 <HAL_GPIO_Init+0x30c>)
 8001778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800177a:	4a5f      	ldr	r2, [pc, #380]	; (80018f8 <HAL_GPIO_Init+0x30c>)
 800177c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001780:	6453      	str	r3, [r2, #68]	; 0x44
 8001782:	4b5d      	ldr	r3, [pc, #372]	; (80018f8 <HAL_GPIO_Init+0x30c>)
 8001784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001786:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800178a:	60fb      	str	r3, [r7, #12]
 800178c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800178e:	4a5b      	ldr	r2, [pc, #364]	; (80018fc <HAL_GPIO_Init+0x310>)
 8001790:	69fb      	ldr	r3, [r7, #28]
 8001792:	089b      	lsrs	r3, r3, #2
 8001794:	3302      	adds	r3, #2
 8001796:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800179a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800179c:	69fb      	ldr	r3, [r7, #28]
 800179e:	f003 0303 	and.w	r3, r3, #3
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	220f      	movs	r2, #15
 80017a6:	fa02 f303 	lsl.w	r3, r2, r3
 80017aa:	43db      	mvns	r3, r3
 80017ac:	69ba      	ldr	r2, [r7, #24]
 80017ae:	4013      	ands	r3, r2
 80017b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4a52      	ldr	r2, [pc, #328]	; (8001900 <HAL_GPIO_Init+0x314>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d02b      	beq.n	8001812 <HAL_GPIO_Init+0x226>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4a51      	ldr	r2, [pc, #324]	; (8001904 <HAL_GPIO_Init+0x318>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d025      	beq.n	800180e <HAL_GPIO_Init+0x222>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4a50      	ldr	r2, [pc, #320]	; (8001908 <HAL_GPIO_Init+0x31c>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d01f      	beq.n	800180a <HAL_GPIO_Init+0x21e>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4a4f      	ldr	r2, [pc, #316]	; (800190c <HAL_GPIO_Init+0x320>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d019      	beq.n	8001806 <HAL_GPIO_Init+0x21a>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4a4e      	ldr	r2, [pc, #312]	; (8001910 <HAL_GPIO_Init+0x324>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d013      	beq.n	8001802 <HAL_GPIO_Init+0x216>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	4a4d      	ldr	r2, [pc, #308]	; (8001914 <HAL_GPIO_Init+0x328>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d00d      	beq.n	80017fe <HAL_GPIO_Init+0x212>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	4a4c      	ldr	r2, [pc, #304]	; (8001918 <HAL_GPIO_Init+0x32c>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d007      	beq.n	80017fa <HAL_GPIO_Init+0x20e>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4a4b      	ldr	r2, [pc, #300]	; (800191c <HAL_GPIO_Init+0x330>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d101      	bne.n	80017f6 <HAL_GPIO_Init+0x20a>
 80017f2:	2307      	movs	r3, #7
 80017f4:	e00e      	b.n	8001814 <HAL_GPIO_Init+0x228>
 80017f6:	2308      	movs	r3, #8
 80017f8:	e00c      	b.n	8001814 <HAL_GPIO_Init+0x228>
 80017fa:	2306      	movs	r3, #6
 80017fc:	e00a      	b.n	8001814 <HAL_GPIO_Init+0x228>
 80017fe:	2305      	movs	r3, #5
 8001800:	e008      	b.n	8001814 <HAL_GPIO_Init+0x228>
 8001802:	2304      	movs	r3, #4
 8001804:	e006      	b.n	8001814 <HAL_GPIO_Init+0x228>
 8001806:	2303      	movs	r3, #3
 8001808:	e004      	b.n	8001814 <HAL_GPIO_Init+0x228>
 800180a:	2302      	movs	r3, #2
 800180c:	e002      	b.n	8001814 <HAL_GPIO_Init+0x228>
 800180e:	2301      	movs	r3, #1
 8001810:	e000      	b.n	8001814 <HAL_GPIO_Init+0x228>
 8001812:	2300      	movs	r3, #0
 8001814:	69fa      	ldr	r2, [r7, #28]
 8001816:	f002 0203 	and.w	r2, r2, #3
 800181a:	0092      	lsls	r2, r2, #2
 800181c:	4093      	lsls	r3, r2
 800181e:	69ba      	ldr	r2, [r7, #24]
 8001820:	4313      	orrs	r3, r2
 8001822:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001824:	4935      	ldr	r1, [pc, #212]	; (80018fc <HAL_GPIO_Init+0x310>)
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	089b      	lsrs	r3, r3, #2
 800182a:	3302      	adds	r3, #2
 800182c:	69ba      	ldr	r2, [r7, #24]
 800182e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001832:	4b3b      	ldr	r3, [pc, #236]	; (8001920 <HAL_GPIO_Init+0x334>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	43db      	mvns	r3, r3
 800183c:	69ba      	ldr	r2, [r7, #24]
 800183e:	4013      	ands	r3, r2
 8001840:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d003      	beq.n	8001856 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800184e:	69ba      	ldr	r2, [r7, #24]
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	4313      	orrs	r3, r2
 8001854:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001856:	4a32      	ldr	r2, [pc, #200]	; (8001920 <HAL_GPIO_Init+0x334>)
 8001858:	69bb      	ldr	r3, [r7, #24]
 800185a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800185c:	4b30      	ldr	r3, [pc, #192]	; (8001920 <HAL_GPIO_Init+0x334>)
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	43db      	mvns	r3, r3
 8001866:	69ba      	ldr	r2, [r7, #24]
 8001868:	4013      	ands	r3, r2
 800186a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001874:	2b00      	cmp	r3, #0
 8001876:	d003      	beq.n	8001880 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001878:	69ba      	ldr	r2, [r7, #24]
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	4313      	orrs	r3, r2
 800187e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001880:	4a27      	ldr	r2, [pc, #156]	; (8001920 <HAL_GPIO_Init+0x334>)
 8001882:	69bb      	ldr	r3, [r7, #24]
 8001884:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001886:	4b26      	ldr	r3, [pc, #152]	; (8001920 <HAL_GPIO_Init+0x334>)
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	43db      	mvns	r3, r3
 8001890:	69ba      	ldr	r2, [r7, #24]
 8001892:	4013      	ands	r3, r2
 8001894:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d003      	beq.n	80018aa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80018a2:	69ba      	ldr	r2, [r7, #24]
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	4313      	orrs	r3, r2
 80018a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018aa:	4a1d      	ldr	r2, [pc, #116]	; (8001920 <HAL_GPIO_Init+0x334>)
 80018ac:	69bb      	ldr	r3, [r7, #24]
 80018ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018b0:	4b1b      	ldr	r3, [pc, #108]	; (8001920 <HAL_GPIO_Init+0x334>)
 80018b2:	68db      	ldr	r3, [r3, #12]
 80018b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	43db      	mvns	r3, r3
 80018ba:	69ba      	ldr	r2, [r7, #24]
 80018bc:	4013      	ands	r3, r2
 80018be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d003      	beq.n	80018d4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80018cc:	69ba      	ldr	r2, [r7, #24]
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	4313      	orrs	r3, r2
 80018d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018d4:	4a12      	ldr	r2, [pc, #72]	; (8001920 <HAL_GPIO_Init+0x334>)
 80018d6:	69bb      	ldr	r3, [r7, #24]
 80018d8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	3301      	adds	r3, #1
 80018de:	61fb      	str	r3, [r7, #28]
 80018e0:	69fb      	ldr	r3, [r7, #28]
 80018e2:	2b0f      	cmp	r3, #15
 80018e4:	f67f ae90 	bls.w	8001608 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80018e8:	bf00      	nop
 80018ea:	bf00      	nop
 80018ec:	3724      	adds	r7, #36	; 0x24
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	40023800 	.word	0x40023800
 80018fc:	40013800 	.word	0x40013800
 8001900:	40020000 	.word	0x40020000
 8001904:	40020400 	.word	0x40020400
 8001908:	40020800 	.word	0x40020800
 800190c:	40020c00 	.word	0x40020c00
 8001910:	40021000 	.word	0x40021000
 8001914:	40021400 	.word	0x40021400
 8001918:	40021800 	.word	0x40021800
 800191c:	40021c00 	.word	0x40021c00
 8001920:	40013c00 	.word	0x40013c00

08001924 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	460b      	mov	r3, r1
 800192e:	807b      	strh	r3, [r7, #2]
 8001930:	4613      	mov	r3, r2
 8001932:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001934:	787b      	ldrb	r3, [r7, #1]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d003      	beq.n	8001942 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800193a:	887a      	ldrh	r2, [r7, #2]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001940:	e003      	b.n	800194a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001942:	887b      	ldrh	r3, [r7, #2]
 8001944:	041a      	lsls	r2, r3, #16
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	619a      	str	r2, [r3, #24]
}
 800194a:	bf00      	nop
 800194c:	370c      	adds	r7, #12
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr

08001956 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001956:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001958:	b08f      	sub	sp, #60	; 0x3c
 800195a:	af0a      	add	r7, sp, #40	; 0x28
 800195c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d101      	bne.n	8001968 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e054      	b.n	8001a12 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001974:	b2db      	uxtb	r3, r3
 8001976:	2b00      	cmp	r3, #0
 8001978:	d106      	bne.n	8001988 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2200      	movs	r2, #0
 800197e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f006 f86e 	bl	8007a64 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2203      	movs	r2, #3
 800198c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001994:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001998:	2b00      	cmp	r3, #0
 800199a:	d102      	bne.n	80019a2 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2200      	movs	r2, #0
 80019a0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4618      	mov	r0, r3
 80019a8:	f003 f9c5 	bl	8004d36 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	603b      	str	r3, [r7, #0]
 80019b2:	687e      	ldr	r6, [r7, #4]
 80019b4:	466d      	mov	r5, sp
 80019b6:	f106 0410 	add.w	r4, r6, #16
 80019ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019c2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80019c6:	e885 0003 	stmia.w	r5, {r0, r1}
 80019ca:	1d33      	adds	r3, r6, #4
 80019cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019ce:	6838      	ldr	r0, [r7, #0]
 80019d0:	f003 f93f 	bl	8004c52 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	2101      	movs	r1, #1
 80019da:	4618      	mov	r0, r3
 80019dc:	f003 f9bc 	bl	8004d58 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	603b      	str	r3, [r7, #0]
 80019e6:	687e      	ldr	r6, [r7, #4]
 80019e8:	466d      	mov	r5, sp
 80019ea:	f106 0410 	add.w	r4, r6, #16
 80019ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019f6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80019fa:	e885 0003 	stmia.w	r5, {r0, r1}
 80019fe:	1d33      	adds	r3, r6, #4
 8001a00:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a02:	6838      	ldr	r0, [r7, #0]
 8001a04:	f003 fb22 	bl	800504c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001a10:	2300      	movs	r3, #0
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3714      	adds	r7, #20
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001a1a <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001a1a:	b590      	push	{r4, r7, lr}
 8001a1c:	b089      	sub	sp, #36	; 0x24
 8001a1e:	af04      	add	r7, sp, #16
 8001a20:	6078      	str	r0, [r7, #4]
 8001a22:	4608      	mov	r0, r1
 8001a24:	4611      	mov	r1, r2
 8001a26:	461a      	mov	r2, r3
 8001a28:	4603      	mov	r3, r0
 8001a2a:	70fb      	strb	r3, [r7, #3]
 8001a2c:	460b      	mov	r3, r1
 8001a2e:	70bb      	strb	r3, [r7, #2]
 8001a30:	4613      	mov	r3, r2
 8001a32:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d101      	bne.n	8001a42 <HAL_HCD_HC_Init+0x28>
 8001a3e:	2302      	movs	r3, #2
 8001a40:	e076      	b.n	8001b30 <HAL_HCD_HC_Init+0x116>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2201      	movs	r2, #1
 8001a46:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001a4a:	78fb      	ldrb	r3, [r7, #3]
 8001a4c:	687a      	ldr	r2, [r7, #4]
 8001a4e:	212c      	movs	r1, #44	; 0x2c
 8001a50:	fb01 f303 	mul.w	r3, r1, r3
 8001a54:	4413      	add	r3, r2
 8001a56:	333d      	adds	r3, #61	; 0x3d
 8001a58:	2200      	movs	r2, #0
 8001a5a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001a5c:	78fb      	ldrb	r3, [r7, #3]
 8001a5e:	687a      	ldr	r2, [r7, #4]
 8001a60:	212c      	movs	r1, #44	; 0x2c
 8001a62:	fb01 f303 	mul.w	r3, r1, r3
 8001a66:	4413      	add	r3, r2
 8001a68:	3338      	adds	r3, #56	; 0x38
 8001a6a:	787a      	ldrb	r2, [r7, #1]
 8001a6c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001a6e:	78fb      	ldrb	r3, [r7, #3]
 8001a70:	687a      	ldr	r2, [r7, #4]
 8001a72:	212c      	movs	r1, #44	; 0x2c
 8001a74:	fb01 f303 	mul.w	r3, r1, r3
 8001a78:	4413      	add	r3, r2
 8001a7a:	3340      	adds	r3, #64	; 0x40
 8001a7c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001a7e:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001a80:	78fb      	ldrb	r3, [r7, #3]
 8001a82:	687a      	ldr	r2, [r7, #4]
 8001a84:	212c      	movs	r1, #44	; 0x2c
 8001a86:	fb01 f303 	mul.w	r3, r1, r3
 8001a8a:	4413      	add	r3, r2
 8001a8c:	3339      	adds	r3, #57	; 0x39
 8001a8e:	78fa      	ldrb	r2, [r7, #3]
 8001a90:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001a92:	78fb      	ldrb	r3, [r7, #3]
 8001a94:	687a      	ldr	r2, [r7, #4]
 8001a96:	212c      	movs	r1, #44	; 0x2c
 8001a98:	fb01 f303 	mul.w	r3, r1, r3
 8001a9c:	4413      	add	r3, r2
 8001a9e:	333f      	adds	r3, #63	; 0x3f
 8001aa0:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001aa4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001aa6:	78fb      	ldrb	r3, [r7, #3]
 8001aa8:	78ba      	ldrb	r2, [r7, #2]
 8001aaa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001aae:	b2d0      	uxtb	r0, r2
 8001ab0:	687a      	ldr	r2, [r7, #4]
 8001ab2:	212c      	movs	r1, #44	; 0x2c
 8001ab4:	fb01 f303 	mul.w	r3, r1, r3
 8001ab8:	4413      	add	r3, r2
 8001aba:	333a      	adds	r3, #58	; 0x3a
 8001abc:	4602      	mov	r2, r0
 8001abe:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001ac0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	da09      	bge.n	8001adc <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001ac8:	78fb      	ldrb	r3, [r7, #3]
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	212c      	movs	r1, #44	; 0x2c
 8001ace:	fb01 f303 	mul.w	r3, r1, r3
 8001ad2:	4413      	add	r3, r2
 8001ad4:	333b      	adds	r3, #59	; 0x3b
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	701a      	strb	r2, [r3, #0]
 8001ada:	e008      	b.n	8001aee <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001adc:	78fb      	ldrb	r3, [r7, #3]
 8001ade:	687a      	ldr	r2, [r7, #4]
 8001ae0:	212c      	movs	r1, #44	; 0x2c
 8001ae2:	fb01 f303 	mul.w	r3, r1, r3
 8001ae6:	4413      	add	r3, r2
 8001ae8:	333b      	adds	r3, #59	; 0x3b
 8001aea:	2200      	movs	r2, #0
 8001aec:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001aee:	78fb      	ldrb	r3, [r7, #3]
 8001af0:	687a      	ldr	r2, [r7, #4]
 8001af2:	212c      	movs	r1, #44	; 0x2c
 8001af4:	fb01 f303 	mul.w	r3, r1, r3
 8001af8:	4413      	add	r3, r2
 8001afa:	333c      	adds	r3, #60	; 0x3c
 8001afc:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001b00:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6818      	ldr	r0, [r3, #0]
 8001b06:	787c      	ldrb	r4, [r7, #1]
 8001b08:	78ba      	ldrb	r2, [r7, #2]
 8001b0a:	78f9      	ldrb	r1, [r7, #3]
 8001b0c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001b0e:	9302      	str	r3, [sp, #8]
 8001b10:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001b14:	9301      	str	r3, [sp, #4]
 8001b16:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001b1a:	9300      	str	r3, [sp, #0]
 8001b1c:	4623      	mov	r3, r4
 8001b1e:	f003 fc0f 	bl	8005340 <USB_HC_Init>
 8001b22:	4603      	mov	r3, r0
 8001b24:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001b2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3714      	adds	r7, #20
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd90      	pop	{r4, r7, pc}

08001b38 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b084      	sub	sp, #16
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	460b      	mov	r3, r1
 8001b42:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001b44:	2300      	movs	r3, #0
 8001b46:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d101      	bne.n	8001b56 <HAL_HCD_HC_Halt+0x1e>
 8001b52:	2302      	movs	r3, #2
 8001b54:	e00f      	b.n	8001b76 <HAL_HCD_HC_Halt+0x3e>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2201      	movs	r2, #1
 8001b5a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	78fa      	ldrb	r2, [r7, #3]
 8001b64:	4611      	mov	r1, r2
 8001b66:	4618      	mov	r0, r3
 8001b68:	f003 fe4b 	bl	8005802 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001b74:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3710      	adds	r7, #16
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
	...

08001b80 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	4608      	mov	r0, r1
 8001b8a:	4611      	mov	r1, r2
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	4603      	mov	r3, r0
 8001b90:	70fb      	strb	r3, [r7, #3]
 8001b92:	460b      	mov	r3, r1
 8001b94:	70bb      	strb	r3, [r7, #2]
 8001b96:	4613      	mov	r3, r2
 8001b98:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001b9a:	78fb      	ldrb	r3, [r7, #3]
 8001b9c:	687a      	ldr	r2, [r7, #4]
 8001b9e:	212c      	movs	r1, #44	; 0x2c
 8001ba0:	fb01 f303 	mul.w	r3, r1, r3
 8001ba4:	4413      	add	r3, r2
 8001ba6:	333b      	adds	r3, #59	; 0x3b
 8001ba8:	78ba      	ldrb	r2, [r7, #2]
 8001baa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001bac:	78fb      	ldrb	r3, [r7, #3]
 8001bae:	687a      	ldr	r2, [r7, #4]
 8001bb0:	212c      	movs	r1, #44	; 0x2c
 8001bb2:	fb01 f303 	mul.w	r3, r1, r3
 8001bb6:	4413      	add	r3, r2
 8001bb8:	333f      	adds	r3, #63	; 0x3f
 8001bba:	787a      	ldrb	r2, [r7, #1]
 8001bbc:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001bbe:	7c3b      	ldrb	r3, [r7, #16]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d112      	bne.n	8001bea <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001bc4:	78fb      	ldrb	r3, [r7, #3]
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	212c      	movs	r1, #44	; 0x2c
 8001bca:	fb01 f303 	mul.w	r3, r1, r3
 8001bce:	4413      	add	r3, r2
 8001bd0:	3342      	adds	r3, #66	; 0x42
 8001bd2:	2203      	movs	r2, #3
 8001bd4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001bd6:	78fb      	ldrb	r3, [r7, #3]
 8001bd8:	687a      	ldr	r2, [r7, #4]
 8001bda:	212c      	movs	r1, #44	; 0x2c
 8001bdc:	fb01 f303 	mul.w	r3, r1, r3
 8001be0:	4413      	add	r3, r2
 8001be2:	333d      	adds	r3, #61	; 0x3d
 8001be4:	7f3a      	ldrb	r2, [r7, #28]
 8001be6:	701a      	strb	r2, [r3, #0]
 8001be8:	e008      	b.n	8001bfc <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001bea:	78fb      	ldrb	r3, [r7, #3]
 8001bec:	687a      	ldr	r2, [r7, #4]
 8001bee:	212c      	movs	r1, #44	; 0x2c
 8001bf0:	fb01 f303 	mul.w	r3, r1, r3
 8001bf4:	4413      	add	r3, r2
 8001bf6:	3342      	adds	r3, #66	; 0x42
 8001bf8:	2202      	movs	r2, #2
 8001bfa:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001bfc:	787b      	ldrb	r3, [r7, #1]
 8001bfe:	2b03      	cmp	r3, #3
 8001c00:	f200 80c6 	bhi.w	8001d90 <HAL_HCD_HC_SubmitRequest+0x210>
 8001c04:	a201      	add	r2, pc, #4	; (adr r2, 8001c0c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001c06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c0a:	bf00      	nop
 8001c0c:	08001c1d 	.word	0x08001c1d
 8001c10:	08001d7d 	.word	0x08001d7d
 8001c14:	08001c81 	.word	0x08001c81
 8001c18:	08001cff 	.word	0x08001cff
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001c1c:	7c3b      	ldrb	r3, [r7, #16]
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	f040 80b8 	bne.w	8001d94 <HAL_HCD_HC_SubmitRequest+0x214>
 8001c24:	78bb      	ldrb	r3, [r7, #2]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	f040 80b4 	bne.w	8001d94 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001c2c:	8b3b      	ldrh	r3, [r7, #24]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d108      	bne.n	8001c44 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001c32:	78fb      	ldrb	r3, [r7, #3]
 8001c34:	687a      	ldr	r2, [r7, #4]
 8001c36:	212c      	movs	r1, #44	; 0x2c
 8001c38:	fb01 f303 	mul.w	r3, r1, r3
 8001c3c:	4413      	add	r3, r2
 8001c3e:	3355      	adds	r3, #85	; 0x55
 8001c40:	2201      	movs	r2, #1
 8001c42:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001c44:	78fb      	ldrb	r3, [r7, #3]
 8001c46:	687a      	ldr	r2, [r7, #4]
 8001c48:	212c      	movs	r1, #44	; 0x2c
 8001c4a:	fb01 f303 	mul.w	r3, r1, r3
 8001c4e:	4413      	add	r3, r2
 8001c50:	3355      	adds	r3, #85	; 0x55
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d109      	bne.n	8001c6c <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c58:	78fb      	ldrb	r3, [r7, #3]
 8001c5a:	687a      	ldr	r2, [r7, #4]
 8001c5c:	212c      	movs	r1, #44	; 0x2c
 8001c5e:	fb01 f303 	mul.w	r3, r1, r3
 8001c62:	4413      	add	r3, r2
 8001c64:	3342      	adds	r3, #66	; 0x42
 8001c66:	2200      	movs	r2, #0
 8001c68:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001c6a:	e093      	b.n	8001d94 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c6c:	78fb      	ldrb	r3, [r7, #3]
 8001c6e:	687a      	ldr	r2, [r7, #4]
 8001c70:	212c      	movs	r1, #44	; 0x2c
 8001c72:	fb01 f303 	mul.w	r3, r1, r3
 8001c76:	4413      	add	r3, r2
 8001c78:	3342      	adds	r3, #66	; 0x42
 8001c7a:	2202      	movs	r2, #2
 8001c7c:	701a      	strb	r2, [r3, #0]
      break;
 8001c7e:	e089      	b.n	8001d94 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001c80:	78bb      	ldrb	r3, [r7, #2]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d11d      	bne.n	8001cc2 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001c86:	78fb      	ldrb	r3, [r7, #3]
 8001c88:	687a      	ldr	r2, [r7, #4]
 8001c8a:	212c      	movs	r1, #44	; 0x2c
 8001c8c:	fb01 f303 	mul.w	r3, r1, r3
 8001c90:	4413      	add	r3, r2
 8001c92:	3355      	adds	r3, #85	; 0x55
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d109      	bne.n	8001cae <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c9a:	78fb      	ldrb	r3, [r7, #3]
 8001c9c:	687a      	ldr	r2, [r7, #4]
 8001c9e:	212c      	movs	r1, #44	; 0x2c
 8001ca0:	fb01 f303 	mul.w	r3, r1, r3
 8001ca4:	4413      	add	r3, r2
 8001ca6:	3342      	adds	r3, #66	; 0x42
 8001ca8:	2200      	movs	r2, #0
 8001caa:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001cac:	e073      	b.n	8001d96 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001cae:	78fb      	ldrb	r3, [r7, #3]
 8001cb0:	687a      	ldr	r2, [r7, #4]
 8001cb2:	212c      	movs	r1, #44	; 0x2c
 8001cb4:	fb01 f303 	mul.w	r3, r1, r3
 8001cb8:	4413      	add	r3, r2
 8001cba:	3342      	adds	r3, #66	; 0x42
 8001cbc:	2202      	movs	r2, #2
 8001cbe:	701a      	strb	r2, [r3, #0]
      break;
 8001cc0:	e069      	b.n	8001d96 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001cc2:	78fb      	ldrb	r3, [r7, #3]
 8001cc4:	687a      	ldr	r2, [r7, #4]
 8001cc6:	212c      	movs	r1, #44	; 0x2c
 8001cc8:	fb01 f303 	mul.w	r3, r1, r3
 8001ccc:	4413      	add	r3, r2
 8001cce:	3354      	adds	r3, #84	; 0x54
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d109      	bne.n	8001cea <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001cd6:	78fb      	ldrb	r3, [r7, #3]
 8001cd8:	687a      	ldr	r2, [r7, #4]
 8001cda:	212c      	movs	r1, #44	; 0x2c
 8001cdc:	fb01 f303 	mul.w	r3, r1, r3
 8001ce0:	4413      	add	r3, r2
 8001ce2:	3342      	adds	r3, #66	; 0x42
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	701a      	strb	r2, [r3, #0]
      break;
 8001ce8:	e055      	b.n	8001d96 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001cea:	78fb      	ldrb	r3, [r7, #3]
 8001cec:	687a      	ldr	r2, [r7, #4]
 8001cee:	212c      	movs	r1, #44	; 0x2c
 8001cf0:	fb01 f303 	mul.w	r3, r1, r3
 8001cf4:	4413      	add	r3, r2
 8001cf6:	3342      	adds	r3, #66	; 0x42
 8001cf8:	2202      	movs	r2, #2
 8001cfa:	701a      	strb	r2, [r3, #0]
      break;
 8001cfc:	e04b      	b.n	8001d96 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001cfe:	78bb      	ldrb	r3, [r7, #2]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d11d      	bne.n	8001d40 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001d04:	78fb      	ldrb	r3, [r7, #3]
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	212c      	movs	r1, #44	; 0x2c
 8001d0a:	fb01 f303 	mul.w	r3, r1, r3
 8001d0e:	4413      	add	r3, r2
 8001d10:	3355      	adds	r3, #85	; 0x55
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d109      	bne.n	8001d2c <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001d18:	78fb      	ldrb	r3, [r7, #3]
 8001d1a:	687a      	ldr	r2, [r7, #4]
 8001d1c:	212c      	movs	r1, #44	; 0x2c
 8001d1e:	fb01 f303 	mul.w	r3, r1, r3
 8001d22:	4413      	add	r3, r2
 8001d24:	3342      	adds	r3, #66	; 0x42
 8001d26:	2200      	movs	r2, #0
 8001d28:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001d2a:	e034      	b.n	8001d96 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001d2c:	78fb      	ldrb	r3, [r7, #3]
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	212c      	movs	r1, #44	; 0x2c
 8001d32:	fb01 f303 	mul.w	r3, r1, r3
 8001d36:	4413      	add	r3, r2
 8001d38:	3342      	adds	r3, #66	; 0x42
 8001d3a:	2202      	movs	r2, #2
 8001d3c:	701a      	strb	r2, [r3, #0]
      break;
 8001d3e:	e02a      	b.n	8001d96 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001d40:	78fb      	ldrb	r3, [r7, #3]
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	212c      	movs	r1, #44	; 0x2c
 8001d46:	fb01 f303 	mul.w	r3, r1, r3
 8001d4a:	4413      	add	r3, r2
 8001d4c:	3354      	adds	r3, #84	; 0x54
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d109      	bne.n	8001d68 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001d54:	78fb      	ldrb	r3, [r7, #3]
 8001d56:	687a      	ldr	r2, [r7, #4]
 8001d58:	212c      	movs	r1, #44	; 0x2c
 8001d5a:	fb01 f303 	mul.w	r3, r1, r3
 8001d5e:	4413      	add	r3, r2
 8001d60:	3342      	adds	r3, #66	; 0x42
 8001d62:	2200      	movs	r2, #0
 8001d64:	701a      	strb	r2, [r3, #0]
      break;
 8001d66:	e016      	b.n	8001d96 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001d68:	78fb      	ldrb	r3, [r7, #3]
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	212c      	movs	r1, #44	; 0x2c
 8001d6e:	fb01 f303 	mul.w	r3, r1, r3
 8001d72:	4413      	add	r3, r2
 8001d74:	3342      	adds	r3, #66	; 0x42
 8001d76:	2202      	movs	r2, #2
 8001d78:	701a      	strb	r2, [r3, #0]
      break;
 8001d7a:	e00c      	b.n	8001d96 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001d7c:	78fb      	ldrb	r3, [r7, #3]
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	212c      	movs	r1, #44	; 0x2c
 8001d82:	fb01 f303 	mul.w	r3, r1, r3
 8001d86:	4413      	add	r3, r2
 8001d88:	3342      	adds	r3, #66	; 0x42
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	701a      	strb	r2, [r3, #0]
      break;
 8001d8e:	e002      	b.n	8001d96 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001d90:	bf00      	nop
 8001d92:	e000      	b.n	8001d96 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001d94:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001d96:	78fb      	ldrb	r3, [r7, #3]
 8001d98:	687a      	ldr	r2, [r7, #4]
 8001d9a:	212c      	movs	r1, #44	; 0x2c
 8001d9c:	fb01 f303 	mul.w	r3, r1, r3
 8001da0:	4413      	add	r3, r2
 8001da2:	3344      	adds	r3, #68	; 0x44
 8001da4:	697a      	ldr	r2, [r7, #20]
 8001da6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001da8:	78fb      	ldrb	r3, [r7, #3]
 8001daa:	8b3a      	ldrh	r2, [r7, #24]
 8001dac:	6879      	ldr	r1, [r7, #4]
 8001dae:	202c      	movs	r0, #44	; 0x2c
 8001db0:	fb00 f303 	mul.w	r3, r0, r3
 8001db4:	440b      	add	r3, r1
 8001db6:	334c      	adds	r3, #76	; 0x4c
 8001db8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001dba:	78fb      	ldrb	r3, [r7, #3]
 8001dbc:	687a      	ldr	r2, [r7, #4]
 8001dbe:	212c      	movs	r1, #44	; 0x2c
 8001dc0:	fb01 f303 	mul.w	r3, r1, r3
 8001dc4:	4413      	add	r3, r2
 8001dc6:	3360      	adds	r3, #96	; 0x60
 8001dc8:	2200      	movs	r2, #0
 8001dca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001dcc:	78fb      	ldrb	r3, [r7, #3]
 8001dce:	687a      	ldr	r2, [r7, #4]
 8001dd0:	212c      	movs	r1, #44	; 0x2c
 8001dd2:	fb01 f303 	mul.w	r3, r1, r3
 8001dd6:	4413      	add	r3, r2
 8001dd8:	3350      	adds	r3, #80	; 0x50
 8001dda:	2200      	movs	r2, #0
 8001ddc:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001dde:	78fb      	ldrb	r3, [r7, #3]
 8001de0:	687a      	ldr	r2, [r7, #4]
 8001de2:	212c      	movs	r1, #44	; 0x2c
 8001de4:	fb01 f303 	mul.w	r3, r1, r3
 8001de8:	4413      	add	r3, r2
 8001dea:	3339      	adds	r3, #57	; 0x39
 8001dec:	78fa      	ldrb	r2, [r7, #3]
 8001dee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001df0:	78fb      	ldrb	r3, [r7, #3]
 8001df2:	687a      	ldr	r2, [r7, #4]
 8001df4:	212c      	movs	r1, #44	; 0x2c
 8001df6:	fb01 f303 	mul.w	r3, r1, r3
 8001dfa:	4413      	add	r3, r2
 8001dfc:	3361      	adds	r3, #97	; 0x61
 8001dfe:	2200      	movs	r2, #0
 8001e00:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6818      	ldr	r0, [r3, #0]
 8001e06:	78fb      	ldrb	r3, [r7, #3]
 8001e08:	222c      	movs	r2, #44	; 0x2c
 8001e0a:	fb02 f303 	mul.w	r3, r2, r3
 8001e0e:	3338      	adds	r3, #56	; 0x38
 8001e10:	687a      	ldr	r2, [r7, #4]
 8001e12:	18d1      	adds	r1, r2, r3
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	691b      	ldr	r3, [r3, #16]
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	f003 fb9e 	bl	800555c <USB_HC_StartXfer>
 8001e20:	4603      	mov	r3, r0
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3708      	adds	r7, #8
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop

08001e2c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b086      	sub	sp, #24
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4618      	mov	r0, r3
 8001e44:	f003 f8c1 	bl	8004fca <USB_GetMode>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	f040 80f6 	bne.w	800203c <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4618      	mov	r0, r3
 8001e56:	f003 f8a5 	bl	8004fa4 <USB_ReadInterrupts>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	f000 80ec 	beq.w	800203a <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4618      	mov	r0, r3
 8001e68:	f003 f89c 	bl	8004fa4 <USB_ReadInterrupts>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e72:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001e76:	d104      	bne.n	8001e82 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001e80:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4618      	mov	r0, r3
 8001e88:	f003 f88c 	bl	8004fa4 <USB_ReadInterrupts>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001e96:	d104      	bne.n	8001ea2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001ea0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f003 f87c 	bl	8004fa4 <USB_ReadInterrupts>
 8001eac:	4603      	mov	r3, r0
 8001eae:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001eb2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001eb6:	d104      	bne.n	8001ec2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001ec0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f003 f86c 	bl	8004fa4 <USB_ReadInterrupts>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	f003 0302 	and.w	r3, r3, #2
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	d103      	bne.n	8001ede <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	2202      	movs	r2, #2
 8001edc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f003 f85e 	bl	8004fa4 <USB_ReadInterrupts>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001eee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ef2:	d11c      	bne.n	8001f2e <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001efc:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 0301 	and.w	r3, r3, #1
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d10f      	bne.n	8001f2e <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001f0e:	2110      	movs	r1, #16
 8001f10:	6938      	ldr	r0, [r7, #16]
 8001f12:	f002 ff6d 	bl	8004df0 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001f16:	6938      	ldr	r0, [r7, #16]
 8001f18:	f002 ff8e 	bl	8004e38 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	2101      	movs	r1, #1
 8001f22:	4618      	mov	r0, r3
 8001f24:	f003 f946 	bl	80051b4 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	f005 fe19 	bl	8007b60 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4618      	mov	r0, r3
 8001f34:	f003 f836 	bl	8004fa4 <USB_ReadInterrupts>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f3e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f42:	d102      	bne.n	8001f4a <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f001 fa03 	bl	8003350 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f003 f828 	bl	8004fa4 <USB_ReadInterrupts>
 8001f54:	4603      	mov	r3, r0
 8001f56:	f003 0308 	and.w	r3, r3, #8
 8001f5a:	2b08      	cmp	r3, #8
 8001f5c:	d106      	bne.n	8001f6c <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f005 fde2 	bl	8007b28 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	2208      	movs	r2, #8
 8001f6a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4618      	mov	r0, r3
 8001f72:	f003 f817 	bl	8004fa4 <USB_ReadInterrupts>
 8001f76:	4603      	mov	r3, r0
 8001f78:	f003 0310 	and.w	r3, r3, #16
 8001f7c:	2b10      	cmp	r3, #16
 8001f7e:	d101      	bne.n	8001f84 <HAL_HCD_IRQHandler+0x158>
 8001f80:	2301      	movs	r3, #1
 8001f82:	e000      	b.n	8001f86 <HAL_HCD_IRQHandler+0x15a>
 8001f84:	2300      	movs	r3, #0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d012      	beq.n	8001fb0 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	699a      	ldr	r2, [r3, #24]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f022 0210 	bic.w	r2, r2, #16
 8001f98:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f001 f906 	bl	80031ac <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	699a      	ldr	r2, [r3, #24]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f042 0210 	orr.w	r2, r2, #16
 8001fae:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f002 fff5 	bl	8004fa4 <USB_ReadInterrupts>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fc0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001fc4:	d13a      	bne.n	800203c <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f003 fc08 	bl	80057e0 <USB_HC_ReadInterrupt>
 8001fd0:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	617b      	str	r3, [r7, #20]
 8001fd6:	e025      	b.n	8002024 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	f003 030f 	and.w	r3, r3, #15
 8001fde:	68ba      	ldr	r2, [r7, #8]
 8001fe0:	fa22 f303 	lsr.w	r3, r2, r3
 8001fe4:	f003 0301 	and.w	r3, r3, #1
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d018      	beq.n	800201e <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	015a      	lsls	r2, r3, #5
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	4413      	add	r3, r2
 8001ff4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ffe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002002:	d106      	bne.n	8002012 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	b2db      	uxtb	r3, r3
 8002008:	4619      	mov	r1, r3
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f000 f8ab 	bl	8002166 <HCD_HC_IN_IRQHandler>
 8002010:	e005      	b.n	800201e <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	b2db      	uxtb	r3, r3
 8002016:	4619      	mov	r1, r3
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f000 fcc6 	bl	80029aa <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	3301      	adds	r3, #1
 8002022:	617b      	str	r3, [r7, #20]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	697a      	ldr	r2, [r7, #20]
 800202a:	429a      	cmp	r2, r3
 800202c:	d3d4      	bcc.n	8001fd8 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002036:	615a      	str	r2, [r3, #20]
 8002038:	e000      	b.n	800203c <HAL_HCD_IRQHandler+0x210>
      return;
 800203a:	bf00      	nop
    }
  }
}
 800203c:	3718      	adds	r7, #24
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}

08002042 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002042:	b580      	push	{r7, lr}
 8002044:	b082      	sub	sp, #8
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002050:	2b01      	cmp	r3, #1
 8002052:	d101      	bne.n	8002058 <HAL_HCD_Start+0x16>
 8002054:	2302      	movs	r3, #2
 8002056:	e013      	b.n	8002080 <HAL_HCD_Start+0x3e>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2201      	movs	r2, #1
 800205c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	2101      	movs	r1, #1
 8002066:	4618      	mov	r0, r3
 8002068:	f003 f908 	bl	800527c <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4618      	mov	r0, r3
 8002072:	f002 fe4f 	bl	8004d14 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2200      	movs	r2, #0
 800207a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800207e:	2300      	movs	r3, #0
}
 8002080:	4618      	mov	r0, r3
 8002082:	3708      	adds	r7, #8
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}

08002088 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002096:	2b01      	cmp	r3, #1
 8002098:	d101      	bne.n	800209e <HAL_HCD_Stop+0x16>
 800209a:	2302      	movs	r3, #2
 800209c:	e00d      	b.n	80020ba <HAL_HCD_Stop+0x32>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2201      	movs	r2, #1
 80020a2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4618      	mov	r0, r3
 80020ac:	f003 fd02 	bl	8005ab4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2200      	movs	r2, #0
 80020b4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80020b8:	2300      	movs	r3, #0
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3708      	adds	r7, #8
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}

080020c2 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80020c2:	b580      	push	{r7, lr}
 80020c4:	b082      	sub	sp, #8
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4618      	mov	r0, r3
 80020d0:	f003 f8aa 	bl	8005228 <USB_ResetPort>
 80020d4:	4603      	mov	r3, r0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3708      	adds	r7, #8
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}

080020de <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80020de:	b480      	push	{r7}
 80020e0:	b083      	sub	sp, #12
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	6078      	str	r0, [r7, #4]
 80020e6:	460b      	mov	r3, r1
 80020e8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80020ea:	78fb      	ldrb	r3, [r7, #3]
 80020ec:	687a      	ldr	r2, [r7, #4]
 80020ee:	212c      	movs	r1, #44	; 0x2c
 80020f0:	fb01 f303 	mul.w	r3, r1, r3
 80020f4:	4413      	add	r3, r2
 80020f6:	3360      	adds	r3, #96	; 0x60
 80020f8:	781b      	ldrb	r3, [r3, #0]
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	370c      	adds	r7, #12
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr

08002106 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002106:	b480      	push	{r7}
 8002108:	b083      	sub	sp, #12
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
 800210e:	460b      	mov	r3, r1
 8002110:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002112:	78fb      	ldrb	r3, [r7, #3]
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	212c      	movs	r1, #44	; 0x2c
 8002118:	fb01 f303 	mul.w	r3, r1, r3
 800211c:	4413      	add	r3, r2
 800211e:	3350      	adds	r3, #80	; 0x50
 8002120:	681b      	ldr	r3, [r3, #0]
}
 8002122:	4618      	mov	r0, r3
 8002124:	370c      	adds	r7, #12
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr

0800212e <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800212e:	b580      	push	{r7, lr}
 8002130:	b082      	sub	sp, #8
 8002132:	af00      	add	r7, sp, #0
 8002134:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4618      	mov	r0, r3
 800213c:	f003 f8ee 	bl	800531c <USB_GetCurrentFrame>
 8002140:	4603      	mov	r3, r0
}
 8002142:	4618      	mov	r0, r3
 8002144:	3708      	adds	r7, #8
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}

0800214a <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800214a:	b580      	push	{r7, lr}
 800214c:	b082      	sub	sp, #8
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4618      	mov	r0, r3
 8002158:	f003 f8c9 	bl	80052ee <USB_GetHostSpeed>
 800215c:	4603      	mov	r3, r0
}
 800215e:	4618      	mov	r0, r3
 8002160:	3708      	adds	r7, #8
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}

08002166 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002166:	b580      	push	{r7, lr}
 8002168:	b086      	sub	sp, #24
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
 800216e:	460b      	mov	r3, r1
 8002170:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800217c:	78fb      	ldrb	r3, [r7, #3]
 800217e:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	015a      	lsls	r2, r3, #5
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	4413      	add	r3, r2
 8002188:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	f003 0304 	and.w	r3, r3, #4
 8002192:	2b04      	cmp	r3, #4
 8002194:	d119      	bne.n	80021ca <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	015a      	lsls	r2, r3, #5
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	4413      	add	r3, r2
 800219e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021a2:	461a      	mov	r2, r3
 80021a4:	2304      	movs	r3, #4
 80021a6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	015a      	lsls	r2, r3, #5
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	4413      	add	r3, r2
 80021b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021b4:	68db      	ldr	r3, [r3, #12]
 80021b6:	68fa      	ldr	r2, [r7, #12]
 80021b8:	0151      	lsls	r1, r2, #5
 80021ba:	693a      	ldr	r2, [r7, #16]
 80021bc:	440a      	add	r2, r1
 80021be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80021c2:	f043 0302 	orr.w	r3, r3, #2
 80021c6:	60d3      	str	r3, [r2, #12]
 80021c8:	e101      	b.n	80023ce <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	015a      	lsls	r2, r3, #5
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	4413      	add	r3, r2
 80021d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021e0:	d12b      	bne.n	800223a <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	015a      	lsls	r2, r3, #5
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	4413      	add	r3, r2
 80021ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021ee:	461a      	mov	r2, r3
 80021f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021f4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	212c      	movs	r1, #44	; 0x2c
 80021fc:	fb01 f303 	mul.w	r3, r1, r3
 8002200:	4413      	add	r3, r2
 8002202:	3361      	adds	r3, #97	; 0x61
 8002204:	2207      	movs	r2, #7
 8002206:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	015a      	lsls	r2, r3, #5
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	4413      	add	r3, r2
 8002210:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002214:	68db      	ldr	r3, [r3, #12]
 8002216:	68fa      	ldr	r2, [r7, #12]
 8002218:	0151      	lsls	r1, r2, #5
 800221a:	693a      	ldr	r2, [r7, #16]
 800221c:	440a      	add	r2, r1
 800221e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002222:	f043 0302 	orr.w	r3, r3, #2
 8002226:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	68fa      	ldr	r2, [r7, #12]
 800222e:	b2d2      	uxtb	r2, r2
 8002230:	4611      	mov	r1, r2
 8002232:	4618      	mov	r0, r3
 8002234:	f003 fae5 	bl	8005802 <USB_HC_Halt>
 8002238:	e0c9      	b.n	80023ce <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	015a      	lsls	r2, r3, #5
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	4413      	add	r3, r2
 8002242:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	f003 0320 	and.w	r3, r3, #32
 800224c:	2b20      	cmp	r3, #32
 800224e:	d109      	bne.n	8002264 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	015a      	lsls	r2, r3, #5
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	4413      	add	r3, r2
 8002258:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800225c:	461a      	mov	r2, r3
 800225e:	2320      	movs	r3, #32
 8002260:	6093      	str	r3, [r2, #8]
 8002262:	e0b4      	b.n	80023ce <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	015a      	lsls	r2, r3, #5
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	4413      	add	r3, r2
 800226c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	f003 0308 	and.w	r3, r3, #8
 8002276:	2b08      	cmp	r3, #8
 8002278:	d133      	bne.n	80022e2 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	015a      	lsls	r2, r3, #5
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	4413      	add	r3, r2
 8002282:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	68fa      	ldr	r2, [r7, #12]
 800228a:	0151      	lsls	r1, r2, #5
 800228c:	693a      	ldr	r2, [r7, #16]
 800228e:	440a      	add	r2, r1
 8002290:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002294:	f043 0302 	orr.w	r3, r3, #2
 8002298:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	212c      	movs	r1, #44	; 0x2c
 80022a0:	fb01 f303 	mul.w	r3, r1, r3
 80022a4:	4413      	add	r3, r2
 80022a6:	3361      	adds	r3, #97	; 0x61
 80022a8:	2205      	movs	r2, #5
 80022aa:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	015a      	lsls	r2, r3, #5
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	4413      	add	r3, r2
 80022b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022b8:	461a      	mov	r2, r3
 80022ba:	2310      	movs	r3, #16
 80022bc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	015a      	lsls	r2, r3, #5
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	4413      	add	r3, r2
 80022c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022ca:	461a      	mov	r2, r3
 80022cc:	2308      	movs	r3, #8
 80022ce:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	68fa      	ldr	r2, [r7, #12]
 80022d6:	b2d2      	uxtb	r2, r2
 80022d8:	4611      	mov	r1, r2
 80022da:	4618      	mov	r0, r3
 80022dc:	f003 fa91 	bl	8005802 <USB_HC_Halt>
 80022e0:	e075      	b.n	80023ce <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	015a      	lsls	r2, r3, #5
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	4413      	add	r3, r2
 80022ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022f8:	d134      	bne.n	8002364 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	015a      	lsls	r2, r3, #5
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	4413      	add	r3, r2
 8002302:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	68fa      	ldr	r2, [r7, #12]
 800230a:	0151      	lsls	r1, r2, #5
 800230c:	693a      	ldr	r2, [r7, #16]
 800230e:	440a      	add	r2, r1
 8002310:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002314:	f043 0302 	orr.w	r3, r3, #2
 8002318:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	212c      	movs	r1, #44	; 0x2c
 8002320:	fb01 f303 	mul.w	r3, r1, r3
 8002324:	4413      	add	r3, r2
 8002326:	3361      	adds	r3, #97	; 0x61
 8002328:	2208      	movs	r2, #8
 800232a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	015a      	lsls	r2, r3, #5
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	4413      	add	r3, r2
 8002334:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002338:	461a      	mov	r2, r3
 800233a:	2310      	movs	r3, #16
 800233c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	015a      	lsls	r2, r3, #5
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	4413      	add	r3, r2
 8002346:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800234a:	461a      	mov	r2, r3
 800234c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002350:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	68fa      	ldr	r2, [r7, #12]
 8002358:	b2d2      	uxtb	r2, r2
 800235a:	4611      	mov	r1, r2
 800235c:	4618      	mov	r0, r3
 800235e:	f003 fa50 	bl	8005802 <USB_HC_Halt>
 8002362:	e034      	b.n	80023ce <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	015a      	lsls	r2, r3, #5
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	4413      	add	r3, r2
 800236c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002376:	2b80      	cmp	r3, #128	; 0x80
 8002378:	d129      	bne.n	80023ce <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	015a      	lsls	r2, r3, #5
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	4413      	add	r3, r2
 8002382:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	68fa      	ldr	r2, [r7, #12]
 800238a:	0151      	lsls	r1, r2, #5
 800238c:	693a      	ldr	r2, [r7, #16]
 800238e:	440a      	add	r2, r1
 8002390:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002394:	f043 0302 	orr.w	r3, r3, #2
 8002398:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	212c      	movs	r1, #44	; 0x2c
 80023a0:	fb01 f303 	mul.w	r3, r1, r3
 80023a4:	4413      	add	r3, r2
 80023a6:	3361      	adds	r3, #97	; 0x61
 80023a8:	2206      	movs	r2, #6
 80023aa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	68fa      	ldr	r2, [r7, #12]
 80023b2:	b2d2      	uxtb	r2, r2
 80023b4:	4611      	mov	r1, r2
 80023b6:	4618      	mov	r0, r3
 80023b8:	f003 fa23 	bl	8005802 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	015a      	lsls	r2, r3, #5
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	4413      	add	r3, r2
 80023c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023c8:	461a      	mov	r2, r3
 80023ca:	2380      	movs	r3, #128	; 0x80
 80023cc:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	015a      	lsls	r2, r3, #5
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	4413      	add	r3, r2
 80023d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023e4:	d122      	bne.n	800242c <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	015a      	lsls	r2, r3, #5
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	4413      	add	r3, r2
 80023ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	68fa      	ldr	r2, [r7, #12]
 80023f6:	0151      	lsls	r1, r2, #5
 80023f8:	693a      	ldr	r2, [r7, #16]
 80023fa:	440a      	add	r2, r1
 80023fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002400:	f043 0302 	orr.w	r3, r3, #2
 8002404:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	68fa      	ldr	r2, [r7, #12]
 800240c:	b2d2      	uxtb	r2, r2
 800240e:	4611      	mov	r1, r2
 8002410:	4618      	mov	r0, r3
 8002412:	f003 f9f6 	bl	8005802 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	015a      	lsls	r2, r3, #5
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	4413      	add	r3, r2
 800241e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002422:	461a      	mov	r2, r3
 8002424:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002428:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800242a:	e2ba      	b.n	80029a2 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	015a      	lsls	r2, r3, #5
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	4413      	add	r3, r2
 8002434:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	f003 0301 	and.w	r3, r3, #1
 800243e:	2b01      	cmp	r3, #1
 8002440:	f040 811b 	bne.w	800267a <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	691b      	ldr	r3, [r3, #16]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d019      	beq.n	8002480 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	212c      	movs	r1, #44	; 0x2c
 8002452:	fb01 f303 	mul.w	r3, r1, r3
 8002456:	4413      	add	r3, r2
 8002458:	3348      	adds	r3, #72	; 0x48
 800245a:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	0159      	lsls	r1, r3, #5
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	440b      	add	r3, r1
 8002464:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002468:	691b      	ldr	r3, [r3, #16]
 800246a:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800246e:	1ad2      	subs	r2, r2, r3
 8002470:	6879      	ldr	r1, [r7, #4]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	202c      	movs	r0, #44	; 0x2c
 8002476:	fb00 f303 	mul.w	r3, r0, r3
 800247a:	440b      	add	r3, r1
 800247c:	3350      	adds	r3, #80	; 0x50
 800247e:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	212c      	movs	r1, #44	; 0x2c
 8002486:	fb01 f303 	mul.w	r3, r1, r3
 800248a:	4413      	add	r3, r2
 800248c:	3361      	adds	r3, #97	; 0x61
 800248e:	2201      	movs	r2, #1
 8002490:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	212c      	movs	r1, #44	; 0x2c
 8002498:	fb01 f303 	mul.w	r3, r1, r3
 800249c:	4413      	add	r3, r2
 800249e:	335c      	adds	r3, #92	; 0x5c
 80024a0:	2200      	movs	r2, #0
 80024a2:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	015a      	lsls	r2, r3, #5
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	4413      	add	r3, r2
 80024ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024b0:	461a      	mov	r2, r3
 80024b2:	2301      	movs	r3, #1
 80024b4:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	212c      	movs	r1, #44	; 0x2c
 80024bc:	fb01 f303 	mul.w	r3, r1, r3
 80024c0:	4413      	add	r3, r2
 80024c2:	333f      	adds	r3, #63	; 0x3f
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d009      	beq.n	80024de <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	212c      	movs	r1, #44	; 0x2c
 80024d0:	fb01 f303 	mul.w	r3, r1, r3
 80024d4:	4413      	add	r3, r2
 80024d6:	333f      	adds	r3, #63	; 0x3f
 80024d8:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d121      	bne.n	8002522 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	015a      	lsls	r2, r3, #5
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	4413      	add	r3, r2
 80024e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	68fa      	ldr	r2, [r7, #12]
 80024ee:	0151      	lsls	r1, r2, #5
 80024f0:	693a      	ldr	r2, [r7, #16]
 80024f2:	440a      	add	r2, r1
 80024f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80024f8:	f043 0302 	orr.w	r3, r3, #2
 80024fc:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	68fa      	ldr	r2, [r7, #12]
 8002504:	b2d2      	uxtb	r2, r2
 8002506:	4611      	mov	r1, r2
 8002508:	4618      	mov	r0, r3
 800250a:	f003 f97a 	bl	8005802 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	015a      	lsls	r2, r3, #5
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	4413      	add	r3, r2
 8002516:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800251a:	461a      	mov	r2, r3
 800251c:	2310      	movs	r3, #16
 800251e:	6093      	str	r3, [r2, #8]
 8002520:	e066      	b.n	80025f0 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002522:	687a      	ldr	r2, [r7, #4]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	212c      	movs	r1, #44	; 0x2c
 8002528:	fb01 f303 	mul.w	r3, r1, r3
 800252c:	4413      	add	r3, r2
 800252e:	333f      	adds	r3, #63	; 0x3f
 8002530:	781b      	ldrb	r3, [r3, #0]
 8002532:	2b03      	cmp	r3, #3
 8002534:	d127      	bne.n	8002586 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	015a      	lsls	r2, r3, #5
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	4413      	add	r3, r2
 800253e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	68fa      	ldr	r2, [r7, #12]
 8002546:	0151      	lsls	r1, r2, #5
 8002548:	693a      	ldr	r2, [r7, #16]
 800254a:	440a      	add	r2, r1
 800254c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002550:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002554:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	212c      	movs	r1, #44	; 0x2c
 800255c:	fb01 f303 	mul.w	r3, r1, r3
 8002560:	4413      	add	r3, r2
 8002562:	3360      	adds	r3, #96	; 0x60
 8002564:	2201      	movs	r2, #1
 8002566:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	b2d9      	uxtb	r1, r3
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	202c      	movs	r0, #44	; 0x2c
 8002572:	fb00 f303 	mul.w	r3, r0, r3
 8002576:	4413      	add	r3, r2
 8002578:	3360      	adds	r3, #96	; 0x60
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	461a      	mov	r2, r3
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f005 fafc 	bl	8007b7c <HAL_HCD_HC_NotifyURBChange_Callback>
 8002584:	e034      	b.n	80025f0 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	212c      	movs	r1, #44	; 0x2c
 800258c:	fb01 f303 	mul.w	r3, r1, r3
 8002590:	4413      	add	r3, r2
 8002592:	333f      	adds	r3, #63	; 0x3f
 8002594:	781b      	ldrb	r3, [r3, #0]
 8002596:	2b01      	cmp	r3, #1
 8002598:	d12a      	bne.n	80025f0 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	212c      	movs	r1, #44	; 0x2c
 80025a0:	fb01 f303 	mul.w	r3, r1, r3
 80025a4:	4413      	add	r3, r2
 80025a6:	3360      	adds	r3, #96	; 0x60
 80025a8:	2201      	movs	r2, #1
 80025aa:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80025ac:	687a      	ldr	r2, [r7, #4]
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	212c      	movs	r1, #44	; 0x2c
 80025b2:	fb01 f303 	mul.w	r3, r1, r3
 80025b6:	4413      	add	r3, r2
 80025b8:	3354      	adds	r3, #84	; 0x54
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	f083 0301 	eor.w	r3, r3, #1
 80025c0:	b2d8      	uxtb	r0, r3
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	212c      	movs	r1, #44	; 0x2c
 80025c8:	fb01 f303 	mul.w	r3, r1, r3
 80025cc:	4413      	add	r3, r2
 80025ce:	3354      	adds	r3, #84	; 0x54
 80025d0:	4602      	mov	r2, r0
 80025d2:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	b2d9      	uxtb	r1, r3
 80025d8:	687a      	ldr	r2, [r7, #4]
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	202c      	movs	r0, #44	; 0x2c
 80025de:	fb00 f303 	mul.w	r3, r0, r3
 80025e2:	4413      	add	r3, r2
 80025e4:	3360      	adds	r3, #96	; 0x60
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	461a      	mov	r2, r3
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f005 fac6 	bl	8007b7c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	691b      	ldr	r3, [r3, #16]
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d12b      	bne.n	8002650 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	212c      	movs	r1, #44	; 0x2c
 80025fe:	fb01 f303 	mul.w	r3, r1, r3
 8002602:	4413      	add	r3, r2
 8002604:	3348      	adds	r3, #72	; 0x48
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	6879      	ldr	r1, [r7, #4]
 800260a:	68fa      	ldr	r2, [r7, #12]
 800260c:	202c      	movs	r0, #44	; 0x2c
 800260e:	fb00 f202 	mul.w	r2, r0, r2
 8002612:	440a      	add	r2, r1
 8002614:	3240      	adds	r2, #64	; 0x40
 8002616:	8812      	ldrh	r2, [r2, #0]
 8002618:	fbb3 f3f2 	udiv	r3, r3, r2
 800261c:	f003 0301 	and.w	r3, r3, #1
 8002620:	2b00      	cmp	r3, #0
 8002622:	f000 81be 	beq.w	80029a2 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	212c      	movs	r1, #44	; 0x2c
 800262c:	fb01 f303 	mul.w	r3, r1, r3
 8002630:	4413      	add	r3, r2
 8002632:	3354      	adds	r3, #84	; 0x54
 8002634:	781b      	ldrb	r3, [r3, #0]
 8002636:	f083 0301 	eor.w	r3, r3, #1
 800263a:	b2d8      	uxtb	r0, r3
 800263c:	687a      	ldr	r2, [r7, #4]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	212c      	movs	r1, #44	; 0x2c
 8002642:	fb01 f303 	mul.w	r3, r1, r3
 8002646:	4413      	add	r3, r2
 8002648:	3354      	adds	r3, #84	; 0x54
 800264a:	4602      	mov	r2, r0
 800264c:	701a      	strb	r2, [r3, #0]
}
 800264e:	e1a8      	b.n	80029a2 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002650:	687a      	ldr	r2, [r7, #4]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	212c      	movs	r1, #44	; 0x2c
 8002656:	fb01 f303 	mul.w	r3, r1, r3
 800265a:	4413      	add	r3, r2
 800265c:	3354      	adds	r3, #84	; 0x54
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	f083 0301 	eor.w	r3, r3, #1
 8002664:	b2d8      	uxtb	r0, r3
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	212c      	movs	r1, #44	; 0x2c
 800266c:	fb01 f303 	mul.w	r3, r1, r3
 8002670:	4413      	add	r3, r2
 8002672:	3354      	adds	r3, #84	; 0x54
 8002674:	4602      	mov	r2, r0
 8002676:	701a      	strb	r2, [r3, #0]
}
 8002678:	e193      	b.n	80029a2 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	015a      	lsls	r2, r3, #5
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	4413      	add	r3, r2
 8002682:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	f003 0302 	and.w	r3, r3, #2
 800268c:	2b02      	cmp	r3, #2
 800268e:	f040 8106 	bne.w	800289e <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	015a      	lsls	r2, r3, #5
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	4413      	add	r3, r2
 800269a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	68fa      	ldr	r2, [r7, #12]
 80026a2:	0151      	lsls	r1, r2, #5
 80026a4:	693a      	ldr	r2, [r7, #16]
 80026a6:	440a      	add	r2, r1
 80026a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026ac:	f023 0302 	bic.w	r3, r3, #2
 80026b0:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	212c      	movs	r1, #44	; 0x2c
 80026b8:	fb01 f303 	mul.w	r3, r1, r3
 80026bc:	4413      	add	r3, r2
 80026be:	3361      	adds	r3, #97	; 0x61
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d109      	bne.n	80026da <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80026c6:	687a      	ldr	r2, [r7, #4]
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	212c      	movs	r1, #44	; 0x2c
 80026cc:	fb01 f303 	mul.w	r3, r1, r3
 80026d0:	4413      	add	r3, r2
 80026d2:	3360      	adds	r3, #96	; 0x60
 80026d4:	2201      	movs	r2, #1
 80026d6:	701a      	strb	r2, [r3, #0]
 80026d8:	e0c9      	b.n	800286e <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	212c      	movs	r1, #44	; 0x2c
 80026e0:	fb01 f303 	mul.w	r3, r1, r3
 80026e4:	4413      	add	r3, r2
 80026e6:	3361      	adds	r3, #97	; 0x61
 80026e8:	781b      	ldrb	r3, [r3, #0]
 80026ea:	2b05      	cmp	r3, #5
 80026ec:	d109      	bne.n	8002702 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	212c      	movs	r1, #44	; 0x2c
 80026f4:	fb01 f303 	mul.w	r3, r1, r3
 80026f8:	4413      	add	r3, r2
 80026fa:	3360      	adds	r3, #96	; 0x60
 80026fc:	2205      	movs	r2, #5
 80026fe:	701a      	strb	r2, [r3, #0]
 8002700:	e0b5      	b.n	800286e <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	212c      	movs	r1, #44	; 0x2c
 8002708:	fb01 f303 	mul.w	r3, r1, r3
 800270c:	4413      	add	r3, r2
 800270e:	3361      	adds	r3, #97	; 0x61
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	2b06      	cmp	r3, #6
 8002714:	d009      	beq.n	800272a <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	212c      	movs	r1, #44	; 0x2c
 800271c:	fb01 f303 	mul.w	r3, r1, r3
 8002720:	4413      	add	r3, r2
 8002722:	3361      	adds	r3, #97	; 0x61
 8002724:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002726:	2b08      	cmp	r3, #8
 8002728:	d150      	bne.n	80027cc <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	212c      	movs	r1, #44	; 0x2c
 8002730:	fb01 f303 	mul.w	r3, r1, r3
 8002734:	4413      	add	r3, r2
 8002736:	335c      	adds	r3, #92	; 0x5c
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	1c5a      	adds	r2, r3, #1
 800273c:	6879      	ldr	r1, [r7, #4]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	202c      	movs	r0, #44	; 0x2c
 8002742:	fb00 f303 	mul.w	r3, r0, r3
 8002746:	440b      	add	r3, r1
 8002748:	335c      	adds	r3, #92	; 0x5c
 800274a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800274c:	687a      	ldr	r2, [r7, #4]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	212c      	movs	r1, #44	; 0x2c
 8002752:	fb01 f303 	mul.w	r3, r1, r3
 8002756:	4413      	add	r3, r2
 8002758:	335c      	adds	r3, #92	; 0x5c
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	2b02      	cmp	r3, #2
 800275e:	d912      	bls.n	8002786 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002760:	687a      	ldr	r2, [r7, #4]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	212c      	movs	r1, #44	; 0x2c
 8002766:	fb01 f303 	mul.w	r3, r1, r3
 800276a:	4413      	add	r3, r2
 800276c:	335c      	adds	r3, #92	; 0x5c
 800276e:	2200      	movs	r2, #0
 8002770:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	212c      	movs	r1, #44	; 0x2c
 8002778:	fb01 f303 	mul.w	r3, r1, r3
 800277c:	4413      	add	r3, r2
 800277e:	3360      	adds	r3, #96	; 0x60
 8002780:	2204      	movs	r2, #4
 8002782:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002784:	e073      	b.n	800286e <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	212c      	movs	r1, #44	; 0x2c
 800278c:	fb01 f303 	mul.w	r3, r1, r3
 8002790:	4413      	add	r3, r2
 8002792:	3360      	adds	r3, #96	; 0x60
 8002794:	2202      	movs	r2, #2
 8002796:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	015a      	lsls	r2, r3, #5
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	4413      	add	r3, r2
 80027a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80027ae:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80027b6:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	015a      	lsls	r2, r3, #5
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	4413      	add	r3, r2
 80027c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027c4:	461a      	mov	r2, r3
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80027ca:	e050      	b.n	800286e <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80027cc:	687a      	ldr	r2, [r7, #4]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	212c      	movs	r1, #44	; 0x2c
 80027d2:	fb01 f303 	mul.w	r3, r1, r3
 80027d6:	4413      	add	r3, r2
 80027d8:	3361      	adds	r3, #97	; 0x61
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	2b03      	cmp	r3, #3
 80027de:	d122      	bne.n	8002826 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80027e0:	687a      	ldr	r2, [r7, #4]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	212c      	movs	r1, #44	; 0x2c
 80027e6:	fb01 f303 	mul.w	r3, r1, r3
 80027ea:	4413      	add	r3, r2
 80027ec:	3360      	adds	r3, #96	; 0x60
 80027ee:	2202      	movs	r2, #2
 80027f0:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	015a      	lsls	r2, r3, #5
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	4413      	add	r3, r2
 80027fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002808:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002810:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	015a      	lsls	r2, r3, #5
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	4413      	add	r3, r2
 800281a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800281e:	461a      	mov	r2, r3
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	6013      	str	r3, [r2, #0]
 8002824:	e023      	b.n	800286e <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	212c      	movs	r1, #44	; 0x2c
 800282c:	fb01 f303 	mul.w	r3, r1, r3
 8002830:	4413      	add	r3, r2
 8002832:	3361      	adds	r3, #97	; 0x61
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	2b07      	cmp	r3, #7
 8002838:	d119      	bne.n	800286e <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	212c      	movs	r1, #44	; 0x2c
 8002840:	fb01 f303 	mul.w	r3, r1, r3
 8002844:	4413      	add	r3, r2
 8002846:	335c      	adds	r3, #92	; 0x5c
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	1c5a      	adds	r2, r3, #1
 800284c:	6879      	ldr	r1, [r7, #4]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	202c      	movs	r0, #44	; 0x2c
 8002852:	fb00 f303 	mul.w	r3, r0, r3
 8002856:	440b      	add	r3, r1
 8002858:	335c      	adds	r3, #92	; 0x5c
 800285a:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800285c:	687a      	ldr	r2, [r7, #4]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	212c      	movs	r1, #44	; 0x2c
 8002862:	fb01 f303 	mul.w	r3, r1, r3
 8002866:	4413      	add	r3, r2
 8002868:	3360      	adds	r3, #96	; 0x60
 800286a:	2204      	movs	r2, #4
 800286c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	015a      	lsls	r2, r3, #5
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	4413      	add	r3, r2
 8002876:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800287a:	461a      	mov	r2, r3
 800287c:	2302      	movs	r3, #2
 800287e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	b2d9      	uxtb	r1, r3
 8002884:	687a      	ldr	r2, [r7, #4]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	202c      	movs	r0, #44	; 0x2c
 800288a:	fb00 f303 	mul.w	r3, r0, r3
 800288e:	4413      	add	r3, r2
 8002890:	3360      	adds	r3, #96	; 0x60
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	461a      	mov	r2, r3
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f005 f970 	bl	8007b7c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800289c:	e081      	b.n	80029a2 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	015a      	lsls	r2, r3, #5
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	4413      	add	r3, r2
 80028a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	f003 0310 	and.w	r3, r3, #16
 80028b0:	2b10      	cmp	r3, #16
 80028b2:	d176      	bne.n	80029a2 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	212c      	movs	r1, #44	; 0x2c
 80028ba:	fb01 f303 	mul.w	r3, r1, r3
 80028be:	4413      	add	r3, r2
 80028c0:	333f      	adds	r3, #63	; 0x3f
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	2b03      	cmp	r3, #3
 80028c6:	d121      	bne.n	800290c <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	212c      	movs	r1, #44	; 0x2c
 80028ce:	fb01 f303 	mul.w	r3, r1, r3
 80028d2:	4413      	add	r3, r2
 80028d4:	335c      	adds	r3, #92	; 0x5c
 80028d6:	2200      	movs	r2, #0
 80028d8:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	015a      	lsls	r2, r3, #5
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	4413      	add	r3, r2
 80028e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	68fa      	ldr	r2, [r7, #12]
 80028ea:	0151      	lsls	r1, r2, #5
 80028ec:	693a      	ldr	r2, [r7, #16]
 80028ee:	440a      	add	r2, r1
 80028f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80028f4:	f043 0302 	orr.w	r3, r3, #2
 80028f8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	68fa      	ldr	r2, [r7, #12]
 8002900:	b2d2      	uxtb	r2, r2
 8002902:	4611      	mov	r1, r2
 8002904:	4618      	mov	r0, r3
 8002906:	f002 ff7c 	bl	8005802 <USB_HC_Halt>
 800290a:	e041      	b.n	8002990 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800290c:	687a      	ldr	r2, [r7, #4]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	212c      	movs	r1, #44	; 0x2c
 8002912:	fb01 f303 	mul.w	r3, r1, r3
 8002916:	4413      	add	r3, r2
 8002918:	333f      	adds	r3, #63	; 0x3f
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d009      	beq.n	8002934 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002920:	687a      	ldr	r2, [r7, #4]
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	212c      	movs	r1, #44	; 0x2c
 8002926:	fb01 f303 	mul.w	r3, r1, r3
 800292a:	4413      	add	r3, r2
 800292c:	333f      	adds	r3, #63	; 0x3f
 800292e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002930:	2b02      	cmp	r3, #2
 8002932:	d12d      	bne.n	8002990 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002934:	687a      	ldr	r2, [r7, #4]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	212c      	movs	r1, #44	; 0x2c
 800293a:	fb01 f303 	mul.w	r3, r1, r3
 800293e:	4413      	add	r3, r2
 8002940:	335c      	adds	r3, #92	; 0x5c
 8002942:	2200      	movs	r2, #0
 8002944:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	691b      	ldr	r3, [r3, #16]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d120      	bne.n	8002990 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	212c      	movs	r1, #44	; 0x2c
 8002954:	fb01 f303 	mul.w	r3, r1, r3
 8002958:	4413      	add	r3, r2
 800295a:	3361      	adds	r3, #97	; 0x61
 800295c:	2203      	movs	r2, #3
 800295e:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	015a      	lsls	r2, r3, #5
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	4413      	add	r3, r2
 8002968:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800296c:	68db      	ldr	r3, [r3, #12]
 800296e:	68fa      	ldr	r2, [r7, #12]
 8002970:	0151      	lsls	r1, r2, #5
 8002972:	693a      	ldr	r2, [r7, #16]
 8002974:	440a      	add	r2, r1
 8002976:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800297a:	f043 0302 	orr.w	r3, r3, #2
 800297e:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	68fa      	ldr	r2, [r7, #12]
 8002986:	b2d2      	uxtb	r2, r2
 8002988:	4611      	mov	r1, r2
 800298a:	4618      	mov	r0, r3
 800298c:	f002 ff39 	bl	8005802 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	015a      	lsls	r2, r3, #5
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	4413      	add	r3, r2
 8002998:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800299c:	461a      	mov	r2, r3
 800299e:	2310      	movs	r3, #16
 80029a0:	6093      	str	r3, [r2, #8]
}
 80029a2:	bf00      	nop
 80029a4:	3718      	adds	r7, #24
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}

080029aa <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80029aa:	b580      	push	{r7, lr}
 80029ac:	b088      	sub	sp, #32
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	6078      	str	r0, [r7, #4]
 80029b2:	460b      	mov	r3, r1
 80029b4:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80029c0:	78fb      	ldrb	r3, [r7, #3]
 80029c2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	015a      	lsls	r2, r3, #5
 80029c8:	69bb      	ldr	r3, [r7, #24]
 80029ca:	4413      	add	r3, r2
 80029cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	f003 0304 	and.w	r3, r3, #4
 80029d6:	2b04      	cmp	r3, #4
 80029d8:	d119      	bne.n	8002a0e <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	015a      	lsls	r2, r3, #5
 80029de:	69bb      	ldr	r3, [r7, #24]
 80029e0:	4413      	add	r3, r2
 80029e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029e6:	461a      	mov	r2, r3
 80029e8:	2304      	movs	r3, #4
 80029ea:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	015a      	lsls	r2, r3, #5
 80029f0:	69bb      	ldr	r3, [r7, #24]
 80029f2:	4413      	add	r3, r2
 80029f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029f8:	68db      	ldr	r3, [r3, #12]
 80029fa:	697a      	ldr	r2, [r7, #20]
 80029fc:	0151      	lsls	r1, r2, #5
 80029fe:	69ba      	ldr	r2, [r7, #24]
 8002a00:	440a      	add	r2, r1
 8002a02:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a06:	f043 0302 	orr.w	r3, r3, #2
 8002a0a:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002a0c:	e3ca      	b.n	80031a4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	015a      	lsls	r2, r3, #5
 8002a12:	69bb      	ldr	r3, [r7, #24]
 8002a14:	4413      	add	r3, r2
 8002a16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	f003 0320 	and.w	r3, r3, #32
 8002a20:	2b20      	cmp	r3, #32
 8002a22:	d13e      	bne.n	8002aa2 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	015a      	lsls	r2, r3, #5
 8002a28:	69bb      	ldr	r3, [r7, #24]
 8002a2a:	4413      	add	r3, r2
 8002a2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a30:	461a      	mov	r2, r3
 8002a32:	2320      	movs	r3, #32
 8002a34:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	212c      	movs	r1, #44	; 0x2c
 8002a3c:	fb01 f303 	mul.w	r3, r1, r3
 8002a40:	4413      	add	r3, r2
 8002a42:	333d      	adds	r3, #61	; 0x3d
 8002a44:	781b      	ldrb	r3, [r3, #0]
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	f040 83ac 	bne.w	80031a4 <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 8002a4c:	687a      	ldr	r2, [r7, #4]
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	212c      	movs	r1, #44	; 0x2c
 8002a52:	fb01 f303 	mul.w	r3, r1, r3
 8002a56:	4413      	add	r3, r2
 8002a58:	333d      	adds	r3, #61	; 0x3d
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	212c      	movs	r1, #44	; 0x2c
 8002a64:	fb01 f303 	mul.w	r3, r1, r3
 8002a68:	4413      	add	r3, r2
 8002a6a:	3360      	adds	r3, #96	; 0x60
 8002a6c:	2202      	movs	r2, #2
 8002a6e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	015a      	lsls	r2, r3, #5
 8002a74:	69bb      	ldr	r3, [r7, #24]
 8002a76:	4413      	add	r3, r2
 8002a78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a7c:	68db      	ldr	r3, [r3, #12]
 8002a7e:	697a      	ldr	r2, [r7, #20]
 8002a80:	0151      	lsls	r1, r2, #5
 8002a82:	69ba      	ldr	r2, [r7, #24]
 8002a84:	440a      	add	r2, r1
 8002a86:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a8a:	f043 0302 	orr.w	r3, r3, #2
 8002a8e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	697a      	ldr	r2, [r7, #20]
 8002a96:	b2d2      	uxtb	r2, r2
 8002a98:	4611      	mov	r1, r2
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f002 feb1 	bl	8005802 <USB_HC_Halt>
}
 8002aa0:	e380      	b.n	80031a4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	015a      	lsls	r2, r3, #5
 8002aa6:	69bb      	ldr	r3, [r7, #24]
 8002aa8:	4413      	add	r3, r2
 8002aaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ab4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ab8:	d122      	bne.n	8002b00 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	015a      	lsls	r2, r3, #5
 8002abe:	69bb      	ldr	r3, [r7, #24]
 8002ac0:	4413      	add	r3, r2
 8002ac2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	697a      	ldr	r2, [r7, #20]
 8002aca:	0151      	lsls	r1, r2, #5
 8002acc:	69ba      	ldr	r2, [r7, #24]
 8002ace:	440a      	add	r2, r1
 8002ad0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ad4:	f043 0302 	orr.w	r3, r3, #2
 8002ad8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	697a      	ldr	r2, [r7, #20]
 8002ae0:	b2d2      	uxtb	r2, r2
 8002ae2:	4611      	mov	r1, r2
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f002 fe8c 	bl	8005802 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	015a      	lsls	r2, r3, #5
 8002aee:	69bb      	ldr	r3, [r7, #24]
 8002af0:	4413      	add	r3, r2
 8002af2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002af6:	461a      	mov	r2, r3
 8002af8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002afc:	6093      	str	r3, [r2, #8]
}
 8002afe:	e351      	b.n	80031a4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	015a      	lsls	r2, r3, #5
 8002b04:	69bb      	ldr	r3, [r7, #24]
 8002b06:	4413      	add	r3, r2
 8002b08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	f003 0301 	and.w	r3, r3, #1
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d150      	bne.n	8002bb8 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	212c      	movs	r1, #44	; 0x2c
 8002b1c:	fb01 f303 	mul.w	r3, r1, r3
 8002b20:	4413      	add	r3, r2
 8002b22:	335c      	adds	r3, #92	; 0x5c
 8002b24:	2200      	movs	r2, #0
 8002b26:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	015a      	lsls	r2, r3, #5
 8002b2c:	69bb      	ldr	r3, [r7, #24]
 8002b2e:	4413      	add	r3, r2
 8002b30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b3a:	2b40      	cmp	r3, #64	; 0x40
 8002b3c:	d111      	bne.n	8002b62 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	212c      	movs	r1, #44	; 0x2c
 8002b44:	fb01 f303 	mul.w	r3, r1, r3
 8002b48:	4413      	add	r3, r2
 8002b4a:	333d      	adds	r3, #61	; 0x3d
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	015a      	lsls	r2, r3, #5
 8002b54:	69bb      	ldr	r3, [r7, #24]
 8002b56:	4413      	add	r3, r2
 8002b58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	2340      	movs	r3, #64	; 0x40
 8002b60:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	015a      	lsls	r2, r3, #5
 8002b66:	69bb      	ldr	r3, [r7, #24]
 8002b68:	4413      	add	r3, r2
 8002b6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	697a      	ldr	r2, [r7, #20]
 8002b72:	0151      	lsls	r1, r2, #5
 8002b74:	69ba      	ldr	r2, [r7, #24]
 8002b76:	440a      	add	r2, r1
 8002b78:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b7c:	f043 0302 	orr.w	r3, r3, #2
 8002b80:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	697a      	ldr	r2, [r7, #20]
 8002b88:	b2d2      	uxtb	r2, r2
 8002b8a:	4611      	mov	r1, r2
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f002 fe38 	bl	8005802 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	015a      	lsls	r2, r3, #5
 8002b96:	69bb      	ldr	r3, [r7, #24]
 8002b98:	4413      	add	r3, r2
 8002b9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	212c      	movs	r1, #44	; 0x2c
 8002baa:	fb01 f303 	mul.w	r3, r1, r3
 8002bae:	4413      	add	r3, r2
 8002bb0:	3361      	adds	r3, #97	; 0x61
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	701a      	strb	r2, [r3, #0]
}
 8002bb6:	e2f5      	b.n	80031a4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	015a      	lsls	r2, r3, #5
 8002bbc:	69bb      	ldr	r3, [r7, #24]
 8002bbe:	4413      	add	r3, r2
 8002bc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bca:	2b40      	cmp	r3, #64	; 0x40
 8002bcc:	d13c      	bne.n	8002c48 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8002bce:	687a      	ldr	r2, [r7, #4]
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	212c      	movs	r1, #44	; 0x2c
 8002bd4:	fb01 f303 	mul.w	r3, r1, r3
 8002bd8:	4413      	add	r3, r2
 8002bda:	3361      	adds	r3, #97	; 0x61
 8002bdc:	2204      	movs	r2, #4
 8002bde:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002be0:	687a      	ldr	r2, [r7, #4]
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	212c      	movs	r1, #44	; 0x2c
 8002be6:	fb01 f303 	mul.w	r3, r1, r3
 8002bea:	4413      	add	r3, r2
 8002bec:	333d      	adds	r3, #61	; 0x3d
 8002bee:	2201      	movs	r2, #1
 8002bf0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	212c      	movs	r1, #44	; 0x2c
 8002bf8:	fb01 f303 	mul.w	r3, r1, r3
 8002bfc:	4413      	add	r3, r2
 8002bfe:	335c      	adds	r3, #92	; 0x5c
 8002c00:	2200      	movs	r2, #0
 8002c02:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	015a      	lsls	r2, r3, #5
 8002c08:	69bb      	ldr	r3, [r7, #24]
 8002c0a:	4413      	add	r3, r2
 8002c0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c10:	68db      	ldr	r3, [r3, #12]
 8002c12:	697a      	ldr	r2, [r7, #20]
 8002c14:	0151      	lsls	r1, r2, #5
 8002c16:	69ba      	ldr	r2, [r7, #24]
 8002c18:	440a      	add	r2, r1
 8002c1a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c1e:	f043 0302 	orr.w	r3, r3, #2
 8002c22:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	697a      	ldr	r2, [r7, #20]
 8002c2a:	b2d2      	uxtb	r2, r2
 8002c2c:	4611      	mov	r1, r2
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f002 fde7 	bl	8005802 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	015a      	lsls	r2, r3, #5
 8002c38:	69bb      	ldr	r3, [r7, #24]
 8002c3a:	4413      	add	r3, r2
 8002c3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c40:	461a      	mov	r2, r3
 8002c42:	2340      	movs	r3, #64	; 0x40
 8002c44:	6093      	str	r3, [r2, #8]
}
 8002c46:	e2ad      	b.n	80031a4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	015a      	lsls	r2, r3, #5
 8002c4c:	69bb      	ldr	r3, [r7, #24]
 8002c4e:	4413      	add	r3, r2
 8002c50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	f003 0308 	and.w	r3, r3, #8
 8002c5a:	2b08      	cmp	r3, #8
 8002c5c:	d12a      	bne.n	8002cb4 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	015a      	lsls	r2, r3, #5
 8002c62:	69bb      	ldr	r3, [r7, #24]
 8002c64:	4413      	add	r3, r2
 8002c66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	2308      	movs	r3, #8
 8002c6e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	015a      	lsls	r2, r3, #5
 8002c74:	69bb      	ldr	r3, [r7, #24]
 8002c76:	4413      	add	r3, r2
 8002c78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c7c:	68db      	ldr	r3, [r3, #12]
 8002c7e:	697a      	ldr	r2, [r7, #20]
 8002c80:	0151      	lsls	r1, r2, #5
 8002c82:	69ba      	ldr	r2, [r7, #24]
 8002c84:	440a      	add	r2, r1
 8002c86:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c8a:	f043 0302 	orr.w	r3, r3, #2
 8002c8e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	697a      	ldr	r2, [r7, #20]
 8002c96:	b2d2      	uxtb	r2, r2
 8002c98:	4611      	mov	r1, r2
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f002 fdb1 	bl	8005802 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002ca0:	687a      	ldr	r2, [r7, #4]
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	212c      	movs	r1, #44	; 0x2c
 8002ca6:	fb01 f303 	mul.w	r3, r1, r3
 8002caa:	4413      	add	r3, r2
 8002cac:	3361      	adds	r3, #97	; 0x61
 8002cae:	2205      	movs	r2, #5
 8002cb0:	701a      	strb	r2, [r3, #0]
}
 8002cb2:	e277      	b.n	80031a4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	015a      	lsls	r2, r3, #5
 8002cb8:	69bb      	ldr	r3, [r7, #24]
 8002cba:	4413      	add	r3, r2
 8002cbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	f003 0310 	and.w	r3, r3, #16
 8002cc6:	2b10      	cmp	r3, #16
 8002cc8:	d150      	bne.n	8002d6c <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	212c      	movs	r1, #44	; 0x2c
 8002cd0:	fb01 f303 	mul.w	r3, r1, r3
 8002cd4:	4413      	add	r3, r2
 8002cd6:	335c      	adds	r3, #92	; 0x5c
 8002cd8:	2200      	movs	r2, #0
 8002cda:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002cdc:	687a      	ldr	r2, [r7, #4]
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	212c      	movs	r1, #44	; 0x2c
 8002ce2:	fb01 f303 	mul.w	r3, r1, r3
 8002ce6:	4413      	add	r3, r2
 8002ce8:	3361      	adds	r3, #97	; 0x61
 8002cea:	2203      	movs	r2, #3
 8002cec:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	212c      	movs	r1, #44	; 0x2c
 8002cf4:	fb01 f303 	mul.w	r3, r1, r3
 8002cf8:	4413      	add	r3, r2
 8002cfa:	333d      	adds	r3, #61	; 0x3d
 8002cfc:	781b      	ldrb	r3, [r3, #0]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d112      	bne.n	8002d28 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	212c      	movs	r1, #44	; 0x2c
 8002d08:	fb01 f303 	mul.w	r3, r1, r3
 8002d0c:	4413      	add	r3, r2
 8002d0e:	333c      	adds	r3, #60	; 0x3c
 8002d10:	781b      	ldrb	r3, [r3, #0]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d108      	bne.n	8002d28 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	212c      	movs	r1, #44	; 0x2c
 8002d1c:	fb01 f303 	mul.w	r3, r1, r3
 8002d20:	4413      	add	r3, r2
 8002d22:	333d      	adds	r3, #61	; 0x3d
 8002d24:	2201      	movs	r2, #1
 8002d26:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	015a      	lsls	r2, r3, #5
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	4413      	add	r3, r2
 8002d30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d34:	68db      	ldr	r3, [r3, #12]
 8002d36:	697a      	ldr	r2, [r7, #20]
 8002d38:	0151      	lsls	r1, r2, #5
 8002d3a:	69ba      	ldr	r2, [r7, #24]
 8002d3c:	440a      	add	r2, r1
 8002d3e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d42:	f043 0302 	orr.w	r3, r3, #2
 8002d46:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	697a      	ldr	r2, [r7, #20]
 8002d4e:	b2d2      	uxtb	r2, r2
 8002d50:	4611      	mov	r1, r2
 8002d52:	4618      	mov	r0, r3
 8002d54:	f002 fd55 	bl	8005802 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	015a      	lsls	r2, r3, #5
 8002d5c:	69bb      	ldr	r3, [r7, #24]
 8002d5e:	4413      	add	r3, r2
 8002d60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d64:	461a      	mov	r2, r3
 8002d66:	2310      	movs	r3, #16
 8002d68:	6093      	str	r3, [r2, #8]
}
 8002d6a:	e21b      	b.n	80031a4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	015a      	lsls	r2, r3, #5
 8002d70:	69bb      	ldr	r3, [r7, #24]
 8002d72:	4413      	add	r3, r2
 8002d74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d7e:	2b80      	cmp	r3, #128	; 0x80
 8002d80:	d174      	bne.n	8002e6c <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	691b      	ldr	r3, [r3, #16]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d121      	bne.n	8002dce <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	212c      	movs	r1, #44	; 0x2c
 8002d90:	fb01 f303 	mul.w	r3, r1, r3
 8002d94:	4413      	add	r3, r2
 8002d96:	3361      	adds	r3, #97	; 0x61
 8002d98:	2206      	movs	r2, #6
 8002d9a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	015a      	lsls	r2, r3, #5
 8002da0:	69bb      	ldr	r3, [r7, #24]
 8002da2:	4413      	add	r3, r2
 8002da4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	697a      	ldr	r2, [r7, #20]
 8002dac:	0151      	lsls	r1, r2, #5
 8002dae:	69ba      	ldr	r2, [r7, #24]
 8002db0:	440a      	add	r2, r1
 8002db2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002db6:	f043 0302 	orr.w	r3, r3, #2
 8002dba:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	697a      	ldr	r2, [r7, #20]
 8002dc2:	b2d2      	uxtb	r2, r2
 8002dc4:	4611      	mov	r1, r2
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f002 fd1b 	bl	8005802 <USB_HC_Halt>
 8002dcc:	e044      	b.n	8002e58 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	212c      	movs	r1, #44	; 0x2c
 8002dd4:	fb01 f303 	mul.w	r3, r1, r3
 8002dd8:	4413      	add	r3, r2
 8002dda:	335c      	adds	r3, #92	; 0x5c
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	1c5a      	adds	r2, r3, #1
 8002de0:	6879      	ldr	r1, [r7, #4]
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	202c      	movs	r0, #44	; 0x2c
 8002de6:	fb00 f303 	mul.w	r3, r0, r3
 8002dea:	440b      	add	r3, r1
 8002dec:	335c      	adds	r3, #92	; 0x5c
 8002dee:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	212c      	movs	r1, #44	; 0x2c
 8002df6:	fb01 f303 	mul.w	r3, r1, r3
 8002dfa:	4413      	add	r3, r2
 8002dfc:	335c      	adds	r3, #92	; 0x5c
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	d920      	bls.n	8002e46 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	212c      	movs	r1, #44	; 0x2c
 8002e0a:	fb01 f303 	mul.w	r3, r1, r3
 8002e0e:	4413      	add	r3, r2
 8002e10:	335c      	adds	r3, #92	; 0x5c
 8002e12:	2200      	movs	r2, #0
 8002e14:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	212c      	movs	r1, #44	; 0x2c
 8002e1c:	fb01 f303 	mul.w	r3, r1, r3
 8002e20:	4413      	add	r3, r2
 8002e22:	3360      	adds	r3, #96	; 0x60
 8002e24:	2204      	movs	r2, #4
 8002e26:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	b2d9      	uxtb	r1, r3
 8002e2c:	687a      	ldr	r2, [r7, #4]
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	202c      	movs	r0, #44	; 0x2c
 8002e32:	fb00 f303 	mul.w	r3, r0, r3
 8002e36:	4413      	add	r3, r2
 8002e38:	3360      	adds	r3, #96	; 0x60
 8002e3a:	781b      	ldrb	r3, [r3, #0]
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f004 fe9c 	bl	8007b7c <HAL_HCD_HC_NotifyURBChange_Callback>
 8002e44:	e008      	b.n	8002e58 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002e46:	687a      	ldr	r2, [r7, #4]
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	212c      	movs	r1, #44	; 0x2c
 8002e4c:	fb01 f303 	mul.w	r3, r1, r3
 8002e50:	4413      	add	r3, r2
 8002e52:	3360      	adds	r3, #96	; 0x60
 8002e54:	2202      	movs	r2, #2
 8002e56:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	015a      	lsls	r2, r3, #5
 8002e5c:	69bb      	ldr	r3, [r7, #24]
 8002e5e:	4413      	add	r3, r2
 8002e60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e64:	461a      	mov	r2, r3
 8002e66:	2380      	movs	r3, #128	; 0x80
 8002e68:	6093      	str	r3, [r2, #8]
}
 8002e6a:	e19b      	b.n	80031a4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	015a      	lsls	r2, r3, #5
 8002e70:	69bb      	ldr	r3, [r7, #24]
 8002e72:	4413      	add	r3, r2
 8002e74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e82:	d134      	bne.n	8002eee <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	015a      	lsls	r2, r3, #5
 8002e88:	69bb      	ldr	r3, [r7, #24]
 8002e8a:	4413      	add	r3, r2
 8002e8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e90:	68db      	ldr	r3, [r3, #12]
 8002e92:	697a      	ldr	r2, [r7, #20]
 8002e94:	0151      	lsls	r1, r2, #5
 8002e96:	69ba      	ldr	r2, [r7, #24]
 8002e98:	440a      	add	r2, r1
 8002e9a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e9e:	f043 0302 	orr.w	r3, r3, #2
 8002ea2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	697a      	ldr	r2, [r7, #20]
 8002eaa:	b2d2      	uxtb	r2, r2
 8002eac:	4611      	mov	r1, r2
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f002 fca7 	bl	8005802 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	015a      	lsls	r2, r3, #5
 8002eb8:	69bb      	ldr	r3, [r7, #24]
 8002eba:	4413      	add	r3, r2
 8002ebc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	2310      	movs	r3, #16
 8002ec4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	015a      	lsls	r2, r3, #5
 8002eca:	69bb      	ldr	r3, [r7, #24]
 8002ecc:	4413      	add	r3, r2
 8002ece:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ed8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	212c      	movs	r1, #44	; 0x2c
 8002ee0:	fb01 f303 	mul.w	r3, r1, r3
 8002ee4:	4413      	add	r3, r2
 8002ee6:	3361      	adds	r3, #97	; 0x61
 8002ee8:	2208      	movs	r2, #8
 8002eea:	701a      	strb	r2, [r3, #0]
}
 8002eec:	e15a      	b.n	80031a4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	015a      	lsls	r2, r3, #5
 8002ef2:	69bb      	ldr	r3, [r7, #24]
 8002ef4:	4413      	add	r3, r2
 8002ef6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	f003 0302 	and.w	r3, r3, #2
 8002f00:	2b02      	cmp	r3, #2
 8002f02:	f040 814f 	bne.w	80031a4 <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	015a      	lsls	r2, r3, #5
 8002f0a:	69bb      	ldr	r3, [r7, #24]
 8002f0c:	4413      	add	r3, r2
 8002f0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	697a      	ldr	r2, [r7, #20]
 8002f16:	0151      	lsls	r1, r2, #5
 8002f18:	69ba      	ldr	r2, [r7, #24]
 8002f1a:	440a      	add	r2, r1
 8002f1c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f20:	f023 0302 	bic.w	r3, r3, #2
 8002f24:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	212c      	movs	r1, #44	; 0x2c
 8002f2c:	fb01 f303 	mul.w	r3, r1, r3
 8002f30:	4413      	add	r3, r2
 8002f32:	3361      	adds	r3, #97	; 0x61
 8002f34:	781b      	ldrb	r3, [r3, #0]
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d17d      	bne.n	8003036 <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002f3a:	687a      	ldr	r2, [r7, #4]
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	212c      	movs	r1, #44	; 0x2c
 8002f40:	fb01 f303 	mul.w	r3, r1, r3
 8002f44:	4413      	add	r3, r2
 8002f46:	3360      	adds	r3, #96	; 0x60
 8002f48:	2201      	movs	r2, #1
 8002f4a:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002f4c:	687a      	ldr	r2, [r7, #4]
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	212c      	movs	r1, #44	; 0x2c
 8002f52:	fb01 f303 	mul.w	r3, r1, r3
 8002f56:	4413      	add	r3, r2
 8002f58:	333f      	adds	r3, #63	; 0x3f
 8002f5a:	781b      	ldrb	r3, [r3, #0]
 8002f5c:	2b02      	cmp	r3, #2
 8002f5e:	d00a      	beq.n	8002f76 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002f60:	687a      	ldr	r2, [r7, #4]
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	212c      	movs	r1, #44	; 0x2c
 8002f66:	fb01 f303 	mul.w	r3, r1, r3
 8002f6a:	4413      	add	r3, r2
 8002f6c:	333f      	adds	r3, #63	; 0x3f
 8002f6e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002f70:	2b03      	cmp	r3, #3
 8002f72:	f040 8100 	bne.w	8003176 <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	691b      	ldr	r3, [r3, #16]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d113      	bne.n	8002fa6 <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	212c      	movs	r1, #44	; 0x2c
 8002f84:	fb01 f303 	mul.w	r3, r1, r3
 8002f88:	4413      	add	r3, r2
 8002f8a:	3355      	adds	r3, #85	; 0x55
 8002f8c:	781b      	ldrb	r3, [r3, #0]
 8002f8e:	f083 0301 	eor.w	r3, r3, #1
 8002f92:	b2d8      	uxtb	r0, r3
 8002f94:	687a      	ldr	r2, [r7, #4]
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	212c      	movs	r1, #44	; 0x2c
 8002f9a:	fb01 f303 	mul.w	r3, r1, r3
 8002f9e:	4413      	add	r3, r2
 8002fa0:	3355      	adds	r3, #85	; 0x55
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	691b      	ldr	r3, [r3, #16]
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	f040 80e3 	bne.w	8003176 <HCD_HC_OUT_IRQHandler+0x7cc>
 8002fb0:	687a      	ldr	r2, [r7, #4]
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	212c      	movs	r1, #44	; 0x2c
 8002fb6:	fb01 f303 	mul.w	r3, r1, r3
 8002fba:	4413      	add	r3, r2
 8002fbc:	334c      	adds	r3, #76	; 0x4c
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	f000 80d8 	beq.w	8003176 <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	212c      	movs	r1, #44	; 0x2c
 8002fcc:	fb01 f303 	mul.w	r3, r1, r3
 8002fd0:	4413      	add	r3, r2
 8002fd2:	334c      	adds	r3, #76	; 0x4c
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	6879      	ldr	r1, [r7, #4]
 8002fd8:	697a      	ldr	r2, [r7, #20]
 8002fda:	202c      	movs	r0, #44	; 0x2c
 8002fdc:	fb00 f202 	mul.w	r2, r0, r2
 8002fe0:	440a      	add	r2, r1
 8002fe2:	3240      	adds	r2, #64	; 0x40
 8002fe4:	8812      	ldrh	r2, [r2, #0]
 8002fe6:	4413      	add	r3, r2
 8002fe8:	3b01      	subs	r3, #1
 8002fea:	6879      	ldr	r1, [r7, #4]
 8002fec:	697a      	ldr	r2, [r7, #20]
 8002fee:	202c      	movs	r0, #44	; 0x2c
 8002ff0:	fb00 f202 	mul.w	r2, r0, r2
 8002ff4:	440a      	add	r2, r1
 8002ff6:	3240      	adds	r2, #64	; 0x40
 8002ff8:	8812      	ldrh	r2, [r2, #0]
 8002ffa:	fbb3 f3f2 	udiv	r3, r3, r2
 8002ffe:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	f003 0301 	and.w	r3, r3, #1
 8003006:	2b00      	cmp	r3, #0
 8003008:	f000 80b5 	beq.w	8003176 <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 800300c:	687a      	ldr	r2, [r7, #4]
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	212c      	movs	r1, #44	; 0x2c
 8003012:	fb01 f303 	mul.w	r3, r1, r3
 8003016:	4413      	add	r3, r2
 8003018:	3355      	adds	r3, #85	; 0x55
 800301a:	781b      	ldrb	r3, [r3, #0]
 800301c:	f083 0301 	eor.w	r3, r3, #1
 8003020:	b2d8      	uxtb	r0, r3
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	212c      	movs	r1, #44	; 0x2c
 8003028:	fb01 f303 	mul.w	r3, r1, r3
 800302c:	4413      	add	r3, r2
 800302e:	3355      	adds	r3, #85	; 0x55
 8003030:	4602      	mov	r2, r0
 8003032:	701a      	strb	r2, [r3, #0]
 8003034:	e09f      	b.n	8003176 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	212c      	movs	r1, #44	; 0x2c
 800303c:	fb01 f303 	mul.w	r3, r1, r3
 8003040:	4413      	add	r3, r2
 8003042:	3361      	adds	r3, #97	; 0x61
 8003044:	781b      	ldrb	r3, [r3, #0]
 8003046:	2b03      	cmp	r3, #3
 8003048:	d109      	bne.n	800305e <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	212c      	movs	r1, #44	; 0x2c
 8003050:	fb01 f303 	mul.w	r3, r1, r3
 8003054:	4413      	add	r3, r2
 8003056:	3360      	adds	r3, #96	; 0x60
 8003058:	2202      	movs	r2, #2
 800305a:	701a      	strb	r2, [r3, #0]
 800305c:	e08b      	b.n	8003176 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	212c      	movs	r1, #44	; 0x2c
 8003064:	fb01 f303 	mul.w	r3, r1, r3
 8003068:	4413      	add	r3, r2
 800306a:	3361      	adds	r3, #97	; 0x61
 800306c:	781b      	ldrb	r3, [r3, #0]
 800306e:	2b04      	cmp	r3, #4
 8003070:	d109      	bne.n	8003086 <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	212c      	movs	r1, #44	; 0x2c
 8003078:	fb01 f303 	mul.w	r3, r1, r3
 800307c:	4413      	add	r3, r2
 800307e:	3360      	adds	r3, #96	; 0x60
 8003080:	2202      	movs	r2, #2
 8003082:	701a      	strb	r2, [r3, #0]
 8003084:	e077      	b.n	8003176 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	212c      	movs	r1, #44	; 0x2c
 800308c:	fb01 f303 	mul.w	r3, r1, r3
 8003090:	4413      	add	r3, r2
 8003092:	3361      	adds	r3, #97	; 0x61
 8003094:	781b      	ldrb	r3, [r3, #0]
 8003096:	2b05      	cmp	r3, #5
 8003098:	d109      	bne.n	80030ae <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800309a:	687a      	ldr	r2, [r7, #4]
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	212c      	movs	r1, #44	; 0x2c
 80030a0:	fb01 f303 	mul.w	r3, r1, r3
 80030a4:	4413      	add	r3, r2
 80030a6:	3360      	adds	r3, #96	; 0x60
 80030a8:	2205      	movs	r2, #5
 80030aa:	701a      	strb	r2, [r3, #0]
 80030ac:	e063      	b.n	8003176 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	212c      	movs	r1, #44	; 0x2c
 80030b4:	fb01 f303 	mul.w	r3, r1, r3
 80030b8:	4413      	add	r3, r2
 80030ba:	3361      	adds	r3, #97	; 0x61
 80030bc:	781b      	ldrb	r3, [r3, #0]
 80030be:	2b06      	cmp	r3, #6
 80030c0:	d009      	beq.n	80030d6 <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	212c      	movs	r1, #44	; 0x2c
 80030c8:	fb01 f303 	mul.w	r3, r1, r3
 80030cc:	4413      	add	r3, r2
 80030ce:	3361      	adds	r3, #97	; 0x61
 80030d0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80030d2:	2b08      	cmp	r3, #8
 80030d4:	d14f      	bne.n	8003176 <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	212c      	movs	r1, #44	; 0x2c
 80030dc:	fb01 f303 	mul.w	r3, r1, r3
 80030e0:	4413      	add	r3, r2
 80030e2:	335c      	adds	r3, #92	; 0x5c
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	1c5a      	adds	r2, r3, #1
 80030e8:	6879      	ldr	r1, [r7, #4]
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	202c      	movs	r0, #44	; 0x2c
 80030ee:	fb00 f303 	mul.w	r3, r0, r3
 80030f2:	440b      	add	r3, r1
 80030f4:	335c      	adds	r3, #92	; 0x5c
 80030f6:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80030f8:	687a      	ldr	r2, [r7, #4]
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	212c      	movs	r1, #44	; 0x2c
 80030fe:	fb01 f303 	mul.w	r3, r1, r3
 8003102:	4413      	add	r3, r2
 8003104:	335c      	adds	r3, #92	; 0x5c
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	2b02      	cmp	r3, #2
 800310a:	d912      	bls.n	8003132 <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	212c      	movs	r1, #44	; 0x2c
 8003112:	fb01 f303 	mul.w	r3, r1, r3
 8003116:	4413      	add	r3, r2
 8003118:	335c      	adds	r3, #92	; 0x5c
 800311a:	2200      	movs	r2, #0
 800311c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	212c      	movs	r1, #44	; 0x2c
 8003124:	fb01 f303 	mul.w	r3, r1, r3
 8003128:	4413      	add	r3, r2
 800312a:	3360      	adds	r3, #96	; 0x60
 800312c:	2204      	movs	r2, #4
 800312e:	701a      	strb	r2, [r3, #0]
 8003130:	e021      	b.n	8003176 <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	212c      	movs	r1, #44	; 0x2c
 8003138:	fb01 f303 	mul.w	r3, r1, r3
 800313c:	4413      	add	r3, r2
 800313e:	3360      	adds	r3, #96	; 0x60
 8003140:	2202      	movs	r2, #2
 8003142:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	015a      	lsls	r2, r3, #5
 8003148:	69bb      	ldr	r3, [r7, #24]
 800314a:	4413      	add	r3, r2
 800314c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800315a:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003162:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	015a      	lsls	r2, r3, #5
 8003168:	69bb      	ldr	r3, [r7, #24]
 800316a:	4413      	add	r3, r2
 800316c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003170:	461a      	mov	r2, r3
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	015a      	lsls	r2, r3, #5
 800317a:	69bb      	ldr	r3, [r7, #24]
 800317c:	4413      	add	r3, r2
 800317e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003182:	461a      	mov	r2, r3
 8003184:	2302      	movs	r3, #2
 8003186:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	b2d9      	uxtb	r1, r3
 800318c:	687a      	ldr	r2, [r7, #4]
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	202c      	movs	r0, #44	; 0x2c
 8003192:	fb00 f303 	mul.w	r3, r0, r3
 8003196:	4413      	add	r3, r2
 8003198:	3360      	adds	r3, #96	; 0x60
 800319a:	781b      	ldrb	r3, [r3, #0]
 800319c:	461a      	mov	r2, r3
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f004 fcec 	bl	8007b7c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80031a4:	bf00      	nop
 80031a6:	3720      	adds	r7, #32
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}

080031ac <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b08a      	sub	sp, #40	; 0x28
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031bc:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	6a1b      	ldr	r3, [r3, #32]
 80031c4:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	f003 030f 	and.w	r3, r3, #15
 80031cc:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	0c5b      	lsrs	r3, r3, #17
 80031d2:	f003 030f 	and.w	r3, r3, #15
 80031d6:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80031d8:	69fb      	ldr	r3, [r7, #28]
 80031da:	091b      	lsrs	r3, r3, #4
 80031dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80031e0:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	2b02      	cmp	r3, #2
 80031e6:	d004      	beq.n	80031f2 <HCD_RXQLVL_IRQHandler+0x46>
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	2b05      	cmp	r3, #5
 80031ec:	f000 80a9 	beq.w	8003342 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80031f0:	e0aa      	b.n	8003348 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	f000 80a6 	beq.w	8003346 <HCD_RXQLVL_IRQHandler+0x19a>
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	69bb      	ldr	r3, [r7, #24]
 80031fe:	212c      	movs	r1, #44	; 0x2c
 8003200:	fb01 f303 	mul.w	r3, r1, r3
 8003204:	4413      	add	r3, r2
 8003206:	3344      	adds	r3, #68	; 0x44
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	2b00      	cmp	r3, #0
 800320c:	f000 809b 	beq.w	8003346 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	69bb      	ldr	r3, [r7, #24]
 8003214:	212c      	movs	r1, #44	; 0x2c
 8003216:	fb01 f303 	mul.w	r3, r1, r3
 800321a:	4413      	add	r3, r2
 800321c:	3350      	adds	r3, #80	; 0x50
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	441a      	add	r2, r3
 8003224:	6879      	ldr	r1, [r7, #4]
 8003226:	69bb      	ldr	r3, [r7, #24]
 8003228:	202c      	movs	r0, #44	; 0x2c
 800322a:	fb00 f303 	mul.w	r3, r0, r3
 800322e:	440b      	add	r3, r1
 8003230:	334c      	adds	r3, #76	; 0x4c
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	429a      	cmp	r2, r3
 8003236:	d87a      	bhi.n	800332e <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6818      	ldr	r0, [r3, #0]
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	69bb      	ldr	r3, [r7, #24]
 8003240:	212c      	movs	r1, #44	; 0x2c
 8003242:	fb01 f303 	mul.w	r3, r1, r3
 8003246:	4413      	add	r3, r2
 8003248:	3344      	adds	r3, #68	; 0x44
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	693a      	ldr	r2, [r7, #16]
 800324e:	b292      	uxth	r2, r2
 8003250:	4619      	mov	r1, r3
 8003252:	f001 fe4f 	bl	8004ef4 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	69bb      	ldr	r3, [r7, #24]
 800325a:	212c      	movs	r1, #44	; 0x2c
 800325c:	fb01 f303 	mul.w	r3, r1, r3
 8003260:	4413      	add	r3, r2
 8003262:	3344      	adds	r3, #68	; 0x44
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	441a      	add	r2, r3
 800326a:	6879      	ldr	r1, [r7, #4]
 800326c:	69bb      	ldr	r3, [r7, #24]
 800326e:	202c      	movs	r0, #44	; 0x2c
 8003270:	fb00 f303 	mul.w	r3, r0, r3
 8003274:	440b      	add	r3, r1
 8003276:	3344      	adds	r3, #68	; 0x44
 8003278:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 800327a:	687a      	ldr	r2, [r7, #4]
 800327c:	69bb      	ldr	r3, [r7, #24]
 800327e:	212c      	movs	r1, #44	; 0x2c
 8003280:	fb01 f303 	mul.w	r3, r1, r3
 8003284:	4413      	add	r3, r2
 8003286:	3350      	adds	r3, #80	; 0x50
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	441a      	add	r2, r3
 800328e:	6879      	ldr	r1, [r7, #4]
 8003290:	69bb      	ldr	r3, [r7, #24]
 8003292:	202c      	movs	r0, #44	; 0x2c
 8003294:	fb00 f303 	mul.w	r3, r0, r3
 8003298:	440b      	add	r3, r1
 800329a:	3350      	adds	r3, #80	; 0x50
 800329c:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800329e:	69bb      	ldr	r3, [r7, #24]
 80032a0:	015a      	lsls	r2, r3, #5
 80032a2:	6a3b      	ldr	r3, [r7, #32]
 80032a4:	4413      	add	r3, r2
 80032a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032aa:	691b      	ldr	r3, [r3, #16]
 80032ac:	0cdb      	lsrs	r3, r3, #19
 80032ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032b2:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80032b4:	687a      	ldr	r2, [r7, #4]
 80032b6:	69bb      	ldr	r3, [r7, #24]
 80032b8:	212c      	movs	r1, #44	; 0x2c
 80032ba:	fb01 f303 	mul.w	r3, r1, r3
 80032be:	4413      	add	r3, r2
 80032c0:	3340      	adds	r3, #64	; 0x40
 80032c2:	881b      	ldrh	r3, [r3, #0]
 80032c4:	461a      	mov	r2, r3
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d13c      	bne.n	8003346 <HCD_RXQLVL_IRQHandler+0x19a>
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d039      	beq.n	8003346 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80032d2:	69bb      	ldr	r3, [r7, #24]
 80032d4:	015a      	lsls	r2, r3, #5
 80032d6:	6a3b      	ldr	r3, [r7, #32]
 80032d8:	4413      	add	r3, r2
 80032da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80032e8:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80032f0:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80032f2:	69bb      	ldr	r3, [r7, #24]
 80032f4:	015a      	lsls	r2, r3, #5
 80032f6:	6a3b      	ldr	r3, [r7, #32]
 80032f8:	4413      	add	r3, r2
 80032fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032fe:	461a      	mov	r2, r3
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003304:	687a      	ldr	r2, [r7, #4]
 8003306:	69bb      	ldr	r3, [r7, #24]
 8003308:	212c      	movs	r1, #44	; 0x2c
 800330a:	fb01 f303 	mul.w	r3, r1, r3
 800330e:	4413      	add	r3, r2
 8003310:	3354      	adds	r3, #84	; 0x54
 8003312:	781b      	ldrb	r3, [r3, #0]
 8003314:	f083 0301 	eor.w	r3, r3, #1
 8003318:	b2d8      	uxtb	r0, r3
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	69bb      	ldr	r3, [r7, #24]
 800331e:	212c      	movs	r1, #44	; 0x2c
 8003320:	fb01 f303 	mul.w	r3, r1, r3
 8003324:	4413      	add	r3, r2
 8003326:	3354      	adds	r3, #84	; 0x54
 8003328:	4602      	mov	r2, r0
 800332a:	701a      	strb	r2, [r3, #0]
      break;
 800332c:	e00b      	b.n	8003346 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	212c      	movs	r1, #44	; 0x2c
 8003334:	fb01 f303 	mul.w	r3, r1, r3
 8003338:	4413      	add	r3, r2
 800333a:	3360      	adds	r3, #96	; 0x60
 800333c:	2204      	movs	r2, #4
 800333e:	701a      	strb	r2, [r3, #0]
      break;
 8003340:	e001      	b.n	8003346 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003342:	bf00      	nop
 8003344:	e000      	b.n	8003348 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003346:	bf00      	nop
  }
}
 8003348:	bf00      	nop
 800334a:	3728      	adds	r7, #40	; 0x28
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}

08003350 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b086      	sub	sp, #24
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800337c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	f003 0302 	and.w	r3, r3, #2
 8003384:	2b02      	cmp	r3, #2
 8003386:	d10b      	bne.n	80033a0 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	f003 0301 	and.w	r3, r3, #1
 800338e:	2b01      	cmp	r3, #1
 8003390:	d102      	bne.n	8003398 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f004 fbd6 	bl	8007b44 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	f043 0302 	orr.w	r3, r3, #2
 800339e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	f003 0308 	and.w	r3, r3, #8
 80033a6:	2b08      	cmp	r3, #8
 80033a8:	d132      	bne.n	8003410 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	f043 0308 	orr.w	r3, r3, #8
 80033b0:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	f003 0304 	and.w	r3, r3, #4
 80033b8:	2b04      	cmp	r3, #4
 80033ba:	d126      	bne.n	800340a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	699b      	ldr	r3, [r3, #24]
 80033c0:	2b02      	cmp	r3, #2
 80033c2:	d113      	bne.n	80033ec <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80033ca:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80033ce:	d106      	bne.n	80033de <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	2102      	movs	r1, #2
 80033d6:	4618      	mov	r0, r3
 80033d8:	f001 feec 	bl	80051b4 <USB_InitFSLSPClkSel>
 80033dc:	e011      	b.n	8003402 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	2101      	movs	r1, #1
 80033e4:	4618      	mov	r0, r3
 80033e6:	f001 fee5 	bl	80051b4 <USB_InitFSLSPClkSel>
 80033ea:	e00a      	b.n	8003402 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d106      	bne.n	8003402 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80033fa:	461a      	mov	r2, r3
 80033fc:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003400:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f004 fbc8 	bl	8007b98 <HAL_HCD_PortEnabled_Callback>
 8003408:	e002      	b.n	8003410 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f004 fbd2 	bl	8007bb4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	f003 0320 	and.w	r3, r3, #32
 8003416:	2b20      	cmp	r3, #32
 8003418:	d103      	bne.n	8003422 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	f043 0320 	orr.w	r3, r3, #32
 8003420:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003428:	461a      	mov	r2, r3
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	6013      	str	r3, [r2, #0]
}
 800342e:	bf00      	nop
 8003430:	3718      	adds	r7, #24
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
	...

08003438 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b084      	sub	sp, #16
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d101      	bne.n	800344a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e12b      	b.n	80036a2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003450:	b2db      	uxtb	r3, r3
 8003452:	2b00      	cmp	r3, #0
 8003454:	d106      	bne.n	8003464 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2200      	movs	r2, #0
 800345a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f7fd fd66 	bl	8000f30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2224      	movs	r2, #36	; 0x24
 8003468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f022 0201 	bic.w	r2, r2, #1
 800347a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800348a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800349a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800349c:	f001 f9fc 	bl	8004898 <HAL_RCC_GetPCLK1Freq>
 80034a0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	4a81      	ldr	r2, [pc, #516]	; (80036ac <HAL_I2C_Init+0x274>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d807      	bhi.n	80034bc <HAL_I2C_Init+0x84>
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	4a80      	ldr	r2, [pc, #512]	; (80036b0 <HAL_I2C_Init+0x278>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	bf94      	ite	ls
 80034b4:	2301      	movls	r3, #1
 80034b6:	2300      	movhi	r3, #0
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	e006      	b.n	80034ca <HAL_I2C_Init+0x92>
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	4a7d      	ldr	r2, [pc, #500]	; (80036b4 <HAL_I2C_Init+0x27c>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	bf94      	ite	ls
 80034c4:	2301      	movls	r3, #1
 80034c6:	2300      	movhi	r3, #0
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d001      	beq.n	80034d2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e0e7      	b.n	80036a2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	4a78      	ldr	r2, [pc, #480]	; (80036b8 <HAL_I2C_Init+0x280>)
 80034d6:	fba2 2303 	umull	r2, r3, r2, r3
 80034da:	0c9b      	lsrs	r3, r3, #18
 80034dc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	68ba      	ldr	r2, [r7, #8]
 80034ee:	430a      	orrs	r2, r1
 80034f0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	6a1b      	ldr	r3, [r3, #32]
 80034f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	4a6a      	ldr	r2, [pc, #424]	; (80036ac <HAL_I2C_Init+0x274>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d802      	bhi.n	800350c <HAL_I2C_Init+0xd4>
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	3301      	adds	r3, #1
 800350a:	e009      	b.n	8003520 <HAL_I2C_Init+0xe8>
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003512:	fb02 f303 	mul.w	r3, r2, r3
 8003516:	4a69      	ldr	r2, [pc, #420]	; (80036bc <HAL_I2C_Init+0x284>)
 8003518:	fba2 2303 	umull	r2, r3, r2, r3
 800351c:	099b      	lsrs	r3, r3, #6
 800351e:	3301      	adds	r3, #1
 8003520:	687a      	ldr	r2, [r7, #4]
 8003522:	6812      	ldr	r2, [r2, #0]
 8003524:	430b      	orrs	r3, r1
 8003526:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	69db      	ldr	r3, [r3, #28]
 800352e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003532:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	495c      	ldr	r1, [pc, #368]	; (80036ac <HAL_I2C_Init+0x274>)
 800353c:	428b      	cmp	r3, r1
 800353e:	d819      	bhi.n	8003574 <HAL_I2C_Init+0x13c>
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	1e59      	subs	r1, r3, #1
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	005b      	lsls	r3, r3, #1
 800354a:	fbb1 f3f3 	udiv	r3, r1, r3
 800354e:	1c59      	adds	r1, r3, #1
 8003550:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003554:	400b      	ands	r3, r1
 8003556:	2b00      	cmp	r3, #0
 8003558:	d00a      	beq.n	8003570 <HAL_I2C_Init+0x138>
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	1e59      	subs	r1, r3, #1
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	005b      	lsls	r3, r3, #1
 8003564:	fbb1 f3f3 	udiv	r3, r1, r3
 8003568:	3301      	adds	r3, #1
 800356a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800356e:	e051      	b.n	8003614 <HAL_I2C_Init+0x1dc>
 8003570:	2304      	movs	r3, #4
 8003572:	e04f      	b.n	8003614 <HAL_I2C_Init+0x1dc>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d111      	bne.n	80035a0 <HAL_I2C_Init+0x168>
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	1e58      	subs	r0, r3, #1
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6859      	ldr	r1, [r3, #4]
 8003584:	460b      	mov	r3, r1
 8003586:	005b      	lsls	r3, r3, #1
 8003588:	440b      	add	r3, r1
 800358a:	fbb0 f3f3 	udiv	r3, r0, r3
 800358e:	3301      	adds	r3, #1
 8003590:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003594:	2b00      	cmp	r3, #0
 8003596:	bf0c      	ite	eq
 8003598:	2301      	moveq	r3, #1
 800359a:	2300      	movne	r3, #0
 800359c:	b2db      	uxtb	r3, r3
 800359e:	e012      	b.n	80035c6 <HAL_I2C_Init+0x18e>
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	1e58      	subs	r0, r3, #1
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6859      	ldr	r1, [r3, #4]
 80035a8:	460b      	mov	r3, r1
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	440b      	add	r3, r1
 80035ae:	0099      	lsls	r1, r3, #2
 80035b0:	440b      	add	r3, r1
 80035b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80035b6:	3301      	adds	r3, #1
 80035b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035bc:	2b00      	cmp	r3, #0
 80035be:	bf0c      	ite	eq
 80035c0:	2301      	moveq	r3, #1
 80035c2:	2300      	movne	r3, #0
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d001      	beq.n	80035ce <HAL_I2C_Init+0x196>
 80035ca:	2301      	movs	r3, #1
 80035cc:	e022      	b.n	8003614 <HAL_I2C_Init+0x1dc>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d10e      	bne.n	80035f4 <HAL_I2C_Init+0x1bc>
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	1e58      	subs	r0, r3, #1
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6859      	ldr	r1, [r3, #4]
 80035de:	460b      	mov	r3, r1
 80035e0:	005b      	lsls	r3, r3, #1
 80035e2:	440b      	add	r3, r1
 80035e4:	fbb0 f3f3 	udiv	r3, r0, r3
 80035e8:	3301      	adds	r3, #1
 80035ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035f2:	e00f      	b.n	8003614 <HAL_I2C_Init+0x1dc>
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	1e58      	subs	r0, r3, #1
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6859      	ldr	r1, [r3, #4]
 80035fc:	460b      	mov	r3, r1
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	440b      	add	r3, r1
 8003602:	0099      	lsls	r1, r3, #2
 8003604:	440b      	add	r3, r1
 8003606:	fbb0 f3f3 	udiv	r3, r0, r3
 800360a:	3301      	adds	r3, #1
 800360c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003610:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003614:	6879      	ldr	r1, [r7, #4]
 8003616:	6809      	ldr	r1, [r1, #0]
 8003618:	4313      	orrs	r3, r2
 800361a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	69da      	ldr	r2, [r3, #28]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6a1b      	ldr	r3, [r3, #32]
 800362e:	431a      	orrs	r2, r3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	430a      	orrs	r2, r1
 8003636:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003642:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	6911      	ldr	r1, [r2, #16]
 800364a:	687a      	ldr	r2, [r7, #4]
 800364c:	68d2      	ldr	r2, [r2, #12]
 800364e:	4311      	orrs	r1, r2
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	6812      	ldr	r2, [r2, #0]
 8003654:	430b      	orrs	r3, r1
 8003656:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	68db      	ldr	r3, [r3, #12]
 800365e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	695a      	ldr	r2, [r3, #20]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	699b      	ldr	r3, [r3, #24]
 800366a:	431a      	orrs	r2, r3
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	430a      	orrs	r2, r1
 8003672:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f042 0201 	orr.w	r2, r2, #1
 8003682:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2200      	movs	r2, #0
 8003688:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2220      	movs	r2, #32
 800368e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2200      	movs	r2, #0
 8003696:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2200      	movs	r2, #0
 800369c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80036a0:	2300      	movs	r3, #0
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3710      	adds	r7, #16
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	bf00      	nop
 80036ac:	000186a0 	.word	0x000186a0
 80036b0:	001e847f 	.word	0x001e847f
 80036b4:	003d08ff 	.word	0x003d08ff
 80036b8:	431bde83 	.word	0x431bde83
 80036bc:	10624dd3 	.word	0x10624dd3

080036c0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b088      	sub	sp, #32
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d101      	bne.n	80036d2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e128      	b.n	8003924 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d109      	bne.n	80036f2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2200      	movs	r2, #0
 80036e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4a90      	ldr	r2, [pc, #576]	; (800392c <HAL_I2S_Init+0x26c>)
 80036ea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	f7fd fc67 	bl	8000fc0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2202      	movs	r2, #2
 80036f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	69db      	ldr	r3, [r3, #28]
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	6812      	ldr	r2, [r2, #0]
 8003704:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003708:	f023 030f 	bic.w	r3, r3, #15
 800370c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	2202      	movs	r2, #2
 8003714:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	695b      	ldr	r3, [r3, #20]
 800371a:	2b02      	cmp	r3, #2
 800371c:	d060      	beq.n	80037e0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	68db      	ldr	r3, [r3, #12]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d102      	bne.n	800372c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003726:	2310      	movs	r3, #16
 8003728:	617b      	str	r3, [r7, #20]
 800372a:	e001      	b.n	8003730 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800372c:	2320      	movs	r3, #32
 800372e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	2b20      	cmp	r3, #32
 8003736:	d802      	bhi.n	800373e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	005b      	lsls	r3, r3, #1
 800373c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800373e:	2001      	movs	r0, #1
 8003740:	f001 f9a0 	bl	8004a84 <HAL_RCCEx_GetPeriphCLKFreq>
 8003744:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	691b      	ldr	r3, [r3, #16]
 800374a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800374e:	d125      	bne.n	800379c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d010      	beq.n	800377a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	68fa      	ldr	r2, [r7, #12]
 800375e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003762:	4613      	mov	r3, r2
 8003764:	009b      	lsls	r3, r3, #2
 8003766:	4413      	add	r3, r2
 8003768:	005b      	lsls	r3, r3, #1
 800376a:	461a      	mov	r2, r3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	695b      	ldr	r3, [r3, #20]
 8003770:	fbb2 f3f3 	udiv	r3, r2, r3
 8003774:	3305      	adds	r3, #5
 8003776:	613b      	str	r3, [r7, #16]
 8003778:	e01f      	b.n	80037ba <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	00db      	lsls	r3, r3, #3
 800377e:	68fa      	ldr	r2, [r7, #12]
 8003780:	fbb2 f2f3 	udiv	r2, r2, r3
 8003784:	4613      	mov	r3, r2
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	4413      	add	r3, r2
 800378a:	005b      	lsls	r3, r3, #1
 800378c:	461a      	mov	r2, r3
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	695b      	ldr	r3, [r3, #20]
 8003792:	fbb2 f3f3 	udiv	r3, r2, r3
 8003796:	3305      	adds	r3, #5
 8003798:	613b      	str	r3, [r7, #16]
 800379a:	e00e      	b.n	80037ba <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800379c:	68fa      	ldr	r2, [r7, #12]
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80037a4:	4613      	mov	r3, r2
 80037a6:	009b      	lsls	r3, r3, #2
 80037a8:	4413      	add	r3, r2
 80037aa:	005b      	lsls	r3, r3, #1
 80037ac:	461a      	mov	r2, r3
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	695b      	ldr	r3, [r3, #20]
 80037b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80037b6:	3305      	adds	r3, #5
 80037b8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	4a5c      	ldr	r2, [pc, #368]	; (8003930 <HAL_I2S_Init+0x270>)
 80037be:	fba2 2303 	umull	r2, r3, r2, r3
 80037c2:	08db      	lsrs	r3, r3, #3
 80037c4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	f003 0301 	and.w	r3, r3, #1
 80037cc:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80037ce:	693a      	ldr	r2, [r7, #16]
 80037d0:	69bb      	ldr	r3, [r7, #24]
 80037d2:	1ad3      	subs	r3, r2, r3
 80037d4:	085b      	lsrs	r3, r3, #1
 80037d6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80037d8:	69bb      	ldr	r3, [r7, #24]
 80037da:	021b      	lsls	r3, r3, #8
 80037dc:	61bb      	str	r3, [r7, #24]
 80037de:	e003      	b.n	80037e8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80037e0:	2302      	movs	r3, #2
 80037e2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80037e4:	2300      	movs	r3, #0
 80037e6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d902      	bls.n	80037f4 <HAL_I2S_Init+0x134>
 80037ee:	69fb      	ldr	r3, [r7, #28]
 80037f0:	2bff      	cmp	r3, #255	; 0xff
 80037f2:	d907      	bls.n	8003804 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037f8:	f043 0210 	orr.w	r2, r3, #16
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	e08f      	b.n	8003924 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	691a      	ldr	r2, [r3, #16]
 8003808:	69bb      	ldr	r3, [r7, #24]
 800380a:	ea42 0103 	orr.w	r1, r2, r3
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	69fa      	ldr	r2, [r7, #28]
 8003814:	430a      	orrs	r2, r1
 8003816:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	69db      	ldr	r3, [r3, #28]
 800381e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003822:	f023 030f 	bic.w	r3, r3, #15
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	6851      	ldr	r1, [r2, #4]
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	6892      	ldr	r2, [r2, #8]
 800382e:	4311      	orrs	r1, r2
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	68d2      	ldr	r2, [r2, #12]
 8003834:	4311      	orrs	r1, r2
 8003836:	687a      	ldr	r2, [r7, #4]
 8003838:	6992      	ldr	r2, [r2, #24]
 800383a:	430a      	orrs	r2, r1
 800383c:	431a      	orrs	r2, r3
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003846:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6a1b      	ldr	r3, [r3, #32]
 800384c:	2b01      	cmp	r3, #1
 800384e:	d161      	bne.n	8003914 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	4a38      	ldr	r2, [pc, #224]	; (8003934 <HAL_I2S_Init+0x274>)
 8003854:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a37      	ldr	r2, [pc, #220]	; (8003938 <HAL_I2S_Init+0x278>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d101      	bne.n	8003864 <HAL_I2S_Init+0x1a4>
 8003860:	4b36      	ldr	r3, [pc, #216]	; (800393c <HAL_I2S_Init+0x27c>)
 8003862:	e001      	b.n	8003868 <HAL_I2S_Init+0x1a8>
 8003864:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003868:	69db      	ldr	r3, [r3, #28]
 800386a:	687a      	ldr	r2, [r7, #4]
 800386c:	6812      	ldr	r2, [r2, #0]
 800386e:	4932      	ldr	r1, [pc, #200]	; (8003938 <HAL_I2S_Init+0x278>)
 8003870:	428a      	cmp	r2, r1
 8003872:	d101      	bne.n	8003878 <HAL_I2S_Init+0x1b8>
 8003874:	4a31      	ldr	r2, [pc, #196]	; (800393c <HAL_I2S_Init+0x27c>)
 8003876:	e001      	b.n	800387c <HAL_I2S_Init+0x1bc>
 8003878:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800387c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003880:	f023 030f 	bic.w	r3, r3, #15
 8003884:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a2b      	ldr	r2, [pc, #172]	; (8003938 <HAL_I2S_Init+0x278>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d101      	bne.n	8003894 <HAL_I2S_Init+0x1d4>
 8003890:	4b2a      	ldr	r3, [pc, #168]	; (800393c <HAL_I2S_Init+0x27c>)
 8003892:	e001      	b.n	8003898 <HAL_I2S_Init+0x1d8>
 8003894:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003898:	2202      	movs	r2, #2
 800389a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a25      	ldr	r2, [pc, #148]	; (8003938 <HAL_I2S_Init+0x278>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d101      	bne.n	80038aa <HAL_I2S_Init+0x1ea>
 80038a6:	4b25      	ldr	r3, [pc, #148]	; (800393c <HAL_I2S_Init+0x27c>)
 80038a8:	e001      	b.n	80038ae <HAL_I2S_Init+0x1ee>
 80038aa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038ae:	69db      	ldr	r3, [r3, #28]
 80038b0:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038ba:	d003      	beq.n	80038c4 <HAL_I2S_Init+0x204>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d103      	bne.n	80038cc <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80038c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80038c8:	613b      	str	r3, [r7, #16]
 80038ca:	e001      	b.n	80038d0 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80038cc:	2300      	movs	r3, #0
 80038ce:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80038da:	4313      	orrs	r3, r2
 80038dc:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	68db      	ldr	r3, [r3, #12]
 80038e2:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80038e4:	4313      	orrs	r3, r2
 80038e6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	699b      	ldr	r3, [r3, #24]
 80038ec:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80038ee:	4313      	orrs	r3, r2
 80038f0:	b29a      	uxth	r2, r3
 80038f2:	897b      	ldrh	r3, [r7, #10]
 80038f4:	4313      	orrs	r3, r2
 80038f6:	b29b      	uxth	r3, r3
 80038f8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80038fc:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a0d      	ldr	r2, [pc, #52]	; (8003938 <HAL_I2S_Init+0x278>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d101      	bne.n	800390c <HAL_I2S_Init+0x24c>
 8003908:	4b0c      	ldr	r3, [pc, #48]	; (800393c <HAL_I2S_Init+0x27c>)
 800390a:	e001      	b.n	8003910 <HAL_I2S_Init+0x250>
 800390c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003910:	897a      	ldrh	r2, [r7, #10]
 8003912:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2200      	movs	r2, #0
 8003918:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2201      	movs	r2, #1
 800391e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003922:	2300      	movs	r3, #0
}
 8003924:	4618      	mov	r0, r3
 8003926:	3720      	adds	r7, #32
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}
 800392c:	08003a37 	.word	0x08003a37
 8003930:	cccccccd 	.word	0xcccccccd
 8003934:	08003b4d 	.word	0x08003b4d
 8003938:	40003800 	.word	0x40003800
 800393c:	40003400 	.word	0x40003400

08003940 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003940:	b480      	push	{r7}
 8003942:	b083      	sub	sp, #12
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003948:	bf00      	nop
 800394a:	370c      	adds	r7, #12
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr

08003954 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003954:	b480      	push	{r7}
 8003956:	b083      	sub	sp, #12
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800395c:	bf00      	nop
 800395e:	370c      	adds	r7, #12
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr

08003968 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003968:	b480      	push	{r7}
 800396a:	b083      	sub	sp, #12
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003970:	bf00      	nop
 8003972:	370c      	adds	r7, #12
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr

0800397c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b082      	sub	sp, #8
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003988:	881a      	ldrh	r2, [r3, #0]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003994:	1c9a      	adds	r2, r3, #2
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800399e:	b29b      	uxth	r3, r3
 80039a0:	3b01      	subs	r3, #1
 80039a2:	b29a      	uxth	r2, r3
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ac:	b29b      	uxth	r3, r3
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d10e      	bne.n	80039d0 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	685a      	ldr	r2, [r3, #4]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80039c0:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2201      	movs	r2, #1
 80039c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f7ff ffb8 	bl	8003940 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80039d0:	bf00      	nop
 80039d2:	3708      	adds	r7, #8
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}

080039d8 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b082      	sub	sp, #8
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	68da      	ldr	r2, [r3, #12]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ea:	b292      	uxth	r2, r2
 80039ec:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f2:	1c9a      	adds	r2, r3, #2
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80039fc:	b29b      	uxth	r3, r3
 80039fe:	3b01      	subs	r3, #1
 8003a00:	b29a      	uxth	r2, r3
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a0a:	b29b      	uxth	r3, r3
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d10e      	bne.n	8003a2e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	685a      	ldr	r2, [r3, #4]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a1e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2201      	movs	r2, #1
 8003a24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	f7ff ff93 	bl	8003954 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003a2e:	bf00      	nop
 8003a30:	3708      	adds	r7, #8
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}

08003a36 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003a36:	b580      	push	{r7, lr}
 8003a38:	b086      	sub	sp, #24
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	2b04      	cmp	r3, #4
 8003a50:	d13a      	bne.n	8003ac8 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	f003 0301 	and.w	r3, r3, #1
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d109      	bne.n	8003a70 <I2S_IRQHandler+0x3a>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a66:	2b40      	cmp	r3, #64	; 0x40
 8003a68:	d102      	bne.n	8003a70 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f7ff ffb4 	bl	80039d8 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a76:	2b40      	cmp	r3, #64	; 0x40
 8003a78:	d126      	bne.n	8003ac8 <I2S_IRQHandler+0x92>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	f003 0320 	and.w	r3, r3, #32
 8003a84:	2b20      	cmp	r3, #32
 8003a86:	d11f      	bne.n	8003ac8 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	685a      	ldr	r2, [r3, #4]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a96:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003a98:	2300      	movs	r3, #0
 8003a9a:	613b      	str	r3, [r7, #16]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	68db      	ldr	r3, [r3, #12]
 8003aa2:	613b      	str	r3, [r7, #16]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	613b      	str	r3, [r7, #16]
 8003aac:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aba:	f043 0202 	orr.w	r2, r3, #2
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f7ff ff50 	bl	8003968 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	2b03      	cmp	r3, #3
 8003ad2:	d136      	bne.n	8003b42 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	f003 0302 	and.w	r3, r3, #2
 8003ada:	2b02      	cmp	r3, #2
 8003adc:	d109      	bne.n	8003af2 <I2S_IRQHandler+0xbc>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ae8:	2b80      	cmp	r3, #128	; 0x80
 8003aea:	d102      	bne.n	8003af2 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f7ff ff45 	bl	800397c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	f003 0308 	and.w	r3, r3, #8
 8003af8:	2b08      	cmp	r3, #8
 8003afa:	d122      	bne.n	8003b42 <I2S_IRQHandler+0x10c>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	f003 0320 	and.w	r3, r3, #32
 8003b06:	2b20      	cmp	r3, #32
 8003b08:	d11b      	bne.n	8003b42 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	685a      	ldr	r2, [r3, #4]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b18:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	60fb      	str	r3, [r7, #12]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	60fb      	str	r3, [r7, #12]
 8003b26:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b34:	f043 0204 	orr.w	r2, r3, #4
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	f7ff ff13 	bl	8003968 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003b42:	bf00      	nop
 8003b44:	3718      	adds	r7, #24
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
	...

08003b4c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b088      	sub	sp, #32
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4aa2      	ldr	r2, [pc, #648]	; (8003dec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d101      	bne.n	8003b6a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003b66:	4ba2      	ldr	r3, [pc, #648]	; (8003df0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003b68:	e001      	b.n	8003b6e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003b6a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a9b      	ldr	r2, [pc, #620]	; (8003dec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d101      	bne.n	8003b88 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003b84:	4b9a      	ldr	r3, [pc, #616]	; (8003df0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003b86:	e001      	b.n	8003b8c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003b88:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b98:	d004      	beq.n	8003ba4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	f040 8099 	bne.w	8003cd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003ba4:	69fb      	ldr	r3, [r7, #28]
 8003ba6:	f003 0302 	and.w	r3, r3, #2
 8003baa:	2b02      	cmp	r3, #2
 8003bac:	d107      	bne.n	8003bbe <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d002      	beq.n	8003bbe <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	f000 f925 	bl	8003e08 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003bbe:	69bb      	ldr	r3, [r7, #24]
 8003bc0:	f003 0301 	and.w	r3, r3, #1
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d107      	bne.n	8003bd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d002      	beq.n	8003bd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f000 f9c8 	bl	8003f68 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003bd8:	69bb      	ldr	r3, [r7, #24]
 8003bda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bde:	2b40      	cmp	r3, #64	; 0x40
 8003be0:	d13a      	bne.n	8003c58 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	f003 0320 	and.w	r3, r3, #32
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d035      	beq.n	8003c58 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a7e      	ldr	r2, [pc, #504]	; (8003dec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d101      	bne.n	8003bfa <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003bf6:	4b7e      	ldr	r3, [pc, #504]	; (8003df0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003bf8:	e001      	b.n	8003bfe <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003bfa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bfe:	685a      	ldr	r2, [r3, #4]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4979      	ldr	r1, [pc, #484]	; (8003dec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003c06:	428b      	cmp	r3, r1
 8003c08:	d101      	bne.n	8003c0e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003c0a:	4b79      	ldr	r3, [pc, #484]	; (8003df0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003c0c:	e001      	b.n	8003c12 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003c0e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c12:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003c16:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	685a      	ldr	r2, [r3, #4]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003c26:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003c28:	2300      	movs	r3, #0
 8003c2a:	60fb      	str	r3, [r7, #12]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	68db      	ldr	r3, [r3, #12]
 8003c32:	60fb      	str	r3, [r7, #12]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	60fb      	str	r3, [r7, #12]
 8003c3c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2201      	movs	r2, #1
 8003c42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c4a:	f043 0202 	orr.w	r2, r3, #2
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f7ff fe88 	bl	8003968 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003c58:	69fb      	ldr	r3, [r7, #28]
 8003c5a:	f003 0308 	and.w	r3, r3, #8
 8003c5e:	2b08      	cmp	r3, #8
 8003c60:	f040 80be 	bne.w	8003de0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	f003 0320 	and.w	r3, r3, #32
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	f000 80b8 	beq.w	8003de0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	685a      	ldr	r2, [r3, #4]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003c7e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a59      	ldr	r2, [pc, #356]	; (8003dec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d101      	bne.n	8003c8e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003c8a:	4b59      	ldr	r3, [pc, #356]	; (8003df0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003c8c:	e001      	b.n	8003c92 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003c8e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c92:	685a      	ldr	r2, [r3, #4]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4954      	ldr	r1, [pc, #336]	; (8003dec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003c9a:	428b      	cmp	r3, r1
 8003c9c:	d101      	bne.n	8003ca2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003c9e:	4b54      	ldr	r3, [pc, #336]	; (8003df0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003ca0:	e001      	b.n	8003ca6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003ca2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ca6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003caa:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003cac:	2300      	movs	r3, #0
 8003cae:	60bb      	str	r3, [r7, #8]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	60bb      	str	r3, [r7, #8]
 8003cb8:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cc6:	f043 0204 	orr.w	r2, r3, #4
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f7ff fe4a 	bl	8003968 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003cd4:	e084      	b.n	8003de0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003cd6:	69bb      	ldr	r3, [r7, #24]
 8003cd8:	f003 0302 	and.w	r3, r3, #2
 8003cdc:	2b02      	cmp	r3, #2
 8003cde:	d107      	bne.n	8003cf0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d002      	beq.n	8003cf0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f000 f8be 	bl	8003e6c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003cf0:	69fb      	ldr	r3, [r7, #28]
 8003cf2:	f003 0301 	and.w	r3, r3, #1
 8003cf6:	2b01      	cmp	r3, #1
 8003cf8:	d107      	bne.n	8003d0a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d002      	beq.n	8003d0a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	f000 f8fd 	bl	8003f04 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003d0a:	69fb      	ldr	r3, [r7, #28]
 8003d0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d10:	2b40      	cmp	r3, #64	; 0x40
 8003d12:	d12f      	bne.n	8003d74 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	f003 0320 	and.w	r3, r3, #32
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d02a      	beq.n	8003d74 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	685a      	ldr	r2, [r3, #4]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003d2c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a2e      	ldr	r2, [pc, #184]	; (8003dec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d101      	bne.n	8003d3c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003d38:	4b2d      	ldr	r3, [pc, #180]	; (8003df0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003d3a:	e001      	b.n	8003d40 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003d3c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d40:	685a      	ldr	r2, [r3, #4]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4929      	ldr	r1, [pc, #164]	; (8003dec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003d48:	428b      	cmp	r3, r1
 8003d4a:	d101      	bne.n	8003d50 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003d4c:	4b28      	ldr	r3, [pc, #160]	; (8003df0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003d4e:	e001      	b.n	8003d54 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003d50:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d54:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003d58:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d66:	f043 0202 	orr.w	r2, r3, #2
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f7ff fdfa 	bl	8003968 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003d74:	69bb      	ldr	r3, [r7, #24]
 8003d76:	f003 0308 	and.w	r3, r3, #8
 8003d7a:	2b08      	cmp	r3, #8
 8003d7c:	d131      	bne.n	8003de2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	f003 0320 	and.w	r3, r3, #32
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d02c      	beq.n	8003de2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a17      	ldr	r2, [pc, #92]	; (8003dec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d101      	bne.n	8003d96 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003d92:	4b17      	ldr	r3, [pc, #92]	; (8003df0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003d94:	e001      	b.n	8003d9a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003d96:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d9a:	685a      	ldr	r2, [r3, #4]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4912      	ldr	r1, [pc, #72]	; (8003dec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003da2:	428b      	cmp	r3, r1
 8003da4:	d101      	bne.n	8003daa <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8003da6:	4b12      	ldr	r3, [pc, #72]	; (8003df0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003da8:	e001      	b.n	8003dae <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8003daa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003dae:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003db2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	685a      	ldr	r2, [r3, #4]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003dc2:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dd0:	f043 0204 	orr.w	r2, r3, #4
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	f7ff fdc5 	bl	8003968 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003dde:	e000      	b.n	8003de2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003de0:	bf00      	nop
}
 8003de2:	bf00      	nop
 8003de4:	3720      	adds	r7, #32
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	bf00      	nop
 8003dec:	40003800 	.word	0x40003800
 8003df0:	40003400 	.word	0x40003400

08003df4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b083      	sub	sp, #12
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003dfc:	bf00      	nop
 8003dfe:	370c      	adds	r7, #12
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr

08003e08 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b082      	sub	sp, #8
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e14:	1c99      	adds	r1, r3, #2
 8003e16:	687a      	ldr	r2, [r7, #4]
 8003e18:	6251      	str	r1, [r2, #36]	; 0x24
 8003e1a:	881a      	ldrh	r2, [r3, #0]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e26:	b29b      	uxth	r3, r3
 8003e28:	3b01      	subs	r3, #1
 8003e2a:	b29a      	uxth	r2, r3
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e34:	b29b      	uxth	r3, r3
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d113      	bne.n	8003e62 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	685a      	ldr	r2, [r3, #4]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003e48:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d106      	bne.n	8003e62 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2201      	movs	r2, #1
 8003e58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f7ff ffc9 	bl	8003df4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003e62:	bf00      	nop
 8003e64:	3708      	adds	r7, #8
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}
	...

08003e6c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b082      	sub	sp, #8
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e78:	1c99      	adds	r1, r3, #2
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	6251      	str	r1, [r2, #36]	; 0x24
 8003e7e:	8819      	ldrh	r1, [r3, #0]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a1d      	ldr	r2, [pc, #116]	; (8003efc <I2SEx_TxISR_I2SExt+0x90>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d101      	bne.n	8003e8e <I2SEx_TxISR_I2SExt+0x22>
 8003e8a:	4b1d      	ldr	r3, [pc, #116]	; (8003f00 <I2SEx_TxISR_I2SExt+0x94>)
 8003e8c:	e001      	b.n	8003e92 <I2SEx_TxISR_I2SExt+0x26>
 8003e8e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e92:	460a      	mov	r2, r1
 8003e94:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	3b01      	subs	r3, #1
 8003e9e:	b29a      	uxth	r2, r3
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ea8:	b29b      	uxth	r3, r3
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d121      	bne.n	8003ef2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a12      	ldr	r2, [pc, #72]	; (8003efc <I2SEx_TxISR_I2SExt+0x90>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d101      	bne.n	8003ebc <I2SEx_TxISR_I2SExt+0x50>
 8003eb8:	4b11      	ldr	r3, [pc, #68]	; (8003f00 <I2SEx_TxISR_I2SExt+0x94>)
 8003eba:	e001      	b.n	8003ec0 <I2SEx_TxISR_I2SExt+0x54>
 8003ebc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ec0:	685a      	ldr	r2, [r3, #4]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	490d      	ldr	r1, [pc, #52]	; (8003efc <I2SEx_TxISR_I2SExt+0x90>)
 8003ec8:	428b      	cmp	r3, r1
 8003eca:	d101      	bne.n	8003ed0 <I2SEx_TxISR_I2SExt+0x64>
 8003ecc:	4b0c      	ldr	r3, [pc, #48]	; (8003f00 <I2SEx_TxISR_I2SExt+0x94>)
 8003ece:	e001      	b.n	8003ed4 <I2SEx_TxISR_I2SExt+0x68>
 8003ed0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ed4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003ed8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003ede:	b29b      	uxth	r3, r3
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d106      	bne.n	8003ef2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	f7ff ff81 	bl	8003df4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003ef2:	bf00      	nop
 8003ef4:	3708      	adds	r7, #8
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}
 8003efa:	bf00      	nop
 8003efc:	40003800 	.word	0x40003800
 8003f00:	40003400 	.word	0x40003400

08003f04 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b082      	sub	sp, #8
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	68d8      	ldr	r0, [r3, #12]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f16:	1c99      	adds	r1, r3, #2
 8003f18:	687a      	ldr	r2, [r7, #4]
 8003f1a:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003f1c:	b282      	uxth	r2, r0
 8003f1e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003f24:	b29b      	uxth	r3, r3
 8003f26:	3b01      	subs	r3, #1
 8003f28:	b29a      	uxth	r2, r3
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d113      	bne.n	8003f60 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	685a      	ldr	r2, [r3, #4]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003f46:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f4c:	b29b      	uxth	r3, r3
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d106      	bne.n	8003f60 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2201      	movs	r2, #1
 8003f56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f7ff ff4a 	bl	8003df4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003f60:	bf00      	nop
 8003f62:	3708      	adds	r7, #8
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}

08003f68 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b082      	sub	sp, #8
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a20      	ldr	r2, [pc, #128]	; (8003ff8 <I2SEx_RxISR_I2SExt+0x90>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d101      	bne.n	8003f7e <I2SEx_RxISR_I2SExt+0x16>
 8003f7a:	4b20      	ldr	r3, [pc, #128]	; (8003ffc <I2SEx_RxISR_I2SExt+0x94>)
 8003f7c:	e001      	b.n	8003f82 <I2SEx_RxISR_I2SExt+0x1a>
 8003f7e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f82:	68d8      	ldr	r0, [r3, #12]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f88:	1c99      	adds	r1, r3, #2
 8003f8a:	687a      	ldr	r2, [r7, #4]
 8003f8c:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003f8e:	b282      	uxth	r2, r0
 8003f90:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	3b01      	subs	r3, #1
 8003f9a:	b29a      	uxth	r2, r3
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003fa4:	b29b      	uxth	r3, r3
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d121      	bne.n	8003fee <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a12      	ldr	r2, [pc, #72]	; (8003ff8 <I2SEx_RxISR_I2SExt+0x90>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d101      	bne.n	8003fb8 <I2SEx_RxISR_I2SExt+0x50>
 8003fb4:	4b11      	ldr	r3, [pc, #68]	; (8003ffc <I2SEx_RxISR_I2SExt+0x94>)
 8003fb6:	e001      	b.n	8003fbc <I2SEx_RxISR_I2SExt+0x54>
 8003fb8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003fbc:	685a      	ldr	r2, [r3, #4]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	490d      	ldr	r1, [pc, #52]	; (8003ff8 <I2SEx_RxISR_I2SExt+0x90>)
 8003fc4:	428b      	cmp	r3, r1
 8003fc6:	d101      	bne.n	8003fcc <I2SEx_RxISR_I2SExt+0x64>
 8003fc8:	4b0c      	ldr	r3, [pc, #48]	; (8003ffc <I2SEx_RxISR_I2SExt+0x94>)
 8003fca:	e001      	b.n	8003fd0 <I2SEx_RxISR_I2SExt+0x68>
 8003fcc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003fd0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003fd4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fda:	b29b      	uxth	r3, r3
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d106      	bne.n	8003fee <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	f7ff ff03 	bl	8003df4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003fee:	bf00      	nop
 8003ff0:	3708      	adds	r7, #8
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}
 8003ff6:	bf00      	nop
 8003ff8:	40003800 	.word	0x40003800
 8003ffc:	40003400 	.word	0x40003400

08004000 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b086      	sub	sp, #24
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d101      	bne.n	8004012 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e264      	b.n	80044dc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 0301 	and.w	r3, r3, #1
 800401a:	2b00      	cmp	r3, #0
 800401c:	d075      	beq.n	800410a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800401e:	4ba3      	ldr	r3, [pc, #652]	; (80042ac <HAL_RCC_OscConfig+0x2ac>)
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	f003 030c 	and.w	r3, r3, #12
 8004026:	2b04      	cmp	r3, #4
 8004028:	d00c      	beq.n	8004044 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800402a:	4ba0      	ldr	r3, [pc, #640]	; (80042ac <HAL_RCC_OscConfig+0x2ac>)
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004032:	2b08      	cmp	r3, #8
 8004034:	d112      	bne.n	800405c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004036:	4b9d      	ldr	r3, [pc, #628]	; (80042ac <HAL_RCC_OscConfig+0x2ac>)
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800403e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004042:	d10b      	bne.n	800405c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004044:	4b99      	ldr	r3, [pc, #612]	; (80042ac <HAL_RCC_OscConfig+0x2ac>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800404c:	2b00      	cmp	r3, #0
 800404e:	d05b      	beq.n	8004108 <HAL_RCC_OscConfig+0x108>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d157      	bne.n	8004108 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	e23f      	b.n	80044dc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004064:	d106      	bne.n	8004074 <HAL_RCC_OscConfig+0x74>
 8004066:	4b91      	ldr	r3, [pc, #580]	; (80042ac <HAL_RCC_OscConfig+0x2ac>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a90      	ldr	r2, [pc, #576]	; (80042ac <HAL_RCC_OscConfig+0x2ac>)
 800406c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004070:	6013      	str	r3, [r2, #0]
 8004072:	e01d      	b.n	80040b0 <HAL_RCC_OscConfig+0xb0>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800407c:	d10c      	bne.n	8004098 <HAL_RCC_OscConfig+0x98>
 800407e:	4b8b      	ldr	r3, [pc, #556]	; (80042ac <HAL_RCC_OscConfig+0x2ac>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a8a      	ldr	r2, [pc, #552]	; (80042ac <HAL_RCC_OscConfig+0x2ac>)
 8004084:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004088:	6013      	str	r3, [r2, #0]
 800408a:	4b88      	ldr	r3, [pc, #544]	; (80042ac <HAL_RCC_OscConfig+0x2ac>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a87      	ldr	r2, [pc, #540]	; (80042ac <HAL_RCC_OscConfig+0x2ac>)
 8004090:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004094:	6013      	str	r3, [r2, #0]
 8004096:	e00b      	b.n	80040b0 <HAL_RCC_OscConfig+0xb0>
 8004098:	4b84      	ldr	r3, [pc, #528]	; (80042ac <HAL_RCC_OscConfig+0x2ac>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a83      	ldr	r2, [pc, #524]	; (80042ac <HAL_RCC_OscConfig+0x2ac>)
 800409e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040a2:	6013      	str	r3, [r2, #0]
 80040a4:	4b81      	ldr	r3, [pc, #516]	; (80042ac <HAL_RCC_OscConfig+0x2ac>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a80      	ldr	r2, [pc, #512]	; (80042ac <HAL_RCC_OscConfig+0x2ac>)
 80040aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d013      	beq.n	80040e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040b8:	f7fd f956 	bl	8001368 <HAL_GetTick>
 80040bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040be:	e008      	b.n	80040d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040c0:	f7fd f952 	bl	8001368 <HAL_GetTick>
 80040c4:	4602      	mov	r2, r0
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	1ad3      	subs	r3, r2, r3
 80040ca:	2b64      	cmp	r3, #100	; 0x64
 80040cc:	d901      	bls.n	80040d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80040ce:	2303      	movs	r3, #3
 80040d0:	e204      	b.n	80044dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040d2:	4b76      	ldr	r3, [pc, #472]	; (80042ac <HAL_RCC_OscConfig+0x2ac>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d0f0      	beq.n	80040c0 <HAL_RCC_OscConfig+0xc0>
 80040de:	e014      	b.n	800410a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040e0:	f7fd f942 	bl	8001368 <HAL_GetTick>
 80040e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040e6:	e008      	b.n	80040fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040e8:	f7fd f93e 	bl	8001368 <HAL_GetTick>
 80040ec:	4602      	mov	r2, r0
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	1ad3      	subs	r3, r2, r3
 80040f2:	2b64      	cmp	r3, #100	; 0x64
 80040f4:	d901      	bls.n	80040fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80040f6:	2303      	movs	r3, #3
 80040f8:	e1f0      	b.n	80044dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040fa:	4b6c      	ldr	r3, [pc, #432]	; (80042ac <HAL_RCC_OscConfig+0x2ac>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004102:	2b00      	cmp	r3, #0
 8004104:	d1f0      	bne.n	80040e8 <HAL_RCC_OscConfig+0xe8>
 8004106:	e000      	b.n	800410a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004108:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 0302 	and.w	r3, r3, #2
 8004112:	2b00      	cmp	r3, #0
 8004114:	d063      	beq.n	80041de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004116:	4b65      	ldr	r3, [pc, #404]	; (80042ac <HAL_RCC_OscConfig+0x2ac>)
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	f003 030c 	and.w	r3, r3, #12
 800411e:	2b00      	cmp	r3, #0
 8004120:	d00b      	beq.n	800413a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004122:	4b62      	ldr	r3, [pc, #392]	; (80042ac <HAL_RCC_OscConfig+0x2ac>)
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800412a:	2b08      	cmp	r3, #8
 800412c:	d11c      	bne.n	8004168 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800412e:	4b5f      	ldr	r3, [pc, #380]	; (80042ac <HAL_RCC_OscConfig+0x2ac>)
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004136:	2b00      	cmp	r3, #0
 8004138:	d116      	bne.n	8004168 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800413a:	4b5c      	ldr	r3, [pc, #368]	; (80042ac <HAL_RCC_OscConfig+0x2ac>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 0302 	and.w	r3, r3, #2
 8004142:	2b00      	cmp	r3, #0
 8004144:	d005      	beq.n	8004152 <HAL_RCC_OscConfig+0x152>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	68db      	ldr	r3, [r3, #12]
 800414a:	2b01      	cmp	r3, #1
 800414c:	d001      	beq.n	8004152 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e1c4      	b.n	80044dc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004152:	4b56      	ldr	r3, [pc, #344]	; (80042ac <HAL_RCC_OscConfig+0x2ac>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	691b      	ldr	r3, [r3, #16]
 800415e:	00db      	lsls	r3, r3, #3
 8004160:	4952      	ldr	r1, [pc, #328]	; (80042ac <HAL_RCC_OscConfig+0x2ac>)
 8004162:	4313      	orrs	r3, r2
 8004164:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004166:	e03a      	b.n	80041de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d020      	beq.n	80041b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004170:	4b4f      	ldr	r3, [pc, #316]	; (80042b0 <HAL_RCC_OscConfig+0x2b0>)
 8004172:	2201      	movs	r2, #1
 8004174:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004176:	f7fd f8f7 	bl	8001368 <HAL_GetTick>
 800417a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800417c:	e008      	b.n	8004190 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800417e:	f7fd f8f3 	bl	8001368 <HAL_GetTick>
 8004182:	4602      	mov	r2, r0
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	1ad3      	subs	r3, r2, r3
 8004188:	2b02      	cmp	r3, #2
 800418a:	d901      	bls.n	8004190 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800418c:	2303      	movs	r3, #3
 800418e:	e1a5      	b.n	80044dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004190:	4b46      	ldr	r3, [pc, #280]	; (80042ac <HAL_RCC_OscConfig+0x2ac>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f003 0302 	and.w	r3, r3, #2
 8004198:	2b00      	cmp	r3, #0
 800419a:	d0f0      	beq.n	800417e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800419c:	4b43      	ldr	r3, [pc, #268]	; (80042ac <HAL_RCC_OscConfig+0x2ac>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	691b      	ldr	r3, [r3, #16]
 80041a8:	00db      	lsls	r3, r3, #3
 80041aa:	4940      	ldr	r1, [pc, #256]	; (80042ac <HAL_RCC_OscConfig+0x2ac>)
 80041ac:	4313      	orrs	r3, r2
 80041ae:	600b      	str	r3, [r1, #0]
 80041b0:	e015      	b.n	80041de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041b2:	4b3f      	ldr	r3, [pc, #252]	; (80042b0 <HAL_RCC_OscConfig+0x2b0>)
 80041b4:	2200      	movs	r2, #0
 80041b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041b8:	f7fd f8d6 	bl	8001368 <HAL_GetTick>
 80041bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041be:	e008      	b.n	80041d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041c0:	f7fd f8d2 	bl	8001368 <HAL_GetTick>
 80041c4:	4602      	mov	r2, r0
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	1ad3      	subs	r3, r2, r3
 80041ca:	2b02      	cmp	r3, #2
 80041cc:	d901      	bls.n	80041d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80041ce:	2303      	movs	r3, #3
 80041d0:	e184      	b.n	80044dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041d2:	4b36      	ldr	r3, [pc, #216]	; (80042ac <HAL_RCC_OscConfig+0x2ac>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 0302 	and.w	r3, r3, #2
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d1f0      	bne.n	80041c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 0308 	and.w	r3, r3, #8
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d030      	beq.n	800424c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	695b      	ldr	r3, [r3, #20]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d016      	beq.n	8004220 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041f2:	4b30      	ldr	r3, [pc, #192]	; (80042b4 <HAL_RCC_OscConfig+0x2b4>)
 80041f4:	2201      	movs	r2, #1
 80041f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041f8:	f7fd f8b6 	bl	8001368 <HAL_GetTick>
 80041fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041fe:	e008      	b.n	8004212 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004200:	f7fd f8b2 	bl	8001368 <HAL_GetTick>
 8004204:	4602      	mov	r2, r0
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	1ad3      	subs	r3, r2, r3
 800420a:	2b02      	cmp	r3, #2
 800420c:	d901      	bls.n	8004212 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800420e:	2303      	movs	r3, #3
 8004210:	e164      	b.n	80044dc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004212:	4b26      	ldr	r3, [pc, #152]	; (80042ac <HAL_RCC_OscConfig+0x2ac>)
 8004214:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004216:	f003 0302 	and.w	r3, r3, #2
 800421a:	2b00      	cmp	r3, #0
 800421c:	d0f0      	beq.n	8004200 <HAL_RCC_OscConfig+0x200>
 800421e:	e015      	b.n	800424c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004220:	4b24      	ldr	r3, [pc, #144]	; (80042b4 <HAL_RCC_OscConfig+0x2b4>)
 8004222:	2200      	movs	r2, #0
 8004224:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004226:	f7fd f89f 	bl	8001368 <HAL_GetTick>
 800422a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800422c:	e008      	b.n	8004240 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800422e:	f7fd f89b 	bl	8001368 <HAL_GetTick>
 8004232:	4602      	mov	r2, r0
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	1ad3      	subs	r3, r2, r3
 8004238:	2b02      	cmp	r3, #2
 800423a:	d901      	bls.n	8004240 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800423c:	2303      	movs	r3, #3
 800423e:	e14d      	b.n	80044dc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004240:	4b1a      	ldr	r3, [pc, #104]	; (80042ac <HAL_RCC_OscConfig+0x2ac>)
 8004242:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004244:	f003 0302 	and.w	r3, r3, #2
 8004248:	2b00      	cmp	r3, #0
 800424a:	d1f0      	bne.n	800422e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 0304 	and.w	r3, r3, #4
 8004254:	2b00      	cmp	r3, #0
 8004256:	f000 80a0 	beq.w	800439a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800425a:	2300      	movs	r3, #0
 800425c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800425e:	4b13      	ldr	r3, [pc, #76]	; (80042ac <HAL_RCC_OscConfig+0x2ac>)
 8004260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004262:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004266:	2b00      	cmp	r3, #0
 8004268:	d10f      	bne.n	800428a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800426a:	2300      	movs	r3, #0
 800426c:	60bb      	str	r3, [r7, #8]
 800426e:	4b0f      	ldr	r3, [pc, #60]	; (80042ac <HAL_RCC_OscConfig+0x2ac>)
 8004270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004272:	4a0e      	ldr	r2, [pc, #56]	; (80042ac <HAL_RCC_OscConfig+0x2ac>)
 8004274:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004278:	6413      	str	r3, [r2, #64]	; 0x40
 800427a:	4b0c      	ldr	r3, [pc, #48]	; (80042ac <HAL_RCC_OscConfig+0x2ac>)
 800427c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004282:	60bb      	str	r3, [r7, #8]
 8004284:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004286:	2301      	movs	r3, #1
 8004288:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800428a:	4b0b      	ldr	r3, [pc, #44]	; (80042b8 <HAL_RCC_OscConfig+0x2b8>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004292:	2b00      	cmp	r3, #0
 8004294:	d121      	bne.n	80042da <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004296:	4b08      	ldr	r3, [pc, #32]	; (80042b8 <HAL_RCC_OscConfig+0x2b8>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a07      	ldr	r2, [pc, #28]	; (80042b8 <HAL_RCC_OscConfig+0x2b8>)
 800429c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042a2:	f7fd f861 	bl	8001368 <HAL_GetTick>
 80042a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042a8:	e011      	b.n	80042ce <HAL_RCC_OscConfig+0x2ce>
 80042aa:	bf00      	nop
 80042ac:	40023800 	.word	0x40023800
 80042b0:	42470000 	.word	0x42470000
 80042b4:	42470e80 	.word	0x42470e80
 80042b8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042bc:	f7fd f854 	bl	8001368 <HAL_GetTick>
 80042c0:	4602      	mov	r2, r0
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	1ad3      	subs	r3, r2, r3
 80042c6:	2b02      	cmp	r3, #2
 80042c8:	d901      	bls.n	80042ce <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80042ca:	2303      	movs	r3, #3
 80042cc:	e106      	b.n	80044dc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042ce:	4b85      	ldr	r3, [pc, #532]	; (80044e4 <HAL_RCC_OscConfig+0x4e4>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d0f0      	beq.n	80042bc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	2b01      	cmp	r3, #1
 80042e0:	d106      	bne.n	80042f0 <HAL_RCC_OscConfig+0x2f0>
 80042e2:	4b81      	ldr	r3, [pc, #516]	; (80044e8 <HAL_RCC_OscConfig+0x4e8>)
 80042e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042e6:	4a80      	ldr	r2, [pc, #512]	; (80044e8 <HAL_RCC_OscConfig+0x4e8>)
 80042e8:	f043 0301 	orr.w	r3, r3, #1
 80042ec:	6713      	str	r3, [r2, #112]	; 0x70
 80042ee:	e01c      	b.n	800432a <HAL_RCC_OscConfig+0x32a>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	2b05      	cmp	r3, #5
 80042f6:	d10c      	bne.n	8004312 <HAL_RCC_OscConfig+0x312>
 80042f8:	4b7b      	ldr	r3, [pc, #492]	; (80044e8 <HAL_RCC_OscConfig+0x4e8>)
 80042fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042fc:	4a7a      	ldr	r2, [pc, #488]	; (80044e8 <HAL_RCC_OscConfig+0x4e8>)
 80042fe:	f043 0304 	orr.w	r3, r3, #4
 8004302:	6713      	str	r3, [r2, #112]	; 0x70
 8004304:	4b78      	ldr	r3, [pc, #480]	; (80044e8 <HAL_RCC_OscConfig+0x4e8>)
 8004306:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004308:	4a77      	ldr	r2, [pc, #476]	; (80044e8 <HAL_RCC_OscConfig+0x4e8>)
 800430a:	f043 0301 	orr.w	r3, r3, #1
 800430e:	6713      	str	r3, [r2, #112]	; 0x70
 8004310:	e00b      	b.n	800432a <HAL_RCC_OscConfig+0x32a>
 8004312:	4b75      	ldr	r3, [pc, #468]	; (80044e8 <HAL_RCC_OscConfig+0x4e8>)
 8004314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004316:	4a74      	ldr	r2, [pc, #464]	; (80044e8 <HAL_RCC_OscConfig+0x4e8>)
 8004318:	f023 0301 	bic.w	r3, r3, #1
 800431c:	6713      	str	r3, [r2, #112]	; 0x70
 800431e:	4b72      	ldr	r3, [pc, #456]	; (80044e8 <HAL_RCC_OscConfig+0x4e8>)
 8004320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004322:	4a71      	ldr	r2, [pc, #452]	; (80044e8 <HAL_RCC_OscConfig+0x4e8>)
 8004324:	f023 0304 	bic.w	r3, r3, #4
 8004328:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d015      	beq.n	800435e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004332:	f7fd f819 	bl	8001368 <HAL_GetTick>
 8004336:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004338:	e00a      	b.n	8004350 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800433a:	f7fd f815 	bl	8001368 <HAL_GetTick>
 800433e:	4602      	mov	r2, r0
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	1ad3      	subs	r3, r2, r3
 8004344:	f241 3288 	movw	r2, #5000	; 0x1388
 8004348:	4293      	cmp	r3, r2
 800434a:	d901      	bls.n	8004350 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800434c:	2303      	movs	r3, #3
 800434e:	e0c5      	b.n	80044dc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004350:	4b65      	ldr	r3, [pc, #404]	; (80044e8 <HAL_RCC_OscConfig+0x4e8>)
 8004352:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004354:	f003 0302 	and.w	r3, r3, #2
 8004358:	2b00      	cmp	r3, #0
 800435a:	d0ee      	beq.n	800433a <HAL_RCC_OscConfig+0x33a>
 800435c:	e014      	b.n	8004388 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800435e:	f7fd f803 	bl	8001368 <HAL_GetTick>
 8004362:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004364:	e00a      	b.n	800437c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004366:	f7fc ffff 	bl	8001368 <HAL_GetTick>
 800436a:	4602      	mov	r2, r0
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	1ad3      	subs	r3, r2, r3
 8004370:	f241 3288 	movw	r2, #5000	; 0x1388
 8004374:	4293      	cmp	r3, r2
 8004376:	d901      	bls.n	800437c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004378:	2303      	movs	r3, #3
 800437a:	e0af      	b.n	80044dc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800437c:	4b5a      	ldr	r3, [pc, #360]	; (80044e8 <HAL_RCC_OscConfig+0x4e8>)
 800437e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004380:	f003 0302 	and.w	r3, r3, #2
 8004384:	2b00      	cmp	r3, #0
 8004386:	d1ee      	bne.n	8004366 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004388:	7dfb      	ldrb	r3, [r7, #23]
 800438a:	2b01      	cmp	r3, #1
 800438c:	d105      	bne.n	800439a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800438e:	4b56      	ldr	r3, [pc, #344]	; (80044e8 <HAL_RCC_OscConfig+0x4e8>)
 8004390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004392:	4a55      	ldr	r2, [pc, #340]	; (80044e8 <HAL_RCC_OscConfig+0x4e8>)
 8004394:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004398:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	699b      	ldr	r3, [r3, #24]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	f000 809b 	beq.w	80044da <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80043a4:	4b50      	ldr	r3, [pc, #320]	; (80044e8 <HAL_RCC_OscConfig+0x4e8>)
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	f003 030c 	and.w	r3, r3, #12
 80043ac:	2b08      	cmp	r3, #8
 80043ae:	d05c      	beq.n	800446a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	699b      	ldr	r3, [r3, #24]
 80043b4:	2b02      	cmp	r3, #2
 80043b6:	d141      	bne.n	800443c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043b8:	4b4c      	ldr	r3, [pc, #304]	; (80044ec <HAL_RCC_OscConfig+0x4ec>)
 80043ba:	2200      	movs	r2, #0
 80043bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043be:	f7fc ffd3 	bl	8001368 <HAL_GetTick>
 80043c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043c4:	e008      	b.n	80043d8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043c6:	f7fc ffcf 	bl	8001368 <HAL_GetTick>
 80043ca:	4602      	mov	r2, r0
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	1ad3      	subs	r3, r2, r3
 80043d0:	2b02      	cmp	r3, #2
 80043d2:	d901      	bls.n	80043d8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80043d4:	2303      	movs	r3, #3
 80043d6:	e081      	b.n	80044dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043d8:	4b43      	ldr	r3, [pc, #268]	; (80044e8 <HAL_RCC_OscConfig+0x4e8>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d1f0      	bne.n	80043c6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	69da      	ldr	r2, [r3, #28]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6a1b      	ldr	r3, [r3, #32]
 80043ec:	431a      	orrs	r2, r3
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f2:	019b      	lsls	r3, r3, #6
 80043f4:	431a      	orrs	r2, r3
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043fa:	085b      	lsrs	r3, r3, #1
 80043fc:	3b01      	subs	r3, #1
 80043fe:	041b      	lsls	r3, r3, #16
 8004400:	431a      	orrs	r2, r3
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004406:	061b      	lsls	r3, r3, #24
 8004408:	4937      	ldr	r1, [pc, #220]	; (80044e8 <HAL_RCC_OscConfig+0x4e8>)
 800440a:	4313      	orrs	r3, r2
 800440c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800440e:	4b37      	ldr	r3, [pc, #220]	; (80044ec <HAL_RCC_OscConfig+0x4ec>)
 8004410:	2201      	movs	r2, #1
 8004412:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004414:	f7fc ffa8 	bl	8001368 <HAL_GetTick>
 8004418:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800441a:	e008      	b.n	800442e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800441c:	f7fc ffa4 	bl	8001368 <HAL_GetTick>
 8004420:	4602      	mov	r2, r0
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	2b02      	cmp	r3, #2
 8004428:	d901      	bls.n	800442e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800442a:	2303      	movs	r3, #3
 800442c:	e056      	b.n	80044dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800442e:	4b2e      	ldr	r3, [pc, #184]	; (80044e8 <HAL_RCC_OscConfig+0x4e8>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004436:	2b00      	cmp	r3, #0
 8004438:	d0f0      	beq.n	800441c <HAL_RCC_OscConfig+0x41c>
 800443a:	e04e      	b.n	80044da <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800443c:	4b2b      	ldr	r3, [pc, #172]	; (80044ec <HAL_RCC_OscConfig+0x4ec>)
 800443e:	2200      	movs	r2, #0
 8004440:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004442:	f7fc ff91 	bl	8001368 <HAL_GetTick>
 8004446:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004448:	e008      	b.n	800445c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800444a:	f7fc ff8d 	bl	8001368 <HAL_GetTick>
 800444e:	4602      	mov	r2, r0
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	1ad3      	subs	r3, r2, r3
 8004454:	2b02      	cmp	r3, #2
 8004456:	d901      	bls.n	800445c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004458:	2303      	movs	r3, #3
 800445a:	e03f      	b.n	80044dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800445c:	4b22      	ldr	r3, [pc, #136]	; (80044e8 <HAL_RCC_OscConfig+0x4e8>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004464:	2b00      	cmp	r3, #0
 8004466:	d1f0      	bne.n	800444a <HAL_RCC_OscConfig+0x44a>
 8004468:	e037      	b.n	80044da <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	699b      	ldr	r3, [r3, #24]
 800446e:	2b01      	cmp	r3, #1
 8004470:	d101      	bne.n	8004476 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	e032      	b.n	80044dc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004476:	4b1c      	ldr	r3, [pc, #112]	; (80044e8 <HAL_RCC_OscConfig+0x4e8>)
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	699b      	ldr	r3, [r3, #24]
 8004480:	2b01      	cmp	r3, #1
 8004482:	d028      	beq.n	80044d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800448e:	429a      	cmp	r2, r3
 8004490:	d121      	bne.n	80044d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800449c:	429a      	cmp	r2, r3
 800449e:	d11a      	bne.n	80044d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044a0:	68fa      	ldr	r2, [r7, #12]
 80044a2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80044a6:	4013      	ands	r3, r2
 80044a8:	687a      	ldr	r2, [r7, #4]
 80044aa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80044ac:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d111      	bne.n	80044d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044bc:	085b      	lsrs	r3, r3, #1
 80044be:	3b01      	subs	r3, #1
 80044c0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044c2:	429a      	cmp	r2, r3
 80044c4:	d107      	bne.n	80044d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044d2:	429a      	cmp	r2, r3
 80044d4:	d001      	beq.n	80044da <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	e000      	b.n	80044dc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80044da:	2300      	movs	r3, #0
}
 80044dc:	4618      	mov	r0, r3
 80044de:	3718      	adds	r7, #24
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}
 80044e4:	40007000 	.word	0x40007000
 80044e8:	40023800 	.word	0x40023800
 80044ec:	42470060 	.word	0x42470060

080044f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b084      	sub	sp, #16
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
 80044f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d101      	bne.n	8004504 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004500:	2301      	movs	r3, #1
 8004502:	e0cc      	b.n	800469e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004504:	4b68      	ldr	r3, [pc, #416]	; (80046a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f003 0307 	and.w	r3, r3, #7
 800450c:	683a      	ldr	r2, [r7, #0]
 800450e:	429a      	cmp	r2, r3
 8004510:	d90c      	bls.n	800452c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004512:	4b65      	ldr	r3, [pc, #404]	; (80046a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004514:	683a      	ldr	r2, [r7, #0]
 8004516:	b2d2      	uxtb	r2, r2
 8004518:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800451a:	4b63      	ldr	r3, [pc, #396]	; (80046a8 <HAL_RCC_ClockConfig+0x1b8>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f003 0307 	and.w	r3, r3, #7
 8004522:	683a      	ldr	r2, [r7, #0]
 8004524:	429a      	cmp	r2, r3
 8004526:	d001      	beq.n	800452c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	e0b8      	b.n	800469e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f003 0302 	and.w	r3, r3, #2
 8004534:	2b00      	cmp	r3, #0
 8004536:	d020      	beq.n	800457a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 0304 	and.w	r3, r3, #4
 8004540:	2b00      	cmp	r3, #0
 8004542:	d005      	beq.n	8004550 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004544:	4b59      	ldr	r3, [pc, #356]	; (80046ac <HAL_RCC_ClockConfig+0x1bc>)
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	4a58      	ldr	r2, [pc, #352]	; (80046ac <HAL_RCC_ClockConfig+0x1bc>)
 800454a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800454e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f003 0308 	and.w	r3, r3, #8
 8004558:	2b00      	cmp	r3, #0
 800455a:	d005      	beq.n	8004568 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800455c:	4b53      	ldr	r3, [pc, #332]	; (80046ac <HAL_RCC_ClockConfig+0x1bc>)
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	4a52      	ldr	r2, [pc, #328]	; (80046ac <HAL_RCC_ClockConfig+0x1bc>)
 8004562:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004566:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004568:	4b50      	ldr	r3, [pc, #320]	; (80046ac <HAL_RCC_ClockConfig+0x1bc>)
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	494d      	ldr	r1, [pc, #308]	; (80046ac <HAL_RCC_ClockConfig+0x1bc>)
 8004576:	4313      	orrs	r3, r2
 8004578:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f003 0301 	and.w	r3, r3, #1
 8004582:	2b00      	cmp	r3, #0
 8004584:	d044      	beq.n	8004610 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	2b01      	cmp	r3, #1
 800458c:	d107      	bne.n	800459e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800458e:	4b47      	ldr	r3, [pc, #284]	; (80046ac <HAL_RCC_ClockConfig+0x1bc>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004596:	2b00      	cmp	r3, #0
 8004598:	d119      	bne.n	80045ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	e07f      	b.n	800469e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	2b02      	cmp	r3, #2
 80045a4:	d003      	beq.n	80045ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045aa:	2b03      	cmp	r3, #3
 80045ac:	d107      	bne.n	80045be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045ae:	4b3f      	ldr	r3, [pc, #252]	; (80046ac <HAL_RCC_ClockConfig+0x1bc>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d109      	bne.n	80045ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e06f      	b.n	800469e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045be:	4b3b      	ldr	r3, [pc, #236]	; (80046ac <HAL_RCC_ClockConfig+0x1bc>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f003 0302 	and.w	r3, r3, #2
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d101      	bne.n	80045ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	e067      	b.n	800469e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045ce:	4b37      	ldr	r3, [pc, #220]	; (80046ac <HAL_RCC_ClockConfig+0x1bc>)
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	f023 0203 	bic.w	r2, r3, #3
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	4934      	ldr	r1, [pc, #208]	; (80046ac <HAL_RCC_ClockConfig+0x1bc>)
 80045dc:	4313      	orrs	r3, r2
 80045de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80045e0:	f7fc fec2 	bl	8001368 <HAL_GetTick>
 80045e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045e6:	e00a      	b.n	80045fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045e8:	f7fc febe 	bl	8001368 <HAL_GetTick>
 80045ec:	4602      	mov	r2, r0
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	1ad3      	subs	r3, r2, r3
 80045f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d901      	bls.n	80045fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80045fa:	2303      	movs	r3, #3
 80045fc:	e04f      	b.n	800469e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045fe:	4b2b      	ldr	r3, [pc, #172]	; (80046ac <HAL_RCC_ClockConfig+0x1bc>)
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	f003 020c 	and.w	r2, r3, #12
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	009b      	lsls	r3, r3, #2
 800460c:	429a      	cmp	r2, r3
 800460e:	d1eb      	bne.n	80045e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004610:	4b25      	ldr	r3, [pc, #148]	; (80046a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 0307 	and.w	r3, r3, #7
 8004618:	683a      	ldr	r2, [r7, #0]
 800461a:	429a      	cmp	r2, r3
 800461c:	d20c      	bcs.n	8004638 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800461e:	4b22      	ldr	r3, [pc, #136]	; (80046a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004620:	683a      	ldr	r2, [r7, #0]
 8004622:	b2d2      	uxtb	r2, r2
 8004624:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004626:	4b20      	ldr	r3, [pc, #128]	; (80046a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 0307 	and.w	r3, r3, #7
 800462e:	683a      	ldr	r2, [r7, #0]
 8004630:	429a      	cmp	r2, r3
 8004632:	d001      	beq.n	8004638 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004634:	2301      	movs	r3, #1
 8004636:	e032      	b.n	800469e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 0304 	and.w	r3, r3, #4
 8004640:	2b00      	cmp	r3, #0
 8004642:	d008      	beq.n	8004656 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004644:	4b19      	ldr	r3, [pc, #100]	; (80046ac <HAL_RCC_ClockConfig+0x1bc>)
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	68db      	ldr	r3, [r3, #12]
 8004650:	4916      	ldr	r1, [pc, #88]	; (80046ac <HAL_RCC_ClockConfig+0x1bc>)
 8004652:	4313      	orrs	r3, r2
 8004654:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f003 0308 	and.w	r3, r3, #8
 800465e:	2b00      	cmp	r3, #0
 8004660:	d009      	beq.n	8004676 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004662:	4b12      	ldr	r3, [pc, #72]	; (80046ac <HAL_RCC_ClockConfig+0x1bc>)
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	691b      	ldr	r3, [r3, #16]
 800466e:	00db      	lsls	r3, r3, #3
 8004670:	490e      	ldr	r1, [pc, #56]	; (80046ac <HAL_RCC_ClockConfig+0x1bc>)
 8004672:	4313      	orrs	r3, r2
 8004674:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004676:	f000 f821 	bl	80046bc <HAL_RCC_GetSysClockFreq>
 800467a:	4602      	mov	r2, r0
 800467c:	4b0b      	ldr	r3, [pc, #44]	; (80046ac <HAL_RCC_ClockConfig+0x1bc>)
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	091b      	lsrs	r3, r3, #4
 8004682:	f003 030f 	and.w	r3, r3, #15
 8004686:	490a      	ldr	r1, [pc, #40]	; (80046b0 <HAL_RCC_ClockConfig+0x1c0>)
 8004688:	5ccb      	ldrb	r3, [r1, r3]
 800468a:	fa22 f303 	lsr.w	r3, r2, r3
 800468e:	4a09      	ldr	r2, [pc, #36]	; (80046b4 <HAL_RCC_ClockConfig+0x1c4>)
 8004690:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004692:	4b09      	ldr	r3, [pc, #36]	; (80046b8 <HAL_RCC_ClockConfig+0x1c8>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4618      	mov	r0, r3
 8004698:	f7fc fe22 	bl	80012e0 <HAL_InitTick>

  return HAL_OK;
 800469c:	2300      	movs	r3, #0
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3710      	adds	r7, #16
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	bf00      	nop
 80046a8:	40023c00 	.word	0x40023c00
 80046ac:	40023800 	.word	0x40023800
 80046b0:	08008344 	.word	0x08008344
 80046b4:	20000000 	.word	0x20000000
 80046b8:	20000004 	.word	0x20000004

080046bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046bc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80046c0:	b084      	sub	sp, #16
 80046c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80046c4:	2300      	movs	r3, #0
 80046c6:	607b      	str	r3, [r7, #4]
 80046c8:	2300      	movs	r3, #0
 80046ca:	60fb      	str	r3, [r7, #12]
 80046cc:	2300      	movs	r3, #0
 80046ce:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80046d0:	2300      	movs	r3, #0
 80046d2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80046d4:	4b67      	ldr	r3, [pc, #412]	; (8004874 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	f003 030c 	and.w	r3, r3, #12
 80046dc:	2b08      	cmp	r3, #8
 80046de:	d00d      	beq.n	80046fc <HAL_RCC_GetSysClockFreq+0x40>
 80046e0:	2b08      	cmp	r3, #8
 80046e2:	f200 80bd 	bhi.w	8004860 <HAL_RCC_GetSysClockFreq+0x1a4>
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d002      	beq.n	80046f0 <HAL_RCC_GetSysClockFreq+0x34>
 80046ea:	2b04      	cmp	r3, #4
 80046ec:	d003      	beq.n	80046f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80046ee:	e0b7      	b.n	8004860 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80046f0:	4b61      	ldr	r3, [pc, #388]	; (8004878 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80046f2:	60bb      	str	r3, [r7, #8]
       break;
 80046f4:	e0b7      	b.n	8004866 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80046f6:	4b61      	ldr	r3, [pc, #388]	; (800487c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80046f8:	60bb      	str	r3, [r7, #8]
      break;
 80046fa:	e0b4      	b.n	8004866 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80046fc:	4b5d      	ldr	r3, [pc, #372]	; (8004874 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004704:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004706:	4b5b      	ldr	r3, [pc, #364]	; (8004874 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800470e:	2b00      	cmp	r3, #0
 8004710:	d04d      	beq.n	80047ae <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004712:	4b58      	ldr	r3, [pc, #352]	; (8004874 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	099b      	lsrs	r3, r3, #6
 8004718:	461a      	mov	r2, r3
 800471a:	f04f 0300 	mov.w	r3, #0
 800471e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004722:	f04f 0100 	mov.w	r1, #0
 8004726:	ea02 0800 	and.w	r8, r2, r0
 800472a:	ea03 0901 	and.w	r9, r3, r1
 800472e:	4640      	mov	r0, r8
 8004730:	4649      	mov	r1, r9
 8004732:	f04f 0200 	mov.w	r2, #0
 8004736:	f04f 0300 	mov.w	r3, #0
 800473a:	014b      	lsls	r3, r1, #5
 800473c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004740:	0142      	lsls	r2, r0, #5
 8004742:	4610      	mov	r0, r2
 8004744:	4619      	mov	r1, r3
 8004746:	ebb0 0008 	subs.w	r0, r0, r8
 800474a:	eb61 0109 	sbc.w	r1, r1, r9
 800474e:	f04f 0200 	mov.w	r2, #0
 8004752:	f04f 0300 	mov.w	r3, #0
 8004756:	018b      	lsls	r3, r1, #6
 8004758:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800475c:	0182      	lsls	r2, r0, #6
 800475e:	1a12      	subs	r2, r2, r0
 8004760:	eb63 0301 	sbc.w	r3, r3, r1
 8004764:	f04f 0000 	mov.w	r0, #0
 8004768:	f04f 0100 	mov.w	r1, #0
 800476c:	00d9      	lsls	r1, r3, #3
 800476e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004772:	00d0      	lsls	r0, r2, #3
 8004774:	4602      	mov	r2, r0
 8004776:	460b      	mov	r3, r1
 8004778:	eb12 0208 	adds.w	r2, r2, r8
 800477c:	eb43 0309 	adc.w	r3, r3, r9
 8004780:	f04f 0000 	mov.w	r0, #0
 8004784:	f04f 0100 	mov.w	r1, #0
 8004788:	0259      	lsls	r1, r3, #9
 800478a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800478e:	0250      	lsls	r0, r2, #9
 8004790:	4602      	mov	r2, r0
 8004792:	460b      	mov	r3, r1
 8004794:	4610      	mov	r0, r2
 8004796:	4619      	mov	r1, r3
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	461a      	mov	r2, r3
 800479c:	f04f 0300 	mov.w	r3, #0
 80047a0:	f7fb fd12 	bl	80001c8 <__aeabi_uldivmod>
 80047a4:	4602      	mov	r2, r0
 80047a6:	460b      	mov	r3, r1
 80047a8:	4613      	mov	r3, r2
 80047aa:	60fb      	str	r3, [r7, #12]
 80047ac:	e04a      	b.n	8004844 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047ae:	4b31      	ldr	r3, [pc, #196]	; (8004874 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	099b      	lsrs	r3, r3, #6
 80047b4:	461a      	mov	r2, r3
 80047b6:	f04f 0300 	mov.w	r3, #0
 80047ba:	f240 10ff 	movw	r0, #511	; 0x1ff
 80047be:	f04f 0100 	mov.w	r1, #0
 80047c2:	ea02 0400 	and.w	r4, r2, r0
 80047c6:	ea03 0501 	and.w	r5, r3, r1
 80047ca:	4620      	mov	r0, r4
 80047cc:	4629      	mov	r1, r5
 80047ce:	f04f 0200 	mov.w	r2, #0
 80047d2:	f04f 0300 	mov.w	r3, #0
 80047d6:	014b      	lsls	r3, r1, #5
 80047d8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80047dc:	0142      	lsls	r2, r0, #5
 80047de:	4610      	mov	r0, r2
 80047e0:	4619      	mov	r1, r3
 80047e2:	1b00      	subs	r0, r0, r4
 80047e4:	eb61 0105 	sbc.w	r1, r1, r5
 80047e8:	f04f 0200 	mov.w	r2, #0
 80047ec:	f04f 0300 	mov.w	r3, #0
 80047f0:	018b      	lsls	r3, r1, #6
 80047f2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80047f6:	0182      	lsls	r2, r0, #6
 80047f8:	1a12      	subs	r2, r2, r0
 80047fa:	eb63 0301 	sbc.w	r3, r3, r1
 80047fe:	f04f 0000 	mov.w	r0, #0
 8004802:	f04f 0100 	mov.w	r1, #0
 8004806:	00d9      	lsls	r1, r3, #3
 8004808:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800480c:	00d0      	lsls	r0, r2, #3
 800480e:	4602      	mov	r2, r0
 8004810:	460b      	mov	r3, r1
 8004812:	1912      	adds	r2, r2, r4
 8004814:	eb45 0303 	adc.w	r3, r5, r3
 8004818:	f04f 0000 	mov.w	r0, #0
 800481c:	f04f 0100 	mov.w	r1, #0
 8004820:	0299      	lsls	r1, r3, #10
 8004822:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004826:	0290      	lsls	r0, r2, #10
 8004828:	4602      	mov	r2, r0
 800482a:	460b      	mov	r3, r1
 800482c:	4610      	mov	r0, r2
 800482e:	4619      	mov	r1, r3
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	461a      	mov	r2, r3
 8004834:	f04f 0300 	mov.w	r3, #0
 8004838:	f7fb fcc6 	bl	80001c8 <__aeabi_uldivmod>
 800483c:	4602      	mov	r2, r0
 800483e:	460b      	mov	r3, r1
 8004840:	4613      	mov	r3, r2
 8004842:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004844:	4b0b      	ldr	r3, [pc, #44]	; (8004874 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	0c1b      	lsrs	r3, r3, #16
 800484a:	f003 0303 	and.w	r3, r3, #3
 800484e:	3301      	adds	r3, #1
 8004850:	005b      	lsls	r3, r3, #1
 8004852:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004854:	68fa      	ldr	r2, [r7, #12]
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	fbb2 f3f3 	udiv	r3, r2, r3
 800485c:	60bb      	str	r3, [r7, #8]
      break;
 800485e:	e002      	b.n	8004866 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004860:	4b05      	ldr	r3, [pc, #20]	; (8004878 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004862:	60bb      	str	r3, [r7, #8]
      break;
 8004864:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004866:	68bb      	ldr	r3, [r7, #8]
}
 8004868:	4618      	mov	r0, r3
 800486a:	3710      	adds	r7, #16
 800486c:	46bd      	mov	sp, r7
 800486e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004872:	bf00      	nop
 8004874:	40023800 	.word	0x40023800
 8004878:	00f42400 	.word	0x00f42400
 800487c:	007a1200 	.word	0x007a1200

08004880 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004880:	b480      	push	{r7}
 8004882:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004884:	4b03      	ldr	r3, [pc, #12]	; (8004894 <HAL_RCC_GetHCLKFreq+0x14>)
 8004886:	681b      	ldr	r3, [r3, #0]
}
 8004888:	4618      	mov	r0, r3
 800488a:	46bd      	mov	sp, r7
 800488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004890:	4770      	bx	lr
 8004892:	bf00      	nop
 8004894:	20000000 	.word	0x20000000

08004898 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800489c:	f7ff fff0 	bl	8004880 <HAL_RCC_GetHCLKFreq>
 80048a0:	4602      	mov	r2, r0
 80048a2:	4b05      	ldr	r3, [pc, #20]	; (80048b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	0a9b      	lsrs	r3, r3, #10
 80048a8:	f003 0307 	and.w	r3, r3, #7
 80048ac:	4903      	ldr	r1, [pc, #12]	; (80048bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80048ae:	5ccb      	ldrb	r3, [r1, r3]
 80048b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	bd80      	pop	{r7, pc}
 80048b8:	40023800 	.word	0x40023800
 80048bc:	08008354 	.word	0x08008354

080048c0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b086      	sub	sp, #24
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80048c8:	2300      	movs	r3, #0
 80048ca:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80048cc:	2300      	movs	r3, #0
 80048ce:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 0301 	and.w	r3, r3, #1
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d105      	bne.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d035      	beq.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80048e8:	4b62      	ldr	r3, [pc, #392]	; (8004a74 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80048ea:	2200      	movs	r2, #0
 80048ec:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80048ee:	f7fc fd3b 	bl	8001368 <HAL_GetTick>
 80048f2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80048f4:	e008      	b.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80048f6:	f7fc fd37 	bl	8001368 <HAL_GetTick>
 80048fa:	4602      	mov	r2, r0
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	1ad3      	subs	r3, r2, r3
 8004900:	2b02      	cmp	r3, #2
 8004902:	d901      	bls.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004904:	2303      	movs	r3, #3
 8004906:	e0b0      	b.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004908:	4b5b      	ldr	r3, [pc, #364]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004910:	2b00      	cmp	r3, #0
 8004912:	d1f0      	bne.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	019a      	lsls	r2, r3, #6
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	071b      	lsls	r3, r3, #28
 8004920:	4955      	ldr	r1, [pc, #340]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004922:	4313      	orrs	r3, r2
 8004924:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004928:	4b52      	ldr	r3, [pc, #328]	; (8004a74 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800492a:	2201      	movs	r2, #1
 800492c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800492e:	f7fc fd1b 	bl	8001368 <HAL_GetTick>
 8004932:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004934:	e008      	b.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004936:	f7fc fd17 	bl	8001368 <HAL_GetTick>
 800493a:	4602      	mov	r2, r0
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	1ad3      	subs	r3, r2, r3
 8004940:	2b02      	cmp	r3, #2
 8004942:	d901      	bls.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004944:	2303      	movs	r3, #3
 8004946:	e090      	b.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004948:	4b4b      	ldr	r3, [pc, #300]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004950:	2b00      	cmp	r3, #0
 8004952:	d0f0      	beq.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f003 0302 	and.w	r3, r3, #2
 800495c:	2b00      	cmp	r3, #0
 800495e:	f000 8083 	beq.w	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004962:	2300      	movs	r3, #0
 8004964:	60fb      	str	r3, [r7, #12]
 8004966:	4b44      	ldr	r3, [pc, #272]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800496a:	4a43      	ldr	r2, [pc, #268]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800496c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004970:	6413      	str	r3, [r2, #64]	; 0x40
 8004972:	4b41      	ldr	r3, [pc, #260]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004976:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800497a:	60fb      	str	r3, [r7, #12]
 800497c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800497e:	4b3f      	ldr	r3, [pc, #252]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a3e      	ldr	r2, [pc, #248]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004984:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004988:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800498a:	f7fc fced 	bl	8001368 <HAL_GetTick>
 800498e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004990:	e008      	b.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004992:	f7fc fce9 	bl	8001368 <HAL_GetTick>
 8004996:	4602      	mov	r2, r0
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	1ad3      	subs	r3, r2, r3
 800499c:	2b02      	cmp	r3, #2
 800499e:	d901      	bls.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80049a0:	2303      	movs	r3, #3
 80049a2:	e062      	b.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80049a4:	4b35      	ldr	r3, [pc, #212]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d0f0      	beq.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80049b0:	4b31      	ldr	r3, [pc, #196]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80049b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049b8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d02f      	beq.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	68db      	ldr	r3, [r3, #12]
 80049c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049c8:	693a      	ldr	r2, [r7, #16]
 80049ca:	429a      	cmp	r2, r3
 80049cc:	d028      	beq.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80049ce:	4b2a      	ldr	r3, [pc, #168]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80049d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049d6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80049d8:	4b29      	ldr	r3, [pc, #164]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80049da:	2201      	movs	r2, #1
 80049dc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80049de:	4b28      	ldr	r3, [pc, #160]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80049e0:	2200      	movs	r2, #0
 80049e2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80049e4:	4a24      	ldr	r2, [pc, #144]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80049ea:	4b23      	ldr	r3, [pc, #140]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80049ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ee:	f003 0301 	and.w	r3, r3, #1
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d114      	bne.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80049f6:	f7fc fcb7 	bl	8001368 <HAL_GetTick>
 80049fa:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049fc:	e00a      	b.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049fe:	f7fc fcb3 	bl	8001368 <HAL_GetTick>
 8004a02:	4602      	mov	r2, r0
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	1ad3      	subs	r3, r2, r3
 8004a08:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d901      	bls.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004a10:	2303      	movs	r3, #3
 8004a12:	e02a      	b.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a14:	4b18      	ldr	r3, [pc, #96]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a18:	f003 0302 	and.w	r3, r3, #2
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d0ee      	beq.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	68db      	ldr	r3, [r3, #12]
 8004a24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a28:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a2c:	d10d      	bne.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004a2e:	4b12      	ldr	r3, [pc, #72]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	68db      	ldr	r3, [r3, #12]
 8004a3a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004a3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a42:	490d      	ldr	r1, [pc, #52]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a44:	4313      	orrs	r3, r2
 8004a46:	608b      	str	r3, [r1, #8]
 8004a48:	e005      	b.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004a4a:	4b0b      	ldr	r3, [pc, #44]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	4a0a      	ldr	r2, [pc, #40]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a50:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004a54:	6093      	str	r3, [r2, #8]
 8004a56:	4b08      	ldr	r3, [pc, #32]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a58:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	68db      	ldr	r3, [r3, #12]
 8004a5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a62:	4905      	ldr	r1, [pc, #20]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a64:	4313      	orrs	r3, r2
 8004a66:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004a68:	2300      	movs	r3, #0
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3718      	adds	r7, #24
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}
 8004a72:	bf00      	nop
 8004a74:	42470068 	.word	0x42470068
 8004a78:	40023800 	.word	0x40023800
 8004a7c:	40007000 	.word	0x40007000
 8004a80:	42470e40 	.word	0x42470e40

08004a84 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b087      	sub	sp, #28
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004a90:	2300      	movs	r3, #0
 8004a92:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004a94:	2300      	movs	r3, #0
 8004a96:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2b01      	cmp	r3, #1
 8004aa0:	d13e      	bne.n	8004b20 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004aa2:	4b23      	ldr	r3, [pc, #140]	; (8004b30 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004aaa:	60fb      	str	r3, [r7, #12]
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d005      	beq.n	8004abe <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	d12f      	bne.n	8004b18 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004ab8:	4b1e      	ldr	r3, [pc, #120]	; (8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004aba:	617b      	str	r3, [r7, #20]
          break;
 8004abc:	e02f      	b.n	8004b1e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004abe:	4b1c      	ldr	r3, [pc, #112]	; (8004b30 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ac6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004aca:	d108      	bne.n	8004ade <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004acc:	4b18      	ldr	r3, [pc, #96]	; (8004b30 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ad4:	4a18      	ldr	r2, [pc, #96]	; (8004b38 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004ad6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ada:	613b      	str	r3, [r7, #16]
 8004adc:	e007      	b.n	8004aee <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004ade:	4b14      	ldr	r3, [pc, #80]	; (8004b30 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ae6:	4a15      	ldr	r2, [pc, #84]	; (8004b3c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004ae8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aec:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004aee:	4b10      	ldr	r3, [pc, #64]	; (8004b30 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004af0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004af4:	099b      	lsrs	r3, r3, #6
 8004af6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	fb02 f303 	mul.w	r3, r2, r3
 8004b00:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004b02:	4b0b      	ldr	r3, [pc, #44]	; (8004b30 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004b04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b08:	0f1b      	lsrs	r3, r3, #28
 8004b0a:	f003 0307 	and.w	r3, r3, #7
 8004b0e:	68ba      	ldr	r2, [r7, #8]
 8004b10:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b14:	617b      	str	r3, [r7, #20]
          break;
 8004b16:	e002      	b.n	8004b1e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004b18:	2300      	movs	r3, #0
 8004b1a:	617b      	str	r3, [r7, #20]
          break;
 8004b1c:	bf00      	nop
        }
      }
      break;
 8004b1e:	bf00      	nop
    }
  }
  return frequency;
 8004b20:	697b      	ldr	r3, [r7, #20]
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	371c      	adds	r7, #28
 8004b26:	46bd      	mov	sp, r7
 8004b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2c:	4770      	bx	lr
 8004b2e:	bf00      	nop
 8004b30:	40023800 	.word	0x40023800
 8004b34:	00bb8000 	.word	0x00bb8000
 8004b38:	007a1200 	.word	0x007a1200
 8004b3c:	00f42400 	.word	0x00f42400

08004b40 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b082      	sub	sp, #8
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d101      	bne.n	8004b52 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e07b      	b.n	8004c4a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d108      	bne.n	8004b6c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b62:	d009      	beq.n	8004b78 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2200      	movs	r2, #0
 8004b68:	61da      	str	r2, [r3, #28]
 8004b6a:	e005      	b.n	8004b78 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2200      	movs	r2, #0
 8004b76:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b84:	b2db      	uxtb	r3, r3
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d106      	bne.n	8004b98 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f7fc fa94 	bl	80010c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2202      	movs	r2, #2
 8004b9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bae:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004bc0:	431a      	orrs	r2, r3
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	68db      	ldr	r3, [r3, #12]
 8004bc6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bca:	431a      	orrs	r2, r3
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	691b      	ldr	r3, [r3, #16]
 8004bd0:	f003 0302 	and.w	r3, r3, #2
 8004bd4:	431a      	orrs	r2, r3
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	695b      	ldr	r3, [r3, #20]
 8004bda:	f003 0301 	and.w	r3, r3, #1
 8004bde:	431a      	orrs	r2, r3
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	699b      	ldr	r3, [r3, #24]
 8004be4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004be8:	431a      	orrs	r2, r3
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	69db      	ldr	r3, [r3, #28]
 8004bee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004bf2:	431a      	orrs	r2, r3
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6a1b      	ldr	r3, [r3, #32]
 8004bf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bfc:	ea42 0103 	orr.w	r1, r2, r3
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c04:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	430a      	orrs	r2, r1
 8004c0e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	699b      	ldr	r3, [r3, #24]
 8004c14:	0c1b      	lsrs	r3, r3, #16
 8004c16:	f003 0104 	and.w	r1, r3, #4
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c1e:	f003 0210 	and.w	r2, r3, #16
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	430a      	orrs	r2, r1
 8004c28:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	69da      	ldr	r2, [r3, #28]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c38:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2201      	movs	r2, #1
 8004c44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004c48:	2300      	movs	r3, #0
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3708      	adds	r7, #8
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}

08004c52 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004c52:	b084      	sub	sp, #16
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b084      	sub	sp, #16
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
 8004c5c:	f107 001c 	add.w	r0, r7, #28
 8004c60:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	d122      	bne.n	8004cb0 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c6e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	68db      	ldr	r3, [r3, #12]
 8004c7a:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004c7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c82:	687a      	ldr	r2, [r7, #4]
 8004c84:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	68db      	ldr	r3, [r3, #12]
 8004c8a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004c92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d105      	bne.n	8004ca4 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	68db      	ldr	r3, [r3, #12]
 8004c9c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	f000 f99f 	bl	8004fe8 <USB_CoreReset>
 8004caa:	4603      	mov	r3, r0
 8004cac:	73fb      	strb	r3, [r7, #15]
 8004cae:	e01a      	b.n	8004ce6 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	f000 f993 	bl	8004fe8 <USB_CoreReset>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004cc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d106      	bne.n	8004cda <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cd0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	639a      	str	r2, [r3, #56]	; 0x38
 8004cd8:	e005      	b.n	8004ce6 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cde:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d10b      	bne.n	8004d04 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	f043 0206 	orr.w	r2, r3, #6
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	f043 0220 	orr.w	r2, r3, #32
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004d04:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	3710      	adds	r7, #16
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004d10:	b004      	add	sp, #16
 8004d12:	4770      	bx	lr

08004d14 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b083      	sub	sp, #12
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	f043 0201 	orr.w	r2, r3, #1
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004d28:	2300      	movs	r3, #0
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	370c      	adds	r7, #12
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d34:	4770      	bx	lr

08004d36 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004d36:	b480      	push	{r7}
 8004d38:	b083      	sub	sp, #12
 8004d3a:	af00      	add	r7, sp, #0
 8004d3c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	f023 0201 	bic.w	r2, r3, #1
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004d4a:	2300      	movs	r3, #0
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	370c      	adds	r7, #12
 8004d50:	46bd      	mov	sp, r7
 8004d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d56:	4770      	bx	lr

08004d58 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b084      	sub	sp, #16
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
 8004d60:	460b      	mov	r3, r1
 8004d62:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004d64:	2300      	movs	r3, #0
 8004d66:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	68db      	ldr	r3, [r3, #12]
 8004d6c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004d74:	78fb      	ldrb	r3, [r7, #3]
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	d115      	bne.n	8004da6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	68db      	ldr	r3, [r3, #12]
 8004d7e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004d86:	2001      	movs	r0, #1
 8004d88:	f7fc fafa 	bl	8001380 <HAL_Delay>
      ms++;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	3301      	adds	r3, #1
 8004d90:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f000 f919 	bl	8004fca <USB_GetMode>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	2b01      	cmp	r3, #1
 8004d9c:	d01e      	beq.n	8004ddc <USB_SetCurrentMode+0x84>
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2b31      	cmp	r3, #49	; 0x31
 8004da2:	d9f0      	bls.n	8004d86 <USB_SetCurrentMode+0x2e>
 8004da4:	e01a      	b.n	8004ddc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004da6:	78fb      	ldrb	r3, [r7, #3]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d115      	bne.n	8004dd8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	68db      	ldr	r3, [r3, #12]
 8004db0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004db8:	2001      	movs	r0, #1
 8004dba:	f7fc fae1 	bl	8001380 <HAL_Delay>
      ms++;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	3301      	adds	r3, #1
 8004dc2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004dc4:	6878      	ldr	r0, [r7, #4]
 8004dc6:	f000 f900 	bl	8004fca <USB_GetMode>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d005      	beq.n	8004ddc <USB_SetCurrentMode+0x84>
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2b31      	cmp	r3, #49	; 0x31
 8004dd4:	d9f0      	bls.n	8004db8 <USB_SetCurrentMode+0x60>
 8004dd6:	e001      	b.n	8004ddc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	e005      	b.n	8004de8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2b32      	cmp	r3, #50	; 0x32
 8004de0:	d101      	bne.n	8004de6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	e000      	b.n	8004de8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004de6:	2300      	movs	r3, #0
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	3710      	adds	r7, #16
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}

08004df0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b085      	sub	sp, #20
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
 8004df8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	019b      	lsls	r3, r3, #6
 8004e02:	f043 0220 	orr.w	r2, r3, #32
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	3301      	adds	r3, #1
 8004e0e:	60fb      	str	r3, [r7, #12]
 8004e10:	4a08      	ldr	r2, [pc, #32]	; (8004e34 <USB_FlushTxFifo+0x44>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d901      	bls.n	8004e1a <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8004e16:	2303      	movs	r3, #3
 8004e18:	e006      	b.n	8004e28 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	691b      	ldr	r3, [r3, #16]
 8004e1e:	f003 0320 	and.w	r3, r3, #32
 8004e22:	2b20      	cmp	r3, #32
 8004e24:	d0f1      	beq.n	8004e0a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004e26:	2300      	movs	r3, #0
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	3714      	adds	r7, #20
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e32:	4770      	bx	lr
 8004e34:	00030d40 	.word	0x00030d40

08004e38 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b085      	sub	sp, #20
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004e40:	2300      	movs	r3, #0
 8004e42:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2210      	movs	r2, #16
 8004e48:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	3301      	adds	r3, #1
 8004e4e:	60fb      	str	r3, [r7, #12]
 8004e50:	4a08      	ldr	r2, [pc, #32]	; (8004e74 <USB_FlushRxFifo+0x3c>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d901      	bls.n	8004e5a <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8004e56:	2303      	movs	r3, #3
 8004e58:	e006      	b.n	8004e68 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	691b      	ldr	r3, [r3, #16]
 8004e5e:	f003 0310 	and.w	r3, r3, #16
 8004e62:	2b10      	cmp	r3, #16
 8004e64:	d0f1      	beq.n	8004e4a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004e66:	2300      	movs	r3, #0
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3714      	adds	r7, #20
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e72:	4770      	bx	lr
 8004e74:	00030d40 	.word	0x00030d40

08004e78 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b089      	sub	sp, #36	; 0x24
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	60f8      	str	r0, [r7, #12]
 8004e80:	60b9      	str	r1, [r7, #8]
 8004e82:	4611      	mov	r1, r2
 8004e84:	461a      	mov	r2, r3
 8004e86:	460b      	mov	r3, r1
 8004e88:	71fb      	strb	r3, [r7, #7]
 8004e8a:	4613      	mov	r3, r2
 8004e8c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004e96:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d123      	bne.n	8004ee6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004e9e:	88bb      	ldrh	r3, [r7, #4]
 8004ea0:	3303      	adds	r3, #3
 8004ea2:	089b      	lsrs	r3, r3, #2
 8004ea4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	61bb      	str	r3, [r7, #24]
 8004eaa:	e018      	b.n	8004ede <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004eac:	79fb      	ldrb	r3, [r7, #7]
 8004eae:	031a      	lsls	r2, r3, #12
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	4413      	add	r3, r2
 8004eb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004eb8:	461a      	mov	r2, r3
 8004eba:	69fb      	ldr	r3, [r7, #28]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004ec0:	69fb      	ldr	r3, [r7, #28]
 8004ec2:	3301      	adds	r3, #1
 8004ec4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004ec6:	69fb      	ldr	r3, [r7, #28]
 8004ec8:	3301      	adds	r3, #1
 8004eca:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004ecc:	69fb      	ldr	r3, [r7, #28]
 8004ece:	3301      	adds	r3, #1
 8004ed0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004ed2:	69fb      	ldr	r3, [r7, #28]
 8004ed4:	3301      	adds	r3, #1
 8004ed6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004ed8:	69bb      	ldr	r3, [r7, #24]
 8004eda:	3301      	adds	r3, #1
 8004edc:	61bb      	str	r3, [r7, #24]
 8004ede:	69ba      	ldr	r2, [r7, #24]
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	429a      	cmp	r2, r3
 8004ee4:	d3e2      	bcc.n	8004eac <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004ee6:	2300      	movs	r3, #0
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	3724      	adds	r7, #36	; 0x24
 8004eec:	46bd      	mov	sp, r7
 8004eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef2:	4770      	bx	lr

08004ef4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b08b      	sub	sp, #44	; 0x2c
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	60f8      	str	r0, [r7, #12]
 8004efc:	60b9      	str	r1, [r7, #8]
 8004efe:	4613      	mov	r3, r2
 8004f00:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004f0a:	88fb      	ldrh	r3, [r7, #6]
 8004f0c:	089b      	lsrs	r3, r3, #2
 8004f0e:	b29b      	uxth	r3, r3
 8004f10:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004f12:	88fb      	ldrh	r3, [r7, #6]
 8004f14:	f003 0303 	and.w	r3, r3, #3
 8004f18:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	623b      	str	r3, [r7, #32]
 8004f1e:	e014      	b.n	8004f4a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004f20:	69bb      	ldr	r3, [r7, #24]
 8004f22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f2a:	601a      	str	r2, [r3, #0]
    pDest++;
 8004f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f2e:	3301      	adds	r3, #1
 8004f30:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f34:	3301      	adds	r3, #1
 8004f36:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f3a:	3301      	adds	r3, #1
 8004f3c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f40:	3301      	adds	r3, #1
 8004f42:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004f44:	6a3b      	ldr	r3, [r7, #32]
 8004f46:	3301      	adds	r3, #1
 8004f48:	623b      	str	r3, [r7, #32]
 8004f4a:	6a3a      	ldr	r2, [r7, #32]
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	d3e6      	bcc.n	8004f20 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004f52:	8bfb      	ldrh	r3, [r7, #30]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d01e      	beq.n	8004f96 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004f58:	2300      	movs	r3, #0
 8004f5a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004f5c:	69bb      	ldr	r3, [r7, #24]
 8004f5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f62:	461a      	mov	r2, r3
 8004f64:	f107 0310 	add.w	r3, r7, #16
 8004f68:	6812      	ldr	r2, [r2, #0]
 8004f6a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004f6c:	693a      	ldr	r2, [r7, #16]
 8004f6e:	6a3b      	ldr	r3, [r7, #32]
 8004f70:	b2db      	uxtb	r3, r3
 8004f72:	00db      	lsls	r3, r3, #3
 8004f74:	fa22 f303 	lsr.w	r3, r2, r3
 8004f78:	b2da      	uxtb	r2, r3
 8004f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7c:	701a      	strb	r2, [r3, #0]
      i++;
 8004f7e:	6a3b      	ldr	r3, [r7, #32]
 8004f80:	3301      	adds	r3, #1
 8004f82:	623b      	str	r3, [r7, #32]
      pDest++;
 8004f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f86:	3301      	adds	r3, #1
 8004f88:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004f8a:	8bfb      	ldrh	r3, [r7, #30]
 8004f8c:	3b01      	subs	r3, #1
 8004f8e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004f90:	8bfb      	ldrh	r3, [r7, #30]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d1ea      	bne.n	8004f6c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	372c      	adds	r7, #44	; 0x2c
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr

08004fa4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b085      	sub	sp, #20
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	695b      	ldr	r3, [r3, #20]
 8004fb0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	699b      	ldr	r3, [r3, #24]
 8004fb6:	68fa      	ldr	r2, [r7, #12]
 8004fb8:	4013      	ands	r3, r2
 8004fba:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3714      	adds	r7, #20
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc8:	4770      	bx	lr

08004fca <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004fca:	b480      	push	{r7}
 8004fcc:	b083      	sub	sp, #12
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	695b      	ldr	r3, [r3, #20]
 8004fd6:	f003 0301 	and.w	r3, r3, #1
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	370c      	adds	r7, #12
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe4:	4770      	bx	lr
	...

08004fe8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b085      	sub	sp, #20
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	3301      	adds	r3, #1
 8004ff8:	60fb      	str	r3, [r7, #12]
 8004ffa:	4a13      	ldr	r2, [pc, #76]	; (8005048 <USB_CoreReset+0x60>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d901      	bls.n	8005004 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8005000:	2303      	movs	r3, #3
 8005002:	e01a      	b.n	800503a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	691b      	ldr	r3, [r3, #16]
 8005008:	2b00      	cmp	r3, #0
 800500a:	daf3      	bge.n	8004ff4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800500c:	2300      	movs	r3, #0
 800500e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	691b      	ldr	r3, [r3, #16]
 8005014:	f043 0201 	orr.w	r2, r3, #1
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	3301      	adds	r3, #1
 8005020:	60fb      	str	r3, [r7, #12]
 8005022:	4a09      	ldr	r2, [pc, #36]	; (8005048 <USB_CoreReset+0x60>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d901      	bls.n	800502c <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8005028:	2303      	movs	r3, #3
 800502a:	e006      	b.n	800503a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	691b      	ldr	r3, [r3, #16]
 8005030:	f003 0301 	and.w	r3, r3, #1
 8005034:	2b01      	cmp	r3, #1
 8005036:	d0f1      	beq.n	800501c <USB_CoreReset+0x34>

  return HAL_OK;
 8005038:	2300      	movs	r3, #0
}
 800503a:	4618      	mov	r0, r3
 800503c:	3714      	adds	r7, #20
 800503e:	46bd      	mov	sp, r7
 8005040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005044:	4770      	bx	lr
 8005046:	bf00      	nop
 8005048:	00030d40 	.word	0x00030d40

0800504c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800504c:	b084      	sub	sp, #16
 800504e:	b580      	push	{r7, lr}
 8005050:	b084      	sub	sp, #16
 8005052:	af00      	add	r7, sp, #0
 8005054:	6078      	str	r0, [r7, #4]
 8005056:	f107 001c 	add.w	r0, r7, #28
 800505a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005068:	461a      	mov	r2, r3
 800506a:	2300      	movs	r3, #0
 800506c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005072:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800507e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800508a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005096:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800509a:	2b00      	cmp	r3, #0
 800509c:	d018      	beq.n	80050d0 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800509e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d10a      	bne.n	80050ba <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	68ba      	ldr	r2, [r7, #8]
 80050ae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80050b2:	f043 0304 	orr.w	r3, r3, #4
 80050b6:	6013      	str	r3, [r2, #0]
 80050b8:	e014      	b.n	80050e4 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	68ba      	ldr	r2, [r7, #8]
 80050c4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80050c8:	f023 0304 	bic.w	r3, r3, #4
 80050cc:	6013      	str	r3, [r2, #0]
 80050ce:	e009      	b.n	80050e4 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	68ba      	ldr	r2, [r7, #8]
 80050da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80050de:	f023 0304 	bic.w	r3, r3, #4
 80050e2:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80050e4:	2110      	movs	r1, #16
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f7ff fe82 	bl	8004df0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	f7ff fea3 	bl	8004e38 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80050f2:	2300      	movs	r3, #0
 80050f4:	60fb      	str	r3, [r7, #12]
 80050f6:	e015      	b.n	8005124 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	015a      	lsls	r2, r3, #5
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	4413      	add	r3, r2
 8005100:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005104:	461a      	mov	r2, r3
 8005106:	f04f 33ff 	mov.w	r3, #4294967295
 800510a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	015a      	lsls	r2, r3, #5
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	4413      	add	r3, r2
 8005114:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005118:	461a      	mov	r2, r3
 800511a:	2300      	movs	r3, #0
 800511c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	3301      	adds	r3, #1
 8005122:	60fb      	str	r3, [r7, #12]
 8005124:	6a3b      	ldr	r3, [r7, #32]
 8005126:	68fa      	ldr	r2, [r7, #12]
 8005128:	429a      	cmp	r2, r3
 800512a:	d3e5      	bcc.n	80050f8 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2200      	movs	r2, #0
 8005130:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	f04f 32ff 	mov.w	r2, #4294967295
 8005138:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800513e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005142:	2b00      	cmp	r3, #0
 8005144:	d00b      	beq.n	800515e <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f44f 7200 	mov.w	r2, #512	; 0x200
 800514c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	4a13      	ldr	r2, [pc, #76]	; (80051a0 <USB_HostInit+0x154>)
 8005152:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	4a13      	ldr	r2, [pc, #76]	; (80051a4 <USB_HostInit+0x158>)
 8005158:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800515c:	e009      	b.n	8005172 <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2280      	movs	r2, #128	; 0x80
 8005162:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	4a10      	ldr	r2, [pc, #64]	; (80051a8 <USB_HostInit+0x15c>)
 8005168:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	4a0f      	ldr	r2, [pc, #60]	; (80051ac <USB_HostInit+0x160>)
 800516e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005174:	2b00      	cmp	r3, #0
 8005176:	d105      	bne.n	8005184 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	699b      	ldr	r3, [r3, #24]
 800517c:	f043 0210 	orr.w	r2, r3, #16
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	699a      	ldr	r2, [r3, #24]
 8005188:	4b09      	ldr	r3, [pc, #36]	; (80051b0 <USB_HostInit+0x164>)
 800518a:	4313      	orrs	r3, r2
 800518c:	687a      	ldr	r2, [r7, #4]
 800518e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8005190:	2300      	movs	r3, #0
}
 8005192:	4618      	mov	r0, r3
 8005194:	3710      	adds	r7, #16
 8005196:	46bd      	mov	sp, r7
 8005198:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800519c:	b004      	add	sp, #16
 800519e:	4770      	bx	lr
 80051a0:	01000200 	.word	0x01000200
 80051a4:	00e00300 	.word	0x00e00300
 80051a8:	00600080 	.word	0x00600080
 80051ac:	004000e0 	.word	0x004000e0
 80051b0:	a3200008 	.word	0xa3200008

080051b4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b085      	sub	sp, #20
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
 80051bc:	460b      	mov	r3, r1
 80051be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	68fa      	ldr	r2, [r7, #12]
 80051ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80051d2:	f023 0303 	bic.w	r3, r3, #3
 80051d6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051de:	681a      	ldr	r2, [r3, #0]
 80051e0:	78fb      	ldrb	r3, [r7, #3]
 80051e2:	f003 0303 	and.w	r3, r3, #3
 80051e6:	68f9      	ldr	r1, [r7, #12]
 80051e8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80051ec:	4313      	orrs	r3, r2
 80051ee:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80051f0:	78fb      	ldrb	r3, [r7, #3]
 80051f2:	2b01      	cmp	r3, #1
 80051f4:	d107      	bne.n	8005206 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051fc:	461a      	mov	r2, r3
 80051fe:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005202:	6053      	str	r3, [r2, #4]
 8005204:	e009      	b.n	800521a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005206:	78fb      	ldrb	r3, [r7, #3]
 8005208:	2b02      	cmp	r3, #2
 800520a:	d106      	bne.n	800521a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005212:	461a      	mov	r2, r3
 8005214:	f241 7370 	movw	r3, #6000	; 0x1770
 8005218:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800521a:	2300      	movs	r3, #0
}
 800521c:	4618      	mov	r0, r3
 800521e:	3714      	adds	r7, #20
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr

08005228 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b084      	sub	sp, #16
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005234:	2300      	movs	r3, #0
 8005236:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005248:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	68fa      	ldr	r2, [r7, #12]
 800524e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005252:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005256:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005258:	2064      	movs	r0, #100	; 0x64
 800525a:	f7fc f891 	bl	8001380 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	68fa      	ldr	r2, [r7, #12]
 8005262:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005266:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800526a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800526c:	200a      	movs	r0, #10
 800526e:	f7fc f887 	bl	8001380 <HAL_Delay>

  return HAL_OK;
 8005272:	2300      	movs	r3, #0
}
 8005274:	4618      	mov	r0, r3
 8005276:	3710      	adds	r7, #16
 8005278:	46bd      	mov	sp, r7
 800527a:	bd80      	pop	{r7, pc}

0800527c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800527c:	b480      	push	{r7}
 800527e:	b085      	sub	sp, #20
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
 8005284:	460b      	mov	r3, r1
 8005286:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800528c:	2300      	movs	r3, #0
 800528e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80052a0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d109      	bne.n	80052c0 <USB_DriveVbus+0x44>
 80052ac:	78fb      	ldrb	r3, [r7, #3]
 80052ae:	2b01      	cmp	r3, #1
 80052b0:	d106      	bne.n	80052c0 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	68fa      	ldr	r2, [r7, #12]
 80052b6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80052ba:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80052be:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80052c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052ca:	d109      	bne.n	80052e0 <USB_DriveVbus+0x64>
 80052cc:	78fb      	ldrb	r3, [r7, #3]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d106      	bne.n	80052e0 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	68fa      	ldr	r2, [r7, #12]
 80052d6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80052da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80052de:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80052e0:	2300      	movs	r3, #0
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	3714      	adds	r7, #20
 80052e6:	46bd      	mov	sp, r7
 80052e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ec:	4770      	bx	lr

080052ee <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80052ee:	b480      	push	{r7}
 80052f0:	b085      	sub	sp, #20
 80052f2:	af00      	add	r7, sp, #0
 80052f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80052fa:	2300      	movs	r3, #0
 80052fc:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	0c5b      	lsrs	r3, r3, #17
 800530c:	f003 0303 	and.w	r3, r3, #3
}
 8005310:	4618      	mov	r0, r3
 8005312:	3714      	adds	r7, #20
 8005314:	46bd      	mov	sp, r7
 8005316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531a:	4770      	bx	lr

0800531c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800531c:	b480      	push	{r7}
 800531e:	b085      	sub	sp, #20
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800532e:	689b      	ldr	r3, [r3, #8]
 8005330:	b29b      	uxth	r3, r3
}
 8005332:	4618      	mov	r0, r3
 8005334:	3714      	adds	r7, #20
 8005336:	46bd      	mov	sp, r7
 8005338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533c:	4770      	bx	lr
	...

08005340 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b088      	sub	sp, #32
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
 8005348:	4608      	mov	r0, r1
 800534a:	4611      	mov	r1, r2
 800534c:	461a      	mov	r2, r3
 800534e:	4603      	mov	r3, r0
 8005350:	70fb      	strb	r3, [r7, #3]
 8005352:	460b      	mov	r3, r1
 8005354:	70bb      	strb	r3, [r7, #2]
 8005356:	4613      	mov	r3, r2
 8005358:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800535a:	2300      	movs	r3, #0
 800535c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005362:	78fb      	ldrb	r3, [r7, #3]
 8005364:	015a      	lsls	r2, r3, #5
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	4413      	add	r3, r2
 800536a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800536e:	461a      	mov	r2, r3
 8005370:	f04f 33ff 	mov.w	r3, #4294967295
 8005374:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005376:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800537a:	2b03      	cmp	r3, #3
 800537c:	d87e      	bhi.n	800547c <USB_HC_Init+0x13c>
 800537e:	a201      	add	r2, pc, #4	; (adr r2, 8005384 <USB_HC_Init+0x44>)
 8005380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005384:	08005395 	.word	0x08005395
 8005388:	0800543f 	.word	0x0800543f
 800538c:	08005395 	.word	0x08005395
 8005390:	08005401 	.word	0x08005401
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005394:	78fb      	ldrb	r3, [r7, #3]
 8005396:	015a      	lsls	r2, r3, #5
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	4413      	add	r3, r2
 800539c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053a0:	461a      	mov	r2, r3
 80053a2:	f240 439d 	movw	r3, #1181	; 0x49d
 80053a6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80053a8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	da10      	bge.n	80053d2 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80053b0:	78fb      	ldrb	r3, [r7, #3]
 80053b2:	015a      	lsls	r2, r3, #5
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	4413      	add	r3, r2
 80053b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053bc:	68db      	ldr	r3, [r3, #12]
 80053be:	78fa      	ldrb	r2, [r7, #3]
 80053c0:	0151      	lsls	r1, r2, #5
 80053c2:	693a      	ldr	r2, [r7, #16]
 80053c4:	440a      	add	r2, r1
 80053c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053ce:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 80053d0:	e057      	b.n	8005482 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d051      	beq.n	8005482 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80053de:	78fb      	ldrb	r3, [r7, #3]
 80053e0:	015a      	lsls	r2, r3, #5
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	4413      	add	r3, r2
 80053e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053ea:	68db      	ldr	r3, [r3, #12]
 80053ec:	78fa      	ldrb	r2, [r7, #3]
 80053ee:	0151      	lsls	r1, r2, #5
 80053f0:	693a      	ldr	r2, [r7, #16]
 80053f2:	440a      	add	r2, r1
 80053f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053f8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80053fc:	60d3      	str	r3, [r2, #12]
      break;
 80053fe:	e040      	b.n	8005482 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005400:	78fb      	ldrb	r3, [r7, #3]
 8005402:	015a      	lsls	r2, r3, #5
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	4413      	add	r3, r2
 8005408:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800540c:	461a      	mov	r2, r3
 800540e:	f240 639d 	movw	r3, #1693	; 0x69d
 8005412:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005414:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005418:	2b00      	cmp	r3, #0
 800541a:	da34      	bge.n	8005486 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800541c:	78fb      	ldrb	r3, [r7, #3]
 800541e:	015a      	lsls	r2, r3, #5
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	4413      	add	r3, r2
 8005424:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005428:	68db      	ldr	r3, [r3, #12]
 800542a:	78fa      	ldrb	r2, [r7, #3]
 800542c:	0151      	lsls	r1, r2, #5
 800542e:	693a      	ldr	r2, [r7, #16]
 8005430:	440a      	add	r2, r1
 8005432:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005436:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800543a:	60d3      	str	r3, [r2, #12]
      }

      break;
 800543c:	e023      	b.n	8005486 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800543e:	78fb      	ldrb	r3, [r7, #3]
 8005440:	015a      	lsls	r2, r3, #5
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	4413      	add	r3, r2
 8005446:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800544a:	461a      	mov	r2, r3
 800544c:	f240 2325 	movw	r3, #549	; 0x225
 8005450:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005452:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005456:	2b00      	cmp	r3, #0
 8005458:	da17      	bge.n	800548a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800545a:	78fb      	ldrb	r3, [r7, #3]
 800545c:	015a      	lsls	r2, r3, #5
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	4413      	add	r3, r2
 8005462:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005466:	68db      	ldr	r3, [r3, #12]
 8005468:	78fa      	ldrb	r2, [r7, #3]
 800546a:	0151      	lsls	r1, r2, #5
 800546c:	693a      	ldr	r2, [r7, #16]
 800546e:	440a      	add	r2, r1
 8005470:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005474:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005478:	60d3      	str	r3, [r2, #12]
      }
      break;
 800547a:	e006      	b.n	800548a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800547c:	2301      	movs	r3, #1
 800547e:	77fb      	strb	r3, [r7, #31]
      break;
 8005480:	e004      	b.n	800548c <USB_HC_Init+0x14c>
      break;
 8005482:	bf00      	nop
 8005484:	e002      	b.n	800548c <USB_HC_Init+0x14c>
      break;
 8005486:	bf00      	nop
 8005488:	e000      	b.n	800548c <USB_HC_Init+0x14c>
      break;
 800548a:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800548c:	693b      	ldr	r3, [r7, #16]
 800548e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005492:	699a      	ldr	r2, [r3, #24]
 8005494:	78fb      	ldrb	r3, [r7, #3]
 8005496:	f003 030f 	and.w	r3, r3, #15
 800549a:	2101      	movs	r1, #1
 800549c:	fa01 f303 	lsl.w	r3, r1, r3
 80054a0:	6939      	ldr	r1, [r7, #16]
 80054a2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80054a6:	4313      	orrs	r3, r2
 80054a8:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	699b      	ldr	r3, [r3, #24]
 80054ae:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80054b6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	da03      	bge.n	80054c6 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80054be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054c2:	61bb      	str	r3, [r7, #24]
 80054c4:	e001      	b.n	80054ca <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 80054c6:	2300      	movs	r3, #0
 80054c8:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f7ff ff0f 	bl	80052ee <USB_GetHostSpeed>
 80054d0:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80054d2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80054d6:	2b02      	cmp	r3, #2
 80054d8:	d106      	bne.n	80054e8 <USB_HC_Init+0x1a8>
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2b02      	cmp	r3, #2
 80054de:	d003      	beq.n	80054e8 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80054e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80054e4:	617b      	str	r3, [r7, #20]
 80054e6:	e001      	b.n	80054ec <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80054e8:	2300      	movs	r3, #0
 80054ea:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80054ec:	787b      	ldrb	r3, [r7, #1]
 80054ee:	059b      	lsls	r3, r3, #22
 80054f0:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80054f4:	78bb      	ldrb	r3, [r7, #2]
 80054f6:	02db      	lsls	r3, r3, #11
 80054f8:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80054fc:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80054fe:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005502:	049b      	lsls	r3, r3, #18
 8005504:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005508:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800550a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800550c:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005510:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005512:	69bb      	ldr	r3, [r7, #24]
 8005514:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005516:	78fb      	ldrb	r3, [r7, #3]
 8005518:	0159      	lsls	r1, r3, #5
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	440b      	add	r3, r1
 800551e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005522:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005528:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800552a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800552e:	2b03      	cmp	r3, #3
 8005530:	d10f      	bne.n	8005552 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8005532:	78fb      	ldrb	r3, [r7, #3]
 8005534:	015a      	lsls	r2, r3, #5
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	4413      	add	r3, r2
 800553a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	78fa      	ldrb	r2, [r7, #3]
 8005542:	0151      	lsls	r1, r2, #5
 8005544:	693a      	ldr	r2, [r7, #16]
 8005546:	440a      	add	r2, r1
 8005548:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800554c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005550:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005552:	7ffb      	ldrb	r3, [r7, #31]
}
 8005554:	4618      	mov	r0, r3
 8005556:	3720      	adds	r7, #32
 8005558:	46bd      	mov	sp, r7
 800555a:	bd80      	pop	{r7, pc}

0800555c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b08c      	sub	sp, #48	; 0x30
 8005560:	af02      	add	r7, sp, #8
 8005562:	60f8      	str	r0, [r7, #12]
 8005564:	60b9      	str	r1, [r7, #8]
 8005566:	4613      	mov	r3, r2
 8005568:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	785b      	ldrb	r3, [r3, #1]
 8005572:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005574:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005578:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800557e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005582:	2b00      	cmp	r3, #0
 8005584:	d02d      	beq.n	80055e2 <USB_HC_StartXfer+0x86>
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	791b      	ldrb	r3, [r3, #4]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d129      	bne.n	80055e2 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800558e:	79fb      	ldrb	r3, [r7, #7]
 8005590:	2b01      	cmp	r3, #1
 8005592:	d117      	bne.n	80055c4 <USB_HC_StartXfer+0x68>
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	79db      	ldrb	r3, [r3, #7]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d003      	beq.n	80055a4 <USB_HC_StartXfer+0x48>
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	79db      	ldrb	r3, [r3, #7]
 80055a0:	2b02      	cmp	r3, #2
 80055a2:	d10f      	bne.n	80055c4 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80055a4:	69fb      	ldr	r3, [r7, #28]
 80055a6:	015a      	lsls	r2, r3, #5
 80055a8:	6a3b      	ldr	r3, [r7, #32]
 80055aa:	4413      	add	r3, r2
 80055ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055b0:	68db      	ldr	r3, [r3, #12]
 80055b2:	69fa      	ldr	r2, [r7, #28]
 80055b4:	0151      	lsls	r1, r2, #5
 80055b6:	6a3a      	ldr	r2, [r7, #32]
 80055b8:	440a      	add	r2, r1
 80055ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80055be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055c2:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80055c4:	79fb      	ldrb	r3, [r7, #7]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d10b      	bne.n	80055e2 <USB_HC_StartXfer+0x86>
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	795b      	ldrb	r3, [r3, #5]
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	d107      	bne.n	80055e2 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	785b      	ldrb	r3, [r3, #1]
 80055d6:	4619      	mov	r1, r3
 80055d8:	68f8      	ldr	r0, [r7, #12]
 80055da:	f000 fa2f 	bl	8005a3c <USB_DoPing>
      return HAL_OK;
 80055de:	2300      	movs	r3, #0
 80055e0:	e0f8      	b.n	80057d4 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	695b      	ldr	r3, [r3, #20]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d018      	beq.n	800561c <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	695b      	ldr	r3, [r3, #20]
 80055ee:	68ba      	ldr	r2, [r7, #8]
 80055f0:	8912      	ldrh	r2, [r2, #8]
 80055f2:	4413      	add	r3, r2
 80055f4:	3b01      	subs	r3, #1
 80055f6:	68ba      	ldr	r2, [r7, #8]
 80055f8:	8912      	ldrh	r2, [r2, #8]
 80055fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80055fe:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8005600:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005602:	8b7b      	ldrh	r3, [r7, #26]
 8005604:	429a      	cmp	r2, r3
 8005606:	d90b      	bls.n	8005620 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8005608:	8b7b      	ldrh	r3, [r7, #26]
 800560a:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800560c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800560e:	68ba      	ldr	r2, [r7, #8]
 8005610:	8912      	ldrh	r2, [r2, #8]
 8005612:	fb02 f203 	mul.w	r2, r2, r3
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	611a      	str	r2, [r3, #16]
 800561a:	e001      	b.n	8005620 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800561c:	2301      	movs	r3, #1
 800561e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	78db      	ldrb	r3, [r3, #3]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d007      	beq.n	8005638 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005628:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800562a:	68ba      	ldr	r2, [r7, #8]
 800562c:	8912      	ldrh	r2, [r2, #8]
 800562e:	fb02 f203 	mul.w	r2, r2, r3
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	611a      	str	r2, [r3, #16]
 8005636:	e003      	b.n	8005640 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	695a      	ldr	r2, [r3, #20]
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	691b      	ldr	r3, [r3, #16]
 8005644:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005648:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800564a:	04d9      	lsls	r1, r3, #19
 800564c:	4b63      	ldr	r3, [pc, #396]	; (80057dc <USB_HC_StartXfer+0x280>)
 800564e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005650:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	7a9b      	ldrb	r3, [r3, #10]
 8005656:	075b      	lsls	r3, r3, #29
 8005658:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800565c:	69f9      	ldr	r1, [r7, #28]
 800565e:	0148      	lsls	r0, r1, #5
 8005660:	6a39      	ldr	r1, [r7, #32]
 8005662:	4401      	add	r1, r0
 8005664:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005668:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800566a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800566c:	79fb      	ldrb	r3, [r7, #7]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d009      	beq.n	8005686 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	68d9      	ldr	r1, [r3, #12]
 8005676:	69fb      	ldr	r3, [r7, #28]
 8005678:	015a      	lsls	r2, r3, #5
 800567a:	6a3b      	ldr	r3, [r7, #32]
 800567c:	4413      	add	r3, r2
 800567e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005682:	460a      	mov	r2, r1
 8005684:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005686:	6a3b      	ldr	r3, [r7, #32]
 8005688:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800568c:	689b      	ldr	r3, [r3, #8]
 800568e:	f003 0301 	and.w	r3, r3, #1
 8005692:	2b00      	cmp	r3, #0
 8005694:	bf0c      	ite	eq
 8005696:	2301      	moveq	r3, #1
 8005698:	2300      	movne	r3, #0
 800569a:	b2db      	uxtb	r3, r3
 800569c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800569e:	69fb      	ldr	r3, [r7, #28]
 80056a0:	015a      	lsls	r2, r3, #5
 80056a2:	6a3b      	ldr	r3, [r7, #32]
 80056a4:	4413      	add	r3, r2
 80056a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	69fa      	ldr	r2, [r7, #28]
 80056ae:	0151      	lsls	r1, r2, #5
 80056b0:	6a3a      	ldr	r2, [r7, #32]
 80056b2:	440a      	add	r2, r1
 80056b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80056b8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80056bc:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80056be:	69fb      	ldr	r3, [r7, #28]
 80056c0:	015a      	lsls	r2, r3, #5
 80056c2:	6a3b      	ldr	r3, [r7, #32]
 80056c4:	4413      	add	r3, r2
 80056c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056ca:	681a      	ldr	r2, [r3, #0]
 80056cc:	7e7b      	ldrb	r3, [r7, #25]
 80056ce:	075b      	lsls	r3, r3, #29
 80056d0:	69f9      	ldr	r1, [r7, #28]
 80056d2:	0148      	lsls	r0, r1, #5
 80056d4:	6a39      	ldr	r1, [r7, #32]
 80056d6:	4401      	add	r1, r0
 80056d8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80056dc:	4313      	orrs	r3, r2
 80056de:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80056e0:	69fb      	ldr	r3, [r7, #28]
 80056e2:	015a      	lsls	r2, r3, #5
 80056e4:	6a3b      	ldr	r3, [r7, #32]
 80056e6:	4413      	add	r3, r2
 80056e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80056f6:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	78db      	ldrb	r3, [r3, #3]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d004      	beq.n	800570a <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005706:	613b      	str	r3, [r7, #16]
 8005708:	e003      	b.n	8005712 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005710:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005718:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800571a:	69fb      	ldr	r3, [r7, #28]
 800571c:	015a      	lsls	r2, r3, #5
 800571e:	6a3b      	ldr	r3, [r7, #32]
 8005720:	4413      	add	r3, r2
 8005722:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005726:	461a      	mov	r2, r3
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800572c:	79fb      	ldrb	r3, [r7, #7]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d001      	beq.n	8005736 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8005732:	2300      	movs	r3, #0
 8005734:	e04e      	b.n	80057d4 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	78db      	ldrb	r3, [r3, #3]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d149      	bne.n	80057d2 <USB_HC_StartXfer+0x276>
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	695b      	ldr	r3, [r3, #20]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d045      	beq.n	80057d2 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	79db      	ldrb	r3, [r3, #7]
 800574a:	2b03      	cmp	r3, #3
 800574c:	d830      	bhi.n	80057b0 <USB_HC_StartXfer+0x254>
 800574e:	a201      	add	r2, pc, #4	; (adr r2, 8005754 <USB_HC_StartXfer+0x1f8>)
 8005750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005754:	08005765 	.word	0x08005765
 8005758:	08005789 	.word	0x08005789
 800575c:	08005765 	.word	0x08005765
 8005760:	08005789 	.word	0x08005789
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	695b      	ldr	r3, [r3, #20]
 8005768:	3303      	adds	r3, #3
 800576a:	089b      	lsrs	r3, r3, #2
 800576c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800576e:	8afa      	ldrh	r2, [r7, #22]
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005774:	b29b      	uxth	r3, r3
 8005776:	429a      	cmp	r2, r3
 8005778:	d91c      	bls.n	80057b4 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	699b      	ldr	r3, [r3, #24]
 800577e:	f043 0220 	orr.w	r2, r3, #32
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	619a      	str	r2, [r3, #24]
        }
        break;
 8005786:	e015      	b.n	80057b4 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	695b      	ldr	r3, [r3, #20]
 800578c:	3303      	adds	r3, #3
 800578e:	089b      	lsrs	r3, r3, #2
 8005790:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005792:	8afa      	ldrh	r2, [r7, #22]
 8005794:	6a3b      	ldr	r3, [r7, #32]
 8005796:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800579a:	691b      	ldr	r3, [r3, #16]
 800579c:	b29b      	uxth	r3, r3
 800579e:	429a      	cmp	r2, r3
 80057a0:	d90a      	bls.n	80057b8 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	699b      	ldr	r3, [r3, #24]
 80057a6:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	619a      	str	r2, [r3, #24]
        }
        break;
 80057ae:	e003      	b.n	80057b8 <USB_HC_StartXfer+0x25c>

      default:
        break;
 80057b0:	bf00      	nop
 80057b2:	e002      	b.n	80057ba <USB_HC_StartXfer+0x25e>
        break;
 80057b4:	bf00      	nop
 80057b6:	e000      	b.n	80057ba <USB_HC_StartXfer+0x25e>
        break;
 80057b8:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	68d9      	ldr	r1, [r3, #12]
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	785a      	ldrb	r2, [r3, #1]
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	695b      	ldr	r3, [r3, #20]
 80057c6:	b29b      	uxth	r3, r3
 80057c8:	2000      	movs	r0, #0
 80057ca:	9000      	str	r0, [sp, #0]
 80057cc:	68f8      	ldr	r0, [r7, #12]
 80057ce:	f7ff fb53 	bl	8004e78 <USB_WritePacket>
  }

  return HAL_OK;
 80057d2:	2300      	movs	r3, #0
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	3728      	adds	r7, #40	; 0x28
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}
 80057dc:	1ff80000 	.word	0x1ff80000

080057e0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b085      	sub	sp, #20
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80057f2:	695b      	ldr	r3, [r3, #20]
 80057f4:	b29b      	uxth	r3, r3
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	3714      	adds	r7, #20
 80057fa:	46bd      	mov	sp, r7
 80057fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005800:	4770      	bx	lr

08005802 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005802:	b480      	push	{r7}
 8005804:	b089      	sub	sp, #36	; 0x24
 8005806:	af00      	add	r7, sp, #0
 8005808:	6078      	str	r0, [r7, #4]
 800580a:	460b      	mov	r3, r1
 800580c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8005812:	78fb      	ldrb	r3, [r7, #3]
 8005814:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8005816:	2300      	movs	r3, #0
 8005818:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	015a      	lsls	r2, r3, #5
 800581e:	69bb      	ldr	r3, [r7, #24]
 8005820:	4413      	add	r3, r2
 8005822:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	0c9b      	lsrs	r3, r3, #18
 800582a:	f003 0303 	and.w	r3, r3, #3
 800582e:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	015a      	lsls	r2, r3, #5
 8005834:	69bb      	ldr	r3, [r7, #24]
 8005836:	4413      	add	r3, r2
 8005838:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	0fdb      	lsrs	r3, r3, #31
 8005840:	f003 0301 	and.w	r3, r3, #1
 8005844:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	689b      	ldr	r3, [r3, #8]
 800584a:	f003 0320 	and.w	r3, r3, #32
 800584e:	2b20      	cmp	r3, #32
 8005850:	d104      	bne.n	800585c <USB_HC_Halt+0x5a>
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d101      	bne.n	800585c <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8005858:	2300      	movs	r3, #0
 800585a:	e0e8      	b.n	8005a2e <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d002      	beq.n	8005868 <USB_HC_Halt+0x66>
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	2b02      	cmp	r3, #2
 8005866:	d173      	bne.n	8005950 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	015a      	lsls	r2, r3, #5
 800586c:	69bb      	ldr	r3, [r7, #24]
 800586e:	4413      	add	r3, r2
 8005870:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	697a      	ldr	r2, [r7, #20]
 8005878:	0151      	lsls	r1, r2, #5
 800587a:	69ba      	ldr	r2, [r7, #24]
 800587c:	440a      	add	r2, r1
 800587e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005882:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005886:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	689b      	ldr	r3, [r3, #8]
 800588c:	f003 0320 	and.w	r3, r3, #32
 8005890:	2b00      	cmp	r3, #0
 8005892:	f040 80cb 	bne.w	8005a2c <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800589a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d143      	bne.n	800592a <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	015a      	lsls	r2, r3, #5
 80058a6:	69bb      	ldr	r3, [r7, #24]
 80058a8:	4413      	add	r3, r2
 80058aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	697a      	ldr	r2, [r7, #20]
 80058b2:	0151      	lsls	r1, r2, #5
 80058b4:	69ba      	ldr	r2, [r7, #24]
 80058b6:	440a      	add	r2, r1
 80058b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80058bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80058c0:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	015a      	lsls	r2, r3, #5
 80058c6:	69bb      	ldr	r3, [r7, #24]
 80058c8:	4413      	add	r3, r2
 80058ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	697a      	ldr	r2, [r7, #20]
 80058d2:	0151      	lsls	r1, r2, #5
 80058d4:	69ba      	ldr	r2, [r7, #24]
 80058d6:	440a      	add	r2, r1
 80058d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80058dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80058e0:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	015a      	lsls	r2, r3, #5
 80058e6:	69bb      	ldr	r3, [r7, #24]
 80058e8:	4413      	add	r3, r2
 80058ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	697a      	ldr	r2, [r7, #20]
 80058f2:	0151      	lsls	r1, r2, #5
 80058f4:	69ba      	ldr	r2, [r7, #24]
 80058f6:	440a      	add	r2, r1
 80058f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80058fc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005900:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8005902:	69fb      	ldr	r3, [r7, #28]
 8005904:	3301      	adds	r3, #1
 8005906:	61fb      	str	r3, [r7, #28]
 8005908:	69fb      	ldr	r3, [r7, #28]
 800590a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800590e:	d81d      	bhi.n	800594c <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	015a      	lsls	r2, r3, #5
 8005914:	69bb      	ldr	r3, [r7, #24]
 8005916:	4413      	add	r3, r2
 8005918:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005922:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005926:	d0ec      	beq.n	8005902 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005928:	e080      	b.n	8005a2c <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	015a      	lsls	r2, r3, #5
 800592e:	69bb      	ldr	r3, [r7, #24]
 8005930:	4413      	add	r3, r2
 8005932:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	697a      	ldr	r2, [r7, #20]
 800593a:	0151      	lsls	r1, r2, #5
 800593c:	69ba      	ldr	r2, [r7, #24]
 800593e:	440a      	add	r2, r1
 8005940:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005944:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005948:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800594a:	e06f      	b.n	8005a2c <USB_HC_Halt+0x22a>
            break;
 800594c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800594e:	e06d      	b.n	8005a2c <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	015a      	lsls	r2, r3, #5
 8005954:	69bb      	ldr	r3, [r7, #24]
 8005956:	4413      	add	r3, r2
 8005958:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	697a      	ldr	r2, [r7, #20]
 8005960:	0151      	lsls	r1, r2, #5
 8005962:	69ba      	ldr	r2, [r7, #24]
 8005964:	440a      	add	r2, r1
 8005966:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800596a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800596e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005970:	69bb      	ldr	r3, [r7, #24]
 8005972:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005976:	691b      	ldr	r3, [r3, #16]
 8005978:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800597c:	2b00      	cmp	r3, #0
 800597e:	d143      	bne.n	8005a08 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	015a      	lsls	r2, r3, #5
 8005984:	69bb      	ldr	r3, [r7, #24]
 8005986:	4413      	add	r3, r2
 8005988:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	697a      	ldr	r2, [r7, #20]
 8005990:	0151      	lsls	r1, r2, #5
 8005992:	69ba      	ldr	r2, [r7, #24]
 8005994:	440a      	add	r2, r1
 8005996:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800599a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800599e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	015a      	lsls	r2, r3, #5
 80059a4:	69bb      	ldr	r3, [r7, #24]
 80059a6:	4413      	add	r3, r2
 80059a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	697a      	ldr	r2, [r7, #20]
 80059b0:	0151      	lsls	r1, r2, #5
 80059b2:	69ba      	ldr	r2, [r7, #24]
 80059b4:	440a      	add	r2, r1
 80059b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80059ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80059be:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	015a      	lsls	r2, r3, #5
 80059c4:	69bb      	ldr	r3, [r7, #24]
 80059c6:	4413      	add	r3, r2
 80059c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	697a      	ldr	r2, [r7, #20]
 80059d0:	0151      	lsls	r1, r2, #5
 80059d2:	69ba      	ldr	r2, [r7, #24]
 80059d4:	440a      	add	r2, r1
 80059d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80059da:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80059de:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80059e0:	69fb      	ldr	r3, [r7, #28]
 80059e2:	3301      	adds	r3, #1
 80059e4:	61fb      	str	r3, [r7, #28]
 80059e6:	69fb      	ldr	r3, [r7, #28]
 80059e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80059ec:	d81d      	bhi.n	8005a2a <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80059ee:	697b      	ldr	r3, [r7, #20]
 80059f0:	015a      	lsls	r2, r3, #5
 80059f2:	69bb      	ldr	r3, [r7, #24]
 80059f4:	4413      	add	r3, r2
 80059f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a00:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a04:	d0ec      	beq.n	80059e0 <USB_HC_Halt+0x1de>
 8005a06:	e011      	b.n	8005a2c <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	015a      	lsls	r2, r3, #5
 8005a0c:	69bb      	ldr	r3, [r7, #24]
 8005a0e:	4413      	add	r3, r2
 8005a10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	697a      	ldr	r2, [r7, #20]
 8005a18:	0151      	lsls	r1, r2, #5
 8005a1a:	69ba      	ldr	r2, [r7, #24]
 8005a1c:	440a      	add	r2, r1
 8005a1e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005a26:	6013      	str	r3, [r2, #0]
 8005a28:	e000      	b.n	8005a2c <USB_HC_Halt+0x22a>
          break;
 8005a2a:	bf00      	nop
    }
  }

  return HAL_OK;
 8005a2c:	2300      	movs	r3, #0
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3724      	adds	r7, #36	; 0x24
 8005a32:	46bd      	mov	sp, r7
 8005a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a38:	4770      	bx	lr
	...

08005a3c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b087      	sub	sp, #28
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
 8005a44:	460b      	mov	r3, r1
 8005a46:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005a4c:	78fb      	ldrb	r3, [r7, #3]
 8005a4e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005a50:	2301      	movs	r3, #1
 8005a52:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	04da      	lsls	r2, r3, #19
 8005a58:	4b15      	ldr	r3, [pc, #84]	; (8005ab0 <USB_DoPing+0x74>)
 8005a5a:	4013      	ands	r3, r2
 8005a5c:	693a      	ldr	r2, [r7, #16]
 8005a5e:	0151      	lsls	r1, r2, #5
 8005a60:	697a      	ldr	r2, [r7, #20]
 8005a62:	440a      	add	r2, r1
 8005a64:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a68:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005a6c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	015a      	lsls	r2, r3, #5
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	4413      	add	r3, r2
 8005a76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005a84:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005a8c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	015a      	lsls	r2, r3, #5
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	4413      	add	r3, r2
 8005a96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a9a:	461a      	mov	r2, r3
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005aa0:	2300      	movs	r3, #0
}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	371c      	adds	r7, #28
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aac:	4770      	bx	lr
 8005aae:	bf00      	nop
 8005ab0:	1ff80000 	.word	0x1ff80000

08005ab4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b086      	sub	sp, #24
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	f7ff f936 	bl	8004d36 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8005aca:	2110      	movs	r1, #16
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	f7ff f98f 	bl	8004df0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	f7ff f9b0 	bl	8004e38 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005ad8:	2300      	movs	r3, #0
 8005ada:	613b      	str	r3, [r7, #16]
 8005adc:	e01f      	b.n	8005b1e <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	015a      	lsls	r2, r3, #5
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	4413      	add	r3, r2
 8005ae6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005af4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005afc:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005b04:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	015a      	lsls	r2, r3, #5
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	4413      	add	r3, r2
 8005b0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b12:	461a      	mov	r2, r3
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	3301      	adds	r3, #1
 8005b1c:	613b      	str	r3, [r7, #16]
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	2b0f      	cmp	r3, #15
 8005b22:	d9dc      	bls.n	8005ade <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005b24:	2300      	movs	r3, #0
 8005b26:	613b      	str	r3, [r7, #16]
 8005b28:	e034      	b.n	8005b94 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	015a      	lsls	r2, r3, #5
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	4413      	add	r3, r2
 8005b32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b40:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005b48:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005b50:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	015a      	lsls	r2, r3, #5
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	4413      	add	r3, r2
 8005b5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b5e:	461a      	mov	r2, r3
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	3301      	adds	r3, #1
 8005b68:	617b      	str	r3, [r7, #20]
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b70:	d80c      	bhi.n	8005b8c <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	015a      	lsls	r2, r3, #5
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	4413      	add	r3, r2
 8005b7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b84:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b88:	d0ec      	beq.n	8005b64 <USB_StopHost+0xb0>
 8005b8a:	e000      	b.n	8005b8e <USB_StopHost+0xda>
        break;
 8005b8c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	3301      	adds	r3, #1
 8005b92:	613b      	str	r3, [r7, #16]
 8005b94:	693b      	ldr	r3, [r7, #16]
 8005b96:	2b0f      	cmp	r3, #15
 8005b98:	d9c7      	bls.n	8005b2a <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ba0:	461a      	mov	r2, r3
 8005ba2:	f04f 33ff 	mov.w	r3, #4294967295
 8005ba6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	f04f 32ff 	mov.w	r2, #4294967295
 8005bae:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005bb0:	6878      	ldr	r0, [r7, #4]
 8005bb2:	f7ff f8af 	bl	8004d14 <USB_EnableGlobalInt>

  return HAL_OK;
 8005bb6:	2300      	movs	r3, #0
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	3718      	adds	r7, #24
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}

08005bc0 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8005bc0:	b590      	push	{r4, r7, lr}
 8005bc2:	b089      	sub	sp, #36	; 0x24
 8005bc4:	af04      	add	r7, sp, #16
 8005bc6:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8005bc8:	2301      	movs	r3, #1
 8005bca:	2202      	movs	r2, #2
 8005bcc:	2102      	movs	r1, #2
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f000 fc66 	bl	80064a0 <USBH_FindInterface>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005bd8:	7bfb      	ldrb	r3, [r7, #15]
 8005bda:	2bff      	cmp	r3, #255	; 0xff
 8005bdc:	d002      	beq.n	8005be4 <USBH_CDC_InterfaceInit+0x24>
 8005bde:	7bfb      	ldrb	r3, [r7, #15]
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	d901      	bls.n	8005be8 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005be4:	2302      	movs	r3, #2
 8005be6:	e13d      	b.n	8005e64 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8005be8:	7bfb      	ldrb	r3, [r7, #15]
 8005bea:	4619      	mov	r1, r3
 8005bec:	6878      	ldr	r0, [r7, #4]
 8005bee:	f000 fc3b 	bl	8006468 <USBH_SelectInterface>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8005bf6:	7bbb      	ldrb	r3, [r7, #14]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d001      	beq.n	8005c00 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8005bfc:	2302      	movs	r3, #2
 8005bfe:	e131      	b.n	8005e64 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8005c06:	2050      	movs	r0, #80	; 0x50
 8005c08:	f002 fa1a 	bl	8008040 <malloc>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005c16:	69db      	ldr	r3, [r3, #28]
 8005c18:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d101      	bne.n	8005c24 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8005c20:	2302      	movs	r3, #2
 8005c22:	e11f      	b.n	8005e64 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8005c24:	2250      	movs	r2, #80	; 0x50
 8005c26:	2100      	movs	r1, #0
 8005c28:	68b8      	ldr	r0, [r7, #8]
 8005c2a:	f002 fa19 	bl	8008060 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8005c2e:	7bfb      	ldrb	r3, [r7, #15]
 8005c30:	687a      	ldr	r2, [r7, #4]
 8005c32:	211a      	movs	r1, #26
 8005c34:	fb01 f303 	mul.w	r3, r1, r3
 8005c38:	4413      	add	r3, r2
 8005c3a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005c3e:	781b      	ldrb	r3, [r3, #0]
 8005c40:	b25b      	sxtb	r3, r3
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	da15      	bge.n	8005c72 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005c46:	7bfb      	ldrb	r3, [r7, #15]
 8005c48:	687a      	ldr	r2, [r7, #4]
 8005c4a:	211a      	movs	r1, #26
 8005c4c:	fb01 f303 	mul.w	r3, r1, r3
 8005c50:	4413      	add	r3, r2
 8005c52:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005c56:	781a      	ldrb	r2, [r3, #0]
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005c5c:	7bfb      	ldrb	r3, [r7, #15]
 8005c5e:	687a      	ldr	r2, [r7, #4]
 8005c60:	211a      	movs	r1, #26
 8005c62:	fb01 f303 	mul.w	r3, r1, r3
 8005c66:	4413      	add	r3, r2
 8005c68:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005c6c:	881a      	ldrh	r2, [r3, #0]
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	785b      	ldrb	r3, [r3, #1]
 8005c76:	4619      	mov	r1, r3
 8005c78:	6878      	ldr	r0, [r7, #4]
 8005c7a:	f001 fe32 	bl	80078e2 <USBH_AllocPipe>
 8005c7e:	4603      	mov	r3, r0
 8005c80:	461a      	mov	r2, r3
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	7819      	ldrb	r1, [r3, #0]
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	7858      	ldrb	r0, [r3, #1]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005c9a:	68ba      	ldr	r2, [r7, #8]
 8005c9c:	8952      	ldrh	r2, [r2, #10]
 8005c9e:	9202      	str	r2, [sp, #8]
 8005ca0:	2203      	movs	r2, #3
 8005ca2:	9201      	str	r2, [sp, #4]
 8005ca4:	9300      	str	r3, [sp, #0]
 8005ca6:	4623      	mov	r3, r4
 8005ca8:	4602      	mov	r2, r0
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f001 fdea 	bl	8007884 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	781b      	ldrb	r3, [r3, #0]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	4619      	mov	r1, r3
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f002 f8f9 	bl	8007eb0 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	210a      	movs	r1, #10
 8005cc4:	6878      	ldr	r0, [r7, #4]
 8005cc6:	f000 fbeb 	bl	80064a0 <USBH_FindInterface>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005cce:	7bfb      	ldrb	r3, [r7, #15]
 8005cd0:	2bff      	cmp	r3, #255	; 0xff
 8005cd2:	d002      	beq.n	8005cda <USBH_CDC_InterfaceInit+0x11a>
 8005cd4:	7bfb      	ldrb	r3, [r7, #15]
 8005cd6:	2b01      	cmp	r3, #1
 8005cd8:	d901      	bls.n	8005cde <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005cda:	2302      	movs	r3, #2
 8005cdc:	e0c2      	b.n	8005e64 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8005cde:	7bfb      	ldrb	r3, [r7, #15]
 8005ce0:	687a      	ldr	r2, [r7, #4]
 8005ce2:	211a      	movs	r1, #26
 8005ce4:	fb01 f303 	mul.w	r3, r1, r3
 8005ce8:	4413      	add	r3, r2
 8005cea:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005cee:	781b      	ldrb	r3, [r3, #0]
 8005cf0:	b25b      	sxtb	r3, r3
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	da16      	bge.n	8005d24 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005cf6:	7bfb      	ldrb	r3, [r7, #15]
 8005cf8:	687a      	ldr	r2, [r7, #4]
 8005cfa:	211a      	movs	r1, #26
 8005cfc:	fb01 f303 	mul.w	r3, r1, r3
 8005d00:	4413      	add	r3, r2
 8005d02:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005d06:	781a      	ldrb	r2, [r3, #0]
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005d0c:	7bfb      	ldrb	r3, [r7, #15]
 8005d0e:	687a      	ldr	r2, [r7, #4]
 8005d10:	211a      	movs	r1, #26
 8005d12:	fb01 f303 	mul.w	r3, r1, r3
 8005d16:	4413      	add	r3, r2
 8005d18:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005d1c:	881a      	ldrh	r2, [r3, #0]
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	835a      	strh	r2, [r3, #26]
 8005d22:	e015      	b.n	8005d50 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005d24:	7bfb      	ldrb	r3, [r7, #15]
 8005d26:	687a      	ldr	r2, [r7, #4]
 8005d28:	211a      	movs	r1, #26
 8005d2a:	fb01 f303 	mul.w	r3, r1, r3
 8005d2e:	4413      	add	r3, r2
 8005d30:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005d34:	781a      	ldrb	r2, [r3, #0]
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005d3a:	7bfb      	ldrb	r3, [r7, #15]
 8005d3c:	687a      	ldr	r2, [r7, #4]
 8005d3e:	211a      	movs	r1, #26
 8005d40:	fb01 f303 	mul.w	r3, r1, r3
 8005d44:	4413      	add	r3, r2
 8005d46:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005d4a:	881a      	ldrh	r2, [r3, #0]
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8005d50:	7bfb      	ldrb	r3, [r7, #15]
 8005d52:	687a      	ldr	r2, [r7, #4]
 8005d54:	211a      	movs	r1, #26
 8005d56:	fb01 f303 	mul.w	r3, r1, r3
 8005d5a:	4413      	add	r3, r2
 8005d5c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005d60:	781b      	ldrb	r3, [r3, #0]
 8005d62:	b25b      	sxtb	r3, r3
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	da16      	bge.n	8005d96 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005d68:	7bfb      	ldrb	r3, [r7, #15]
 8005d6a:	687a      	ldr	r2, [r7, #4]
 8005d6c:	211a      	movs	r1, #26
 8005d6e:	fb01 f303 	mul.w	r3, r1, r3
 8005d72:	4413      	add	r3, r2
 8005d74:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005d78:	781a      	ldrb	r2, [r3, #0]
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005d7e:	7bfb      	ldrb	r3, [r7, #15]
 8005d80:	687a      	ldr	r2, [r7, #4]
 8005d82:	211a      	movs	r1, #26
 8005d84:	fb01 f303 	mul.w	r3, r1, r3
 8005d88:	4413      	add	r3, r2
 8005d8a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005d8e:	881a      	ldrh	r2, [r3, #0]
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	835a      	strh	r2, [r3, #26]
 8005d94:	e015      	b.n	8005dc2 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005d96:	7bfb      	ldrb	r3, [r7, #15]
 8005d98:	687a      	ldr	r2, [r7, #4]
 8005d9a:	211a      	movs	r1, #26
 8005d9c:	fb01 f303 	mul.w	r3, r1, r3
 8005da0:	4413      	add	r3, r2
 8005da2:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005da6:	781a      	ldrb	r2, [r3, #0]
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005dac:	7bfb      	ldrb	r3, [r7, #15]
 8005dae:	687a      	ldr	r2, [r7, #4]
 8005db0:	211a      	movs	r1, #26
 8005db2:	fb01 f303 	mul.w	r3, r1, r3
 8005db6:	4413      	add	r3, r2
 8005db8:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005dbc:	881a      	ldrh	r2, [r3, #0]
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	7b9b      	ldrb	r3, [r3, #14]
 8005dc6:	4619      	mov	r1, r3
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	f001 fd8a 	bl	80078e2 <USBH_AllocPipe>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	461a      	mov	r2, r3
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	7bdb      	ldrb	r3, [r3, #15]
 8005dda:	4619      	mov	r1, r3
 8005ddc:	6878      	ldr	r0, [r7, #4]
 8005dde:	f001 fd80 	bl	80078e2 <USBH_AllocPipe>
 8005de2:	4603      	mov	r3, r0
 8005de4:	461a      	mov	r2, r3
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	7b59      	ldrb	r1, [r3, #13]
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	7b98      	ldrb	r0, [r3, #14]
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005dfe:	68ba      	ldr	r2, [r7, #8]
 8005e00:	8b12      	ldrh	r2, [r2, #24]
 8005e02:	9202      	str	r2, [sp, #8]
 8005e04:	2202      	movs	r2, #2
 8005e06:	9201      	str	r2, [sp, #4]
 8005e08:	9300      	str	r3, [sp, #0]
 8005e0a:	4623      	mov	r3, r4
 8005e0c:	4602      	mov	r2, r0
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	f001 fd38 	bl	8007884 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	7b19      	ldrb	r1, [r3, #12]
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	7bd8      	ldrb	r0, [r3, #15]
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005e28:	68ba      	ldr	r2, [r7, #8]
 8005e2a:	8b52      	ldrh	r2, [r2, #26]
 8005e2c:	9202      	str	r2, [sp, #8]
 8005e2e:	2202      	movs	r2, #2
 8005e30:	9201      	str	r2, [sp, #4]
 8005e32:	9300      	str	r3, [sp, #0]
 8005e34:	4623      	mov	r3, r4
 8005e36:	4602      	mov	r2, r0
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	f001 fd23 	bl	8007884 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	2200      	movs	r2, #0
 8005e42:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	7b5b      	ldrb	r3, [r3, #13]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	4619      	mov	r1, r3
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f002 f82e 	bl	8007eb0 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	7b1b      	ldrb	r3, [r3, #12]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	4619      	mov	r1, r3
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	f002 f827 	bl	8007eb0 <USBH_LL_SetToggle>

  return USBH_OK;
 8005e62:	2300      	movs	r3, #0
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	3714      	adds	r7, #20
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd90      	pop	{r4, r7, pc}

08005e6c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b084      	sub	sp, #16
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005e7a:	69db      	ldr	r3, [r3, #28]
 8005e7c:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	781b      	ldrb	r3, [r3, #0]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d00e      	beq.n	8005ea4 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	781b      	ldrb	r3, [r3, #0]
 8005e8a:	4619      	mov	r1, r3
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	f001 fd18 	bl	80078c2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	781b      	ldrb	r3, [r3, #0]
 8005e96:	4619      	mov	r1, r3
 8005e98:	6878      	ldr	r0, [r7, #4]
 8005e9a:	f001 fd43 	bl	8007924 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	7b1b      	ldrb	r3, [r3, #12]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d00e      	beq.n	8005eca <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	7b1b      	ldrb	r3, [r3, #12]
 8005eb0:	4619      	mov	r1, r3
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f001 fd05 	bl	80078c2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	7b1b      	ldrb	r3, [r3, #12]
 8005ebc:	4619      	mov	r1, r3
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f001 fd30 	bl	8007924 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	7b5b      	ldrb	r3, [r3, #13]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d00e      	beq.n	8005ef0 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	7b5b      	ldrb	r3, [r3, #13]
 8005ed6:	4619      	mov	r1, r3
 8005ed8:	6878      	ldr	r0, [r7, #4]
 8005eda:	f001 fcf2 	bl	80078c2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	7b5b      	ldrb	r3, [r3, #13]
 8005ee2:	4619      	mov	r1, r3
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f001 fd1d 	bl	8007924 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2200      	movs	r2, #0
 8005eee:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005ef6:	69db      	ldr	r3, [r3, #28]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d00b      	beq.n	8005f14 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005f02:	69db      	ldr	r3, [r3, #28]
 8005f04:	4618      	mov	r0, r3
 8005f06:	f002 f8a3 	bl	8008050 <free>
    phost->pActiveClass->pData = 0U;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005f10:	2200      	movs	r2, #0
 8005f12:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8005f14:	2300      	movs	r3, #0
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	3710      	adds	r7, #16
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}

08005f1e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8005f1e:	b580      	push	{r7, lr}
 8005f20:	b084      	sub	sp, #16
 8005f22:	af00      	add	r7, sp, #0
 8005f24:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005f2c:	69db      	ldr	r3, [r3, #28]
 8005f2e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	3340      	adds	r3, #64	; 0x40
 8005f34:	4619      	mov	r1, r3
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f000 f8b1 	bl	800609e <GetLineCoding>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8005f40:	7afb      	ldrb	r3, [r7, #11]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d105      	bne.n	8005f52 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005f4c:	2102      	movs	r1, #2
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8005f52:	7afb      	ldrb	r3, [r7, #11]
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	3710      	adds	r7, #16
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	bd80      	pop	{r7, pc}

08005f5c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b084      	sub	sp, #16
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8005f64:	2301      	movs	r3, #1
 8005f66:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8005f68:	2300      	movs	r3, #0
 8005f6a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005f72:	69db      	ldr	r3, [r3, #28]
 8005f74:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8005f7c:	2b04      	cmp	r3, #4
 8005f7e:	d877      	bhi.n	8006070 <USBH_CDC_Process+0x114>
 8005f80:	a201      	add	r2, pc, #4	; (adr r2, 8005f88 <USBH_CDC_Process+0x2c>)
 8005f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f86:	bf00      	nop
 8005f88:	08005f9d 	.word	0x08005f9d
 8005f8c:	08005fa3 	.word	0x08005fa3
 8005f90:	08005fd3 	.word	0x08005fd3
 8005f94:	08006047 	.word	0x08006047
 8005f98:	08006055 	.word	0x08006055
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	73fb      	strb	r3, [r7, #15]
      break;
 8005fa0:	e06d      	b.n	800607e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fa6:	4619      	mov	r1, r3
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	f000 f897 	bl	80060dc <SetLineCoding>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005fb2:	7bbb      	ldrb	r3, [r7, #14]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d104      	bne.n	8005fc2 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	2202      	movs	r2, #2
 8005fbc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8005fc0:	e058      	b.n	8006074 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8005fc2:	7bbb      	ldrb	r3, [r7, #14]
 8005fc4:	2b01      	cmp	r3, #1
 8005fc6:	d055      	beq.n	8006074 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	2204      	movs	r2, #4
 8005fcc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8005fd0:	e050      	b.n	8006074 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	3340      	adds	r3, #64	; 0x40
 8005fd6:	4619      	mov	r1, r3
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	f000 f860 	bl	800609e <GetLineCoding>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005fe2:	7bbb      	ldrb	r3, [r7, #14]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d126      	bne.n	8006036 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	2200      	movs	r2, #0
 8005fec:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ffa:	791b      	ldrb	r3, [r3, #4]
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	d13b      	bne.n	8006078 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800600a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800600c:	429a      	cmp	r2, r3
 800600e:	d133      	bne.n	8006078 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800601a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800601c:	429a      	cmp	r2, r3
 800601e:	d12b      	bne.n	8006078 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006028:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800602a:	429a      	cmp	r2, r3
 800602c:	d124      	bne.n	8006078 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f000 f958 	bl	80062e4 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006034:	e020      	b.n	8006078 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006036:	7bbb      	ldrb	r3, [r7, #14]
 8006038:	2b01      	cmp	r3, #1
 800603a:	d01d      	beq.n	8006078 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	2204      	movs	r2, #4
 8006040:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006044:	e018      	b.n	8006078 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f000 f867 	bl	800611a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800604c:	6878      	ldr	r0, [r7, #4]
 800604e:	f000 f8da 	bl	8006206 <CDC_ProcessReception>
      break;
 8006052:	e014      	b.n	800607e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006054:	2100      	movs	r1, #0
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f000 ffe3 	bl	8007022 <USBH_ClrFeature>
 800605c:	4603      	mov	r3, r0
 800605e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006060:	7bbb      	ldrb	r3, [r7, #14]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d10a      	bne.n	800607c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	2200      	movs	r2, #0
 800606a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800606e:	e005      	b.n	800607c <USBH_CDC_Process+0x120>

    default:
      break;
 8006070:	bf00      	nop
 8006072:	e004      	b.n	800607e <USBH_CDC_Process+0x122>
      break;
 8006074:	bf00      	nop
 8006076:	e002      	b.n	800607e <USBH_CDC_Process+0x122>
      break;
 8006078:	bf00      	nop
 800607a:	e000      	b.n	800607e <USBH_CDC_Process+0x122>
      break;
 800607c:	bf00      	nop

  }

  return status;
 800607e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006080:	4618      	mov	r0, r3
 8006082:	3710      	adds	r7, #16
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}

08006088 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006088:	b480      	push	{r7}
 800608a:	b083      	sub	sp, #12
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006090:	2300      	movs	r3, #0
}
 8006092:	4618      	mov	r0, r3
 8006094:	370c      	adds	r7, #12
 8006096:	46bd      	mov	sp, r7
 8006098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609c:	4770      	bx	lr

0800609e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800609e:	b580      	push	{r7, lr}
 80060a0:	b082      	sub	sp, #8
 80060a2:	af00      	add	r7, sp, #0
 80060a4:	6078      	str	r0, [r7, #4]
 80060a6:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	22a1      	movs	r2, #161	; 0xa1
 80060ac:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2221      	movs	r2, #33	; 0x21
 80060b2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2200      	movs	r2, #0
 80060b8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2200      	movs	r2, #0
 80060be:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2207      	movs	r2, #7
 80060c4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	2207      	movs	r2, #7
 80060ca:	4619      	mov	r1, r3
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	f001 f988 	bl	80073e2 <USBH_CtlReq>
 80060d2:	4603      	mov	r3, r0
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	3708      	adds	r7, #8
 80060d8:	46bd      	mov	sp, r7
 80060da:	bd80      	pop	{r7, pc}

080060dc <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b082      	sub	sp, #8
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
 80060e4:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2221      	movs	r2, #33	; 0x21
 80060ea:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2220      	movs	r2, #32
 80060f0:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2200      	movs	r2, #0
 80060f6:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2200      	movs	r2, #0
 80060fc:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2207      	movs	r2, #7
 8006102:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	2207      	movs	r2, #7
 8006108:	4619      	mov	r1, r3
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f001 f969 	bl	80073e2 <USBH_CtlReq>
 8006110:	4603      	mov	r3, r0
}
 8006112:	4618      	mov	r0, r3
 8006114:	3708      	adds	r7, #8
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}

0800611a <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800611a:	b580      	push	{r7, lr}
 800611c:	b086      	sub	sp, #24
 800611e:	af02      	add	r7, sp, #8
 8006120:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006128:	69db      	ldr	r3, [r3, #28]
 800612a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800612c:	2300      	movs	r3, #0
 800612e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006136:	2b01      	cmp	r3, #1
 8006138:	d002      	beq.n	8006140 <CDC_ProcessTransmission+0x26>
 800613a:	2b02      	cmp	r3, #2
 800613c:	d023      	beq.n	8006186 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800613e:	e05e      	b.n	80061fe <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006144:	68fa      	ldr	r2, [r7, #12]
 8006146:	8b12      	ldrh	r2, [r2, #24]
 8006148:	4293      	cmp	r3, r2
 800614a:	d90b      	bls.n	8006164 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	69d9      	ldr	r1, [r3, #28]
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	8b1a      	ldrh	r2, [r3, #24]
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	7b5b      	ldrb	r3, [r3, #13]
 8006158:	2001      	movs	r0, #1
 800615a:	9000      	str	r0, [sp, #0]
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	f001 fb4e 	bl	80077fe <USBH_BulkSendData>
 8006162:	e00b      	b.n	800617c <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800616c:	b29a      	uxth	r2, r3
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	7b5b      	ldrb	r3, [r3, #13]
 8006172:	2001      	movs	r0, #1
 8006174:	9000      	str	r0, [sp, #0]
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f001 fb41 	bl	80077fe <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	2202      	movs	r2, #2
 8006180:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006184:	e03b      	b.n	80061fe <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	7b5b      	ldrb	r3, [r3, #13]
 800618a:	4619      	mov	r1, r3
 800618c:	6878      	ldr	r0, [r7, #4]
 800618e:	f001 fe65 	bl	8007e5c <USBH_LL_GetURBState>
 8006192:	4603      	mov	r3, r0
 8006194:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006196:	7afb      	ldrb	r3, [r7, #11]
 8006198:	2b01      	cmp	r3, #1
 800619a:	d128      	bne.n	80061ee <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a0:	68fa      	ldr	r2, [r7, #12]
 80061a2:	8b12      	ldrh	r2, [r2, #24]
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d90e      	bls.n	80061c6 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ac:	68fa      	ldr	r2, [r7, #12]
 80061ae:	8b12      	ldrh	r2, [r2, #24]
 80061b0:	1a9a      	subs	r2, r3, r2
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	69db      	ldr	r3, [r3, #28]
 80061ba:	68fa      	ldr	r2, [r7, #12]
 80061bc:	8b12      	ldrh	r2, [r2, #24]
 80061be:	441a      	add	r2, r3
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	61da      	str	r2, [r3, #28]
 80061c4:	e002      	b.n	80061cc <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2200      	movs	r2, #0
 80061ca:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d004      	beq.n	80061de <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	2201      	movs	r2, #1
 80061d8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80061dc:	e00e      	b.n	80061fc <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2200      	movs	r2, #0
 80061e2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f000 f868 	bl	80062bc <USBH_CDC_TransmitCallback>
      break;
 80061ec:	e006      	b.n	80061fc <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 80061ee:	7afb      	ldrb	r3, [r7, #11]
 80061f0:	2b02      	cmp	r3, #2
 80061f2:	d103      	bne.n	80061fc <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2201      	movs	r2, #1
 80061f8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80061fc:	bf00      	nop
  }
}
 80061fe:	bf00      	nop
 8006200:	3710      	adds	r7, #16
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}

08006206 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006206:	b580      	push	{r7, lr}
 8006208:	b086      	sub	sp, #24
 800620a:	af00      	add	r7, sp, #0
 800620c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006214:	69db      	ldr	r3, [r3, #28]
 8006216:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006218:	2300      	movs	r3, #0
 800621a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006222:	2b03      	cmp	r3, #3
 8006224:	d002      	beq.n	800622c <CDC_ProcessReception+0x26>
 8006226:	2b04      	cmp	r3, #4
 8006228:	d00e      	beq.n	8006248 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800622a:	e043      	b.n	80062b4 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	6a19      	ldr	r1, [r3, #32]
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	8b5a      	ldrh	r2, [r3, #26]
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	7b1b      	ldrb	r3, [r3, #12]
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f001 fb05 	bl	8007848 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	2204      	movs	r2, #4
 8006242:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006246:	e035      	b.n	80062b4 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	7b1b      	ldrb	r3, [r3, #12]
 800624c:	4619      	mov	r1, r3
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f001 fe04 	bl	8007e5c <USBH_LL_GetURBState>
 8006254:	4603      	mov	r3, r0
 8006256:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006258:	7cfb      	ldrb	r3, [r7, #19]
 800625a:	2b01      	cmp	r3, #1
 800625c:	d129      	bne.n	80062b2 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	7b1b      	ldrb	r3, [r3, #12]
 8006262:	4619      	mov	r1, r3
 8006264:	6878      	ldr	r0, [r7, #4]
 8006266:	f001 fd67 	bl	8007d38 <USBH_LL_GetLastXferSize>
 800626a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800626c:	697b      	ldr	r3, [r7, #20]
 800626e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006270:	68fa      	ldr	r2, [r7, #12]
 8006272:	429a      	cmp	r2, r3
 8006274:	d016      	beq.n	80062a4 <CDC_ProcessReception+0x9e>
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	8b5b      	ldrh	r3, [r3, #26]
 800627a:	461a      	mov	r2, r3
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	4293      	cmp	r3, r2
 8006280:	d910      	bls.n	80062a4 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	1ad2      	subs	r2, r2, r3
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	6a1a      	ldr	r2, [r3, #32]
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	441a      	add	r2, r3
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	2203      	movs	r2, #3
 800629e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80062a2:	e006      	b.n	80062b2 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	2200      	movs	r2, #0
 80062a8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f000 f80f 	bl	80062d0 <USBH_CDC_ReceiveCallback>
      break;
 80062b2:	bf00      	nop
  }
}
 80062b4:	bf00      	nop
 80062b6:	3718      	adds	r7, #24
 80062b8:	46bd      	mov	sp, r7
 80062ba:	bd80      	pop	{r7, pc}

080062bc <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80062bc:	b480      	push	{r7}
 80062be:	b083      	sub	sp, #12
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80062c4:	bf00      	nop
 80062c6:	370c      	adds	r7, #12
 80062c8:	46bd      	mov	sp, r7
 80062ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ce:	4770      	bx	lr

080062d0 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80062d0:	b480      	push	{r7}
 80062d2:	b083      	sub	sp, #12
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80062d8:	bf00      	nop
 80062da:	370c      	adds	r7, #12
 80062dc:	46bd      	mov	sp, r7
 80062de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e2:	4770      	bx	lr

080062e4 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b083      	sub	sp, #12
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80062ec:	bf00      	nop
 80062ee:	370c      	adds	r7, #12
 80062f0:	46bd      	mov	sp, r7
 80062f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f6:	4770      	bx	lr

080062f8 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b084      	sub	sp, #16
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	60f8      	str	r0, [r7, #12]
 8006300:	60b9      	str	r1, [r7, #8]
 8006302:	4613      	mov	r3, r2
 8006304:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d101      	bne.n	8006310 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800630c:	2302      	movs	r3, #2
 800630e:	e029      	b.n	8006364 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	79fa      	ldrb	r2, [r7, #7]
 8006314:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	2200      	movs	r2, #0
 800631c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	2200      	movs	r2, #0
 8006324:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8006328:	68f8      	ldr	r0, [r7, #12]
 800632a:	f000 f81f 	bl	800636c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	2200      	movs	r2, #0
 8006332:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	2200      	movs	r2, #0
 800633a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	2200      	movs	r2, #0
 8006342:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	2200      	movs	r2, #0
 800634a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d003      	beq.n	800635c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	68ba      	ldr	r2, [r7, #8]
 8006358:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800635c:	68f8      	ldr	r0, [r7, #12]
 800635e:	f001 fc37 	bl	8007bd0 <USBH_LL_Init>

  return USBH_OK;
 8006362:	2300      	movs	r3, #0
}
 8006364:	4618      	mov	r0, r3
 8006366:	3710      	adds	r7, #16
 8006368:	46bd      	mov	sp, r7
 800636a:	bd80      	pop	{r7, pc}

0800636c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800636c:	b480      	push	{r7}
 800636e:	b085      	sub	sp, #20
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006374:	2300      	movs	r3, #0
 8006376:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006378:	2300      	movs	r3, #0
 800637a:	60fb      	str	r3, [r7, #12]
 800637c:	e009      	b.n	8006392 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800637e:	687a      	ldr	r2, [r7, #4]
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	33e0      	adds	r3, #224	; 0xe0
 8006384:	009b      	lsls	r3, r3, #2
 8006386:	4413      	add	r3, r2
 8006388:	2200      	movs	r2, #0
 800638a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	3301      	adds	r3, #1
 8006390:	60fb      	str	r3, [r7, #12]
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	2b0e      	cmp	r3, #14
 8006396:	d9f2      	bls.n	800637e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006398:	2300      	movs	r3, #0
 800639a:	60fb      	str	r3, [r7, #12]
 800639c:	e009      	b.n	80063b2 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800639e:	687a      	ldr	r2, [r7, #4]
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	4413      	add	r3, r2
 80063a4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80063a8:	2200      	movs	r2, #0
 80063aa:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	3301      	adds	r3, #1
 80063b0:	60fb      	str	r3, [r7, #12]
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063b8:	d3f1      	bcc.n	800639e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2200      	movs	r2, #0
 80063be:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2200      	movs	r2, #0
 80063c4:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2201      	movs	r2, #1
 80063ca:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2200      	movs	r2, #0
 80063d0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2201      	movs	r2, #1
 80063d8:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2240      	movs	r2, #64	; 0x40
 80063de:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2200      	movs	r2, #0
 80063e4:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2200      	movs	r2, #0
 80063ea:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2201      	movs	r2, #1
 80063f2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2200      	movs	r2, #0
 80063fa:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2200      	movs	r2, #0
 8006402:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8006406:	2300      	movs	r3, #0
}
 8006408:	4618      	mov	r0, r3
 800640a:	3714      	adds	r7, #20
 800640c:	46bd      	mov	sp, r7
 800640e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006412:	4770      	bx	lr

08006414 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006414:	b480      	push	{r7}
 8006416:	b085      	sub	sp, #20
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
 800641c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800641e:	2300      	movs	r3, #0
 8006420:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d016      	beq.n	8006456 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800642e:	2b00      	cmp	r3, #0
 8006430:	d10e      	bne.n	8006450 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006438:	1c59      	adds	r1, r3, #1
 800643a:	687a      	ldr	r2, [r7, #4]
 800643c:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006440:	687a      	ldr	r2, [r7, #4]
 8006442:	33de      	adds	r3, #222	; 0xde
 8006444:	6839      	ldr	r1, [r7, #0]
 8006446:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800644a:	2300      	movs	r3, #0
 800644c:	73fb      	strb	r3, [r7, #15]
 800644e:	e004      	b.n	800645a <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006450:	2302      	movs	r3, #2
 8006452:	73fb      	strb	r3, [r7, #15]
 8006454:	e001      	b.n	800645a <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006456:	2302      	movs	r3, #2
 8006458:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800645a:	7bfb      	ldrb	r3, [r7, #15]
}
 800645c:	4618      	mov	r0, r3
 800645e:	3714      	adds	r7, #20
 8006460:	46bd      	mov	sp, r7
 8006462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006466:	4770      	bx	lr

08006468 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006468:	b480      	push	{r7}
 800646a:	b085      	sub	sp, #20
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
 8006470:	460b      	mov	r3, r1
 8006472:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006474:	2300      	movs	r3, #0
 8006476:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800647e:	78fa      	ldrb	r2, [r7, #3]
 8006480:	429a      	cmp	r2, r3
 8006482:	d204      	bcs.n	800648e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	78fa      	ldrb	r2, [r7, #3]
 8006488:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800648c:	e001      	b.n	8006492 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800648e:	2302      	movs	r3, #2
 8006490:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006492:	7bfb      	ldrb	r3, [r7, #15]
}
 8006494:	4618      	mov	r0, r3
 8006496:	3714      	adds	r7, #20
 8006498:	46bd      	mov	sp, r7
 800649a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649e:	4770      	bx	lr

080064a0 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80064a0:	b480      	push	{r7}
 80064a2:	b087      	sub	sp, #28
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
 80064a8:	4608      	mov	r0, r1
 80064aa:	4611      	mov	r1, r2
 80064ac:	461a      	mov	r2, r3
 80064ae:	4603      	mov	r3, r0
 80064b0:	70fb      	strb	r3, [r7, #3]
 80064b2:	460b      	mov	r3, r1
 80064b4:	70bb      	strb	r3, [r7, #2]
 80064b6:	4613      	mov	r3, r2
 80064b8:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80064ba:	2300      	movs	r3, #0
 80064bc:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 80064be:	2300      	movs	r3, #0
 80064c0:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80064c8:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80064ca:	e025      	b.n	8006518 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80064cc:	7dfb      	ldrb	r3, [r7, #23]
 80064ce:	221a      	movs	r2, #26
 80064d0:	fb02 f303 	mul.w	r3, r2, r3
 80064d4:	3308      	adds	r3, #8
 80064d6:	68fa      	ldr	r2, [r7, #12]
 80064d8:	4413      	add	r3, r2
 80064da:	3302      	adds	r3, #2
 80064dc:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	795b      	ldrb	r3, [r3, #5]
 80064e2:	78fa      	ldrb	r2, [r7, #3]
 80064e4:	429a      	cmp	r2, r3
 80064e6:	d002      	beq.n	80064ee <USBH_FindInterface+0x4e>
 80064e8:	78fb      	ldrb	r3, [r7, #3]
 80064ea:	2bff      	cmp	r3, #255	; 0xff
 80064ec:	d111      	bne.n	8006512 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80064ee:	693b      	ldr	r3, [r7, #16]
 80064f0:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80064f2:	78ba      	ldrb	r2, [r7, #2]
 80064f4:	429a      	cmp	r2, r3
 80064f6:	d002      	beq.n	80064fe <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80064f8:	78bb      	ldrb	r3, [r7, #2]
 80064fa:	2bff      	cmp	r3, #255	; 0xff
 80064fc:	d109      	bne.n	8006512 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006502:	787a      	ldrb	r2, [r7, #1]
 8006504:	429a      	cmp	r2, r3
 8006506:	d002      	beq.n	800650e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006508:	787b      	ldrb	r3, [r7, #1]
 800650a:	2bff      	cmp	r3, #255	; 0xff
 800650c:	d101      	bne.n	8006512 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800650e:	7dfb      	ldrb	r3, [r7, #23]
 8006510:	e006      	b.n	8006520 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006512:	7dfb      	ldrb	r3, [r7, #23]
 8006514:	3301      	adds	r3, #1
 8006516:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006518:	7dfb      	ldrb	r3, [r7, #23]
 800651a:	2b01      	cmp	r3, #1
 800651c:	d9d6      	bls.n	80064cc <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800651e:	23ff      	movs	r3, #255	; 0xff
}
 8006520:	4618      	mov	r0, r3
 8006522:	371c      	adds	r7, #28
 8006524:	46bd      	mov	sp, r7
 8006526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652a:	4770      	bx	lr

0800652c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b082      	sub	sp, #8
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f001 fb87 	bl	8007c48 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800653a:	2101      	movs	r1, #1
 800653c:	6878      	ldr	r0, [r7, #4]
 800653e:	f001 fca0 	bl	8007e82 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006542:	2300      	movs	r3, #0
}
 8006544:	4618      	mov	r0, r3
 8006546:	3708      	adds	r7, #8
 8006548:	46bd      	mov	sp, r7
 800654a:	bd80      	pop	{r7, pc}

0800654c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b088      	sub	sp, #32
 8006550:	af04      	add	r7, sp, #16
 8006552:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006554:	2302      	movs	r3, #2
 8006556:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006558:	2300      	movs	r3, #0
 800655a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8006562:	b2db      	uxtb	r3, r3
 8006564:	2b01      	cmp	r3, #1
 8006566:	d102      	bne.n	800656e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2203      	movs	r2, #3
 800656c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	781b      	ldrb	r3, [r3, #0]
 8006572:	b2db      	uxtb	r3, r3
 8006574:	2b0b      	cmp	r3, #11
 8006576:	f200 81b3 	bhi.w	80068e0 <USBH_Process+0x394>
 800657a:	a201      	add	r2, pc, #4	; (adr r2, 8006580 <USBH_Process+0x34>)
 800657c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006580:	080065b1 	.word	0x080065b1
 8006584:	080065e3 	.word	0x080065e3
 8006588:	0800664b 	.word	0x0800664b
 800658c:	0800687b 	.word	0x0800687b
 8006590:	080068e1 	.word	0x080068e1
 8006594:	080066ef 	.word	0x080066ef
 8006598:	08006821 	.word	0x08006821
 800659c:	08006725 	.word	0x08006725
 80065a0:	08006745 	.word	0x08006745
 80065a4:	08006765 	.word	0x08006765
 80065a8:	08006793 	.word	0x08006793
 80065ac:	08006863 	.word	0x08006863
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80065b6:	b2db      	uxtb	r3, r3
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	f000 8193 	beq.w	80068e4 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2201      	movs	r2, #1
 80065c2:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80065c4:	20c8      	movs	r0, #200	; 0xc8
 80065c6:	f001 fca3 	bl	8007f10 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f001 fb99 	bl	8007d02 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2200      	movs	r2, #0
 80065d4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2200      	movs	r2, #0
 80065dc:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80065e0:	e180      	b.n	80068e4 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 80065e8:	2b01      	cmp	r3, #1
 80065ea:	d107      	bne.n	80065fc <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2200      	movs	r2, #0
 80065f0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2202      	movs	r2, #2
 80065f8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80065fa:	e182      	b.n	8006902 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006602:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006606:	d914      	bls.n	8006632 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800660e:	3301      	adds	r3, #1
 8006610:	b2da      	uxtb	r2, r3
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800661e:	2b03      	cmp	r3, #3
 8006620:	d903      	bls.n	800662a <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	220d      	movs	r2, #13
 8006626:	701a      	strb	r2, [r3, #0]
      break;
 8006628:	e16b      	b.n	8006902 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2200      	movs	r2, #0
 800662e:	701a      	strb	r2, [r3, #0]
      break;
 8006630:	e167      	b.n	8006902 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006638:	f103 020a 	add.w	r2, r3, #10
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8006642:	200a      	movs	r0, #10
 8006644:	f001 fc64 	bl	8007f10 <USBH_Delay>
      break;
 8006648:	e15b      	b.n	8006902 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006650:	2b00      	cmp	r3, #0
 8006652:	d005      	beq.n	8006660 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800665a:	2104      	movs	r1, #4
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006660:	2064      	movs	r0, #100	; 0x64
 8006662:	f001 fc55 	bl	8007f10 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f001 fb24 	bl	8007cb4 <USBH_LL_GetSpeed>
 800666c:	4603      	mov	r3, r0
 800666e:	461a      	mov	r2, r3
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2205      	movs	r2, #5
 800667a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800667c:	2100      	movs	r1, #0
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f001 f92f 	bl	80078e2 <USBH_AllocPipe>
 8006684:	4603      	mov	r3, r0
 8006686:	461a      	mov	r2, r3
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800668c:	2180      	movs	r1, #128	; 0x80
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f001 f927 	bl	80078e2 <USBH_AllocPipe>
 8006694:	4603      	mov	r3, r0
 8006696:	461a      	mov	r2, r3
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	7919      	ldrb	r1, [r3, #4]
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80066ac:	687a      	ldr	r2, [r7, #4]
 80066ae:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80066b0:	b292      	uxth	r2, r2
 80066b2:	9202      	str	r2, [sp, #8]
 80066b4:	2200      	movs	r2, #0
 80066b6:	9201      	str	r2, [sp, #4]
 80066b8:	9300      	str	r3, [sp, #0]
 80066ba:	4603      	mov	r3, r0
 80066bc:	2280      	movs	r2, #128	; 0x80
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f001 f8e0 	bl	8007884 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	7959      	ldrb	r1, [r3, #5]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80066d4:	687a      	ldr	r2, [r7, #4]
 80066d6:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80066d8:	b292      	uxth	r2, r2
 80066da:	9202      	str	r2, [sp, #8]
 80066dc:	2200      	movs	r2, #0
 80066de:	9201      	str	r2, [sp, #4]
 80066e0:	9300      	str	r3, [sp, #0]
 80066e2:	4603      	mov	r3, r0
 80066e4:	2200      	movs	r2, #0
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f001 f8cc 	bl	8007884 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80066ec:	e109      	b.n	8006902 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f000 f90c 	bl	800690c <USBH_HandleEnum>
 80066f4:	4603      	mov	r3, r0
 80066f6:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80066f8:	7bbb      	ldrb	r3, [r7, #14]
 80066fa:	b2db      	uxtb	r3, r3
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	f040 80f3 	bne.w	80068e8 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2200      	movs	r2, #0
 8006706:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8006710:	2b01      	cmp	r3, #1
 8006712:	d103      	bne.n	800671c <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2208      	movs	r2, #8
 8006718:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800671a:	e0e5      	b.n	80068e8 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2207      	movs	r2, #7
 8006720:	701a      	strb	r2, [r3, #0]
      break;
 8006722:	e0e1      	b.n	80068e8 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800672a:	2b00      	cmp	r3, #0
 800672c:	f000 80de 	beq.w	80068ec <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006736:	2101      	movs	r1, #1
 8006738:	6878      	ldr	r0, [r7, #4]
 800673a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2208      	movs	r2, #8
 8006740:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006742:	e0d3      	b.n	80068ec <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800674a:	b29b      	uxth	r3, r3
 800674c:	4619      	mov	r1, r3
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f000 fc20 	bl	8006f94 <USBH_SetCfg>
 8006754:	4603      	mov	r3, r0
 8006756:	2b00      	cmp	r3, #0
 8006758:	f040 80ca 	bne.w	80068f0 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2209      	movs	r2, #9
 8006760:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006762:	e0c5      	b.n	80068f0 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800676a:	f003 0320 	and.w	r3, r3, #32
 800676e:	2b00      	cmp	r3, #0
 8006770:	d00b      	beq.n	800678a <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8006772:	2101      	movs	r1, #1
 8006774:	6878      	ldr	r0, [r7, #4]
 8006776:	f000 fc30 	bl	8006fda <USBH_SetFeature>
 800677a:	4603      	mov	r3, r0
 800677c:	2b00      	cmp	r3, #0
 800677e:	f040 80b9 	bne.w	80068f4 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	220a      	movs	r2, #10
 8006786:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006788:	e0b4      	b.n	80068f4 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	220a      	movs	r2, #10
 800678e:	701a      	strb	r2, [r3, #0]
      break;
 8006790:	e0b0      	b.n	80068f4 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006798:	2b00      	cmp	r3, #0
 800679a:	f000 80ad 	beq.w	80068f8 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2200      	movs	r2, #0
 80067a2:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80067a6:	2300      	movs	r3, #0
 80067a8:	73fb      	strb	r3, [r7, #15]
 80067aa:	e016      	b.n	80067da <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80067ac:	7bfa      	ldrb	r2, [r7, #15]
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	32de      	adds	r2, #222	; 0xde
 80067b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067b6:	791a      	ldrb	r2, [r3, #4]
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80067be:	429a      	cmp	r2, r3
 80067c0:	d108      	bne.n	80067d4 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 80067c2:	7bfa      	ldrb	r2, [r7, #15]
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	32de      	adds	r2, #222	; 0xde
 80067c8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 80067d2:	e005      	b.n	80067e0 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80067d4:	7bfb      	ldrb	r3, [r7, #15]
 80067d6:	3301      	adds	r3, #1
 80067d8:	73fb      	strb	r3, [r7, #15]
 80067da:	7bfb      	ldrb	r3, [r7, #15]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d0e5      	beq.n	80067ac <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d016      	beq.n	8006818 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80067f0:	689b      	ldr	r3, [r3, #8]
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	4798      	blx	r3
 80067f6:	4603      	mov	r3, r0
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d109      	bne.n	8006810 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2206      	movs	r2, #6
 8006800:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006808:	2103      	movs	r1, #3
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800680e:	e073      	b.n	80068f8 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	220d      	movs	r2, #13
 8006814:	701a      	strb	r2, [r3, #0]
      break;
 8006816:	e06f      	b.n	80068f8 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	220d      	movs	r2, #13
 800681c:	701a      	strb	r2, [r3, #0]
      break;
 800681e:	e06b      	b.n	80068f8 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006826:	2b00      	cmp	r3, #0
 8006828:	d017      	beq.n	800685a <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006830:	691b      	ldr	r3, [r3, #16]
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	4798      	blx	r3
 8006836:	4603      	mov	r3, r0
 8006838:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800683a:	7bbb      	ldrb	r3, [r7, #14]
 800683c:	b2db      	uxtb	r3, r3
 800683e:	2b00      	cmp	r3, #0
 8006840:	d103      	bne.n	800684a <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	220b      	movs	r2, #11
 8006846:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006848:	e058      	b.n	80068fc <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 800684a:	7bbb      	ldrb	r3, [r7, #14]
 800684c:	b2db      	uxtb	r3, r3
 800684e:	2b02      	cmp	r3, #2
 8006850:	d154      	bne.n	80068fc <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	220d      	movs	r2, #13
 8006856:	701a      	strb	r2, [r3, #0]
      break;
 8006858:	e050      	b.n	80068fc <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	220d      	movs	r2, #13
 800685e:	701a      	strb	r2, [r3, #0]
      break;
 8006860:	e04c      	b.n	80068fc <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006868:	2b00      	cmp	r3, #0
 800686a:	d049      	beq.n	8006900 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006872:	695b      	ldr	r3, [r3, #20]
 8006874:	6878      	ldr	r0, [r7, #4]
 8006876:	4798      	blx	r3
      }
      break;
 8006878:	e042      	b.n	8006900 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2200      	movs	r2, #0
 800687e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f7ff fd72 	bl	800636c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800688e:	2b00      	cmp	r3, #0
 8006890:	d009      	beq.n	80068a6 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006898:	68db      	ldr	r3, [r3, #12]
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2200      	movs	r2, #0
 80068a2:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d005      	beq.n	80068bc <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80068b6:	2105      	movs	r1, #5
 80068b8:	6878      	ldr	r0, [r7, #4]
 80068ba:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80068c2:	b2db      	uxtb	r3, r3
 80068c4:	2b01      	cmp	r3, #1
 80068c6:	d107      	bne.n	80068d8 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2200      	movs	r2, #0
 80068cc:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f7ff fe2b 	bl	800652c <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80068d6:	e014      	b.n	8006902 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 80068d8:	6878      	ldr	r0, [r7, #4]
 80068da:	f001 f9b5 	bl	8007c48 <USBH_LL_Start>
      break;
 80068de:	e010      	b.n	8006902 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 80068e0:	bf00      	nop
 80068e2:	e00e      	b.n	8006902 <USBH_Process+0x3b6>
      break;
 80068e4:	bf00      	nop
 80068e6:	e00c      	b.n	8006902 <USBH_Process+0x3b6>
      break;
 80068e8:	bf00      	nop
 80068ea:	e00a      	b.n	8006902 <USBH_Process+0x3b6>
    break;
 80068ec:	bf00      	nop
 80068ee:	e008      	b.n	8006902 <USBH_Process+0x3b6>
      break;
 80068f0:	bf00      	nop
 80068f2:	e006      	b.n	8006902 <USBH_Process+0x3b6>
      break;
 80068f4:	bf00      	nop
 80068f6:	e004      	b.n	8006902 <USBH_Process+0x3b6>
      break;
 80068f8:	bf00      	nop
 80068fa:	e002      	b.n	8006902 <USBH_Process+0x3b6>
      break;
 80068fc:	bf00      	nop
 80068fe:	e000      	b.n	8006902 <USBH_Process+0x3b6>
      break;
 8006900:	bf00      	nop
  }
  return USBH_OK;
 8006902:	2300      	movs	r3, #0
}
 8006904:	4618      	mov	r0, r3
 8006906:	3710      	adds	r7, #16
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}

0800690c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b088      	sub	sp, #32
 8006910:	af04      	add	r7, sp, #16
 8006912:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006914:	2301      	movs	r3, #1
 8006916:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8006918:	2301      	movs	r3, #1
 800691a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	785b      	ldrb	r3, [r3, #1]
 8006920:	2b07      	cmp	r3, #7
 8006922:	f200 81c1 	bhi.w	8006ca8 <USBH_HandleEnum+0x39c>
 8006926:	a201      	add	r2, pc, #4	; (adr r2, 800692c <USBH_HandleEnum+0x20>)
 8006928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800692c:	0800694d 	.word	0x0800694d
 8006930:	08006a0b 	.word	0x08006a0b
 8006934:	08006a75 	.word	0x08006a75
 8006938:	08006b03 	.word	0x08006b03
 800693c:	08006b6d 	.word	0x08006b6d
 8006940:	08006bdd 	.word	0x08006bdd
 8006944:	08006c23 	.word	0x08006c23
 8006948:	08006c69 	.word	0x08006c69
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800694c:	2108      	movs	r1, #8
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f000 fa50 	bl	8006df4 <USBH_Get_DevDesc>
 8006954:	4603      	mov	r3, r0
 8006956:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006958:	7bbb      	ldrb	r3, [r7, #14]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d130      	bne.n	80069c0 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2201      	movs	r2, #1
 800696c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	7919      	ldrb	r1, [r3, #4]
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800697e:	687a      	ldr	r2, [r7, #4]
 8006980:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006982:	b292      	uxth	r2, r2
 8006984:	9202      	str	r2, [sp, #8]
 8006986:	2200      	movs	r2, #0
 8006988:	9201      	str	r2, [sp, #4]
 800698a:	9300      	str	r3, [sp, #0]
 800698c:	4603      	mov	r3, r0
 800698e:	2280      	movs	r2, #128	; 0x80
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f000 ff77 	bl	8007884 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	7959      	ldrb	r1, [r3, #5]
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80069a6:	687a      	ldr	r2, [r7, #4]
 80069a8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80069aa:	b292      	uxth	r2, r2
 80069ac:	9202      	str	r2, [sp, #8]
 80069ae:	2200      	movs	r2, #0
 80069b0:	9201      	str	r2, [sp, #4]
 80069b2:	9300      	str	r3, [sp, #0]
 80069b4:	4603      	mov	r3, r0
 80069b6:	2200      	movs	r2, #0
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f000 ff63 	bl	8007884 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80069be:	e175      	b.n	8006cac <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80069c0:	7bbb      	ldrb	r3, [r7, #14]
 80069c2:	2b03      	cmp	r3, #3
 80069c4:	f040 8172 	bne.w	8006cac <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80069ce:	3301      	adds	r3, #1
 80069d0:	b2da      	uxtb	r2, r3
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80069de:	2b03      	cmp	r3, #3
 80069e0:	d903      	bls.n	80069ea <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	220d      	movs	r2, #13
 80069e6:	701a      	strb	r2, [r3, #0]
      break;
 80069e8:	e160      	b.n	8006cac <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	795b      	ldrb	r3, [r3, #5]
 80069ee:	4619      	mov	r1, r3
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f000 ff97 	bl	8007924 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	791b      	ldrb	r3, [r3, #4]
 80069fa:	4619      	mov	r1, r3
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	f000 ff91 	bl	8007924 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2200      	movs	r2, #0
 8006a06:	701a      	strb	r2, [r3, #0]
      break;
 8006a08:	e150      	b.n	8006cac <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8006a0a:	2112      	movs	r1, #18
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	f000 f9f1 	bl	8006df4 <USBH_Get_DevDesc>
 8006a12:	4603      	mov	r3, r0
 8006a14:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006a16:	7bbb      	ldrb	r3, [r7, #14]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d103      	bne.n	8006a24 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2202      	movs	r2, #2
 8006a20:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006a22:	e145      	b.n	8006cb0 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006a24:	7bbb      	ldrb	r3, [r7, #14]
 8006a26:	2b03      	cmp	r3, #3
 8006a28:	f040 8142 	bne.w	8006cb0 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006a32:	3301      	adds	r3, #1
 8006a34:	b2da      	uxtb	r2, r3
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006a42:	2b03      	cmp	r3, #3
 8006a44:	d903      	bls.n	8006a4e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	220d      	movs	r2, #13
 8006a4a:	701a      	strb	r2, [r3, #0]
      break;
 8006a4c:	e130      	b.n	8006cb0 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	795b      	ldrb	r3, [r3, #5]
 8006a52:	4619      	mov	r1, r3
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f000 ff65 	bl	8007924 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	791b      	ldrb	r3, [r3, #4]
 8006a5e:	4619      	mov	r1, r3
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	f000 ff5f 	bl	8007924 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	701a      	strb	r2, [r3, #0]
      break;
 8006a72:	e11d      	b.n	8006cb0 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8006a74:	2101      	movs	r1, #1
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f000 fa68 	bl	8006f4c <USBH_SetAddress>
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006a80:	7bbb      	ldrb	r3, [r7, #14]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d132      	bne.n	8006aec <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8006a86:	2002      	movs	r0, #2
 8006a88:	f001 fa42 	bl	8007f10 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2201      	movs	r2, #1
 8006a90:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2203      	movs	r2, #3
 8006a98:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	7919      	ldrb	r1, [r3, #4]
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006aaa:	687a      	ldr	r2, [r7, #4]
 8006aac:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006aae:	b292      	uxth	r2, r2
 8006ab0:	9202      	str	r2, [sp, #8]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	9201      	str	r2, [sp, #4]
 8006ab6:	9300      	str	r3, [sp, #0]
 8006ab8:	4603      	mov	r3, r0
 8006aba:	2280      	movs	r2, #128	; 0x80
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	f000 fee1 	bl	8007884 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	7959      	ldrb	r1, [r3, #5]
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006ad2:	687a      	ldr	r2, [r7, #4]
 8006ad4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006ad6:	b292      	uxth	r2, r2
 8006ad8:	9202      	str	r2, [sp, #8]
 8006ada:	2200      	movs	r2, #0
 8006adc:	9201      	str	r2, [sp, #4]
 8006ade:	9300      	str	r3, [sp, #0]
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f000 fecd 	bl	8007884 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006aea:	e0e3      	b.n	8006cb4 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006aec:	7bbb      	ldrb	r3, [r7, #14]
 8006aee:	2b03      	cmp	r3, #3
 8006af0:	f040 80e0 	bne.w	8006cb4 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	220d      	movs	r2, #13
 8006af8:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2200      	movs	r2, #0
 8006afe:	705a      	strb	r2, [r3, #1]
      break;
 8006b00:	e0d8      	b.n	8006cb4 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8006b02:	2109      	movs	r1, #9
 8006b04:	6878      	ldr	r0, [r7, #4]
 8006b06:	f000 f99d 	bl	8006e44 <USBH_Get_CfgDesc>
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006b0e:	7bbb      	ldrb	r3, [r7, #14]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d103      	bne.n	8006b1c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2204      	movs	r2, #4
 8006b18:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006b1a:	e0cd      	b.n	8006cb8 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006b1c:	7bbb      	ldrb	r3, [r7, #14]
 8006b1e:	2b03      	cmp	r3, #3
 8006b20:	f040 80ca 	bne.w	8006cb8 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006b2a:	3301      	adds	r3, #1
 8006b2c:	b2da      	uxtb	r2, r3
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006b3a:	2b03      	cmp	r3, #3
 8006b3c:	d903      	bls.n	8006b46 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	220d      	movs	r2, #13
 8006b42:	701a      	strb	r2, [r3, #0]
      break;
 8006b44:	e0b8      	b.n	8006cb8 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	795b      	ldrb	r3, [r3, #5]
 8006b4a:	4619      	mov	r1, r3
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f000 fee9 	bl	8007924 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	791b      	ldrb	r3, [r3, #4]
 8006b56:	4619      	mov	r1, r3
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	f000 fee3 	bl	8007924 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2200      	movs	r2, #0
 8006b62:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2200      	movs	r2, #0
 8006b68:	701a      	strb	r2, [r3, #0]
      break;
 8006b6a:	e0a5      	b.n	8006cb8 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8006b72:	4619      	mov	r1, r3
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	f000 f965 	bl	8006e44 <USBH_Get_CfgDesc>
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006b7e:	7bbb      	ldrb	r3, [r7, #14]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d103      	bne.n	8006b8c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2205      	movs	r2, #5
 8006b88:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006b8a:	e097      	b.n	8006cbc <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006b8c:	7bbb      	ldrb	r3, [r7, #14]
 8006b8e:	2b03      	cmp	r3, #3
 8006b90:	f040 8094 	bne.w	8006cbc <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006b9a:	3301      	adds	r3, #1
 8006b9c:	b2da      	uxtb	r2, r3
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006baa:	2b03      	cmp	r3, #3
 8006bac:	d903      	bls.n	8006bb6 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	220d      	movs	r2, #13
 8006bb2:	701a      	strb	r2, [r3, #0]
      break;
 8006bb4:	e082      	b.n	8006cbc <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	795b      	ldrb	r3, [r3, #5]
 8006bba:	4619      	mov	r1, r3
 8006bbc:	6878      	ldr	r0, [r7, #4]
 8006bbe:	f000 feb1 	bl	8007924 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	791b      	ldrb	r3, [r3, #4]
 8006bc6:	4619      	mov	r1, r3
 8006bc8:	6878      	ldr	r0, [r7, #4]
 8006bca:	f000 feab 	bl	8007924 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	701a      	strb	r2, [r3, #0]
      break;
 8006bda:	e06f      	b.n	8006cbc <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d019      	beq.n	8006c1a <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006bf2:	23ff      	movs	r3, #255	; 0xff
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	f000 f949 	bl	8006e8c <USBH_Get_StringDesc>
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006bfe:	7bbb      	ldrb	r3, [r7, #14]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d103      	bne.n	8006c0c <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2206      	movs	r2, #6
 8006c08:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006c0a:	e059      	b.n	8006cc0 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006c0c:	7bbb      	ldrb	r3, [r7, #14]
 8006c0e:	2b03      	cmp	r3, #3
 8006c10:	d156      	bne.n	8006cc0 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2206      	movs	r2, #6
 8006c16:	705a      	strb	r2, [r3, #1]
      break;
 8006c18:	e052      	b.n	8006cc0 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2206      	movs	r2, #6
 8006c1e:	705a      	strb	r2, [r3, #1]
      break;
 8006c20:	e04e      	b.n	8006cc0 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d019      	beq.n	8006c60 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006c38:	23ff      	movs	r3, #255	; 0xff
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f000 f926 	bl	8006e8c <USBH_Get_StringDesc>
 8006c40:	4603      	mov	r3, r0
 8006c42:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006c44:	7bbb      	ldrb	r3, [r7, #14]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d103      	bne.n	8006c52 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2207      	movs	r2, #7
 8006c4e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006c50:	e038      	b.n	8006cc4 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006c52:	7bbb      	ldrb	r3, [r7, #14]
 8006c54:	2b03      	cmp	r3, #3
 8006c56:	d135      	bne.n	8006cc4 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2207      	movs	r2, #7
 8006c5c:	705a      	strb	r2, [r3, #1]
      break;
 8006c5e:	e031      	b.n	8006cc4 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2207      	movs	r2, #7
 8006c64:	705a      	strb	r2, [r3, #1]
      break;
 8006c66:	e02d      	b.n	8006cc4 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d017      	beq.n	8006ca2 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006c7e:	23ff      	movs	r3, #255	; 0xff
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	f000 f903 	bl	8006e8c <USBH_Get_StringDesc>
 8006c86:	4603      	mov	r3, r0
 8006c88:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006c8a:	7bbb      	ldrb	r3, [r7, #14]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d102      	bne.n	8006c96 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8006c90:	2300      	movs	r3, #0
 8006c92:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8006c94:	e018      	b.n	8006cc8 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006c96:	7bbb      	ldrb	r3, [r7, #14]
 8006c98:	2b03      	cmp	r3, #3
 8006c9a:	d115      	bne.n	8006cc8 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	73fb      	strb	r3, [r7, #15]
      break;
 8006ca0:	e012      	b.n	8006cc8 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	73fb      	strb	r3, [r7, #15]
      break;
 8006ca6:	e00f      	b.n	8006cc8 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8006ca8:	bf00      	nop
 8006caa:	e00e      	b.n	8006cca <USBH_HandleEnum+0x3be>
      break;
 8006cac:	bf00      	nop
 8006cae:	e00c      	b.n	8006cca <USBH_HandleEnum+0x3be>
      break;
 8006cb0:	bf00      	nop
 8006cb2:	e00a      	b.n	8006cca <USBH_HandleEnum+0x3be>
      break;
 8006cb4:	bf00      	nop
 8006cb6:	e008      	b.n	8006cca <USBH_HandleEnum+0x3be>
      break;
 8006cb8:	bf00      	nop
 8006cba:	e006      	b.n	8006cca <USBH_HandleEnum+0x3be>
      break;
 8006cbc:	bf00      	nop
 8006cbe:	e004      	b.n	8006cca <USBH_HandleEnum+0x3be>
      break;
 8006cc0:	bf00      	nop
 8006cc2:	e002      	b.n	8006cca <USBH_HandleEnum+0x3be>
      break;
 8006cc4:	bf00      	nop
 8006cc6:	e000      	b.n	8006cca <USBH_HandleEnum+0x3be>
      break;
 8006cc8:	bf00      	nop
  }
  return Status;
 8006cca:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ccc:	4618      	mov	r0, r3
 8006cce:	3710      	adds	r7, #16
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bd80      	pop	{r7, pc}

08006cd4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b083      	sub	sp, #12
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
 8006cdc:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	683a      	ldr	r2, [r7, #0]
 8006ce2:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8006ce6:	bf00      	nop
 8006ce8:	370c      	adds	r7, #12
 8006cea:	46bd      	mov	sp, r7
 8006cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf0:	4770      	bx	lr

08006cf2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8006cf2:	b580      	push	{r7, lr}
 8006cf4:	b082      	sub	sp, #8
 8006cf6:	af00      	add	r7, sp, #0
 8006cf8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006d00:	1c5a      	adds	r2, r3, #1
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8006d08:	6878      	ldr	r0, [r7, #4]
 8006d0a:	f000 f804 	bl	8006d16 <USBH_HandleSof>
}
 8006d0e:	bf00      	nop
 8006d10:	3708      	adds	r7, #8
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bd80      	pop	{r7, pc}

08006d16 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8006d16:	b580      	push	{r7, lr}
 8006d18:	b082      	sub	sp, #8
 8006d1a:	af00      	add	r7, sp, #0
 8006d1c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	781b      	ldrb	r3, [r3, #0]
 8006d22:	b2db      	uxtb	r3, r3
 8006d24:	2b0b      	cmp	r3, #11
 8006d26:	d10a      	bne.n	8006d3e <USBH_HandleSof+0x28>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d005      	beq.n	8006d3e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d38:	699b      	ldr	r3, [r3, #24]
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	4798      	blx	r3
  }
}
 8006d3e:	bf00      	nop
 8006d40:	3708      	adds	r7, #8
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bd80      	pop	{r7, pc}

08006d46 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8006d46:	b480      	push	{r7}
 8006d48:	b083      	sub	sp, #12
 8006d4a:	af00      	add	r7, sp, #0
 8006d4c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2201      	movs	r2, #1
 8006d52:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8006d56:	bf00      	nop
}
 8006d58:	370c      	adds	r7, #12
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d60:	4770      	bx	lr

08006d62 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8006d62:	b480      	push	{r7}
 8006d64:	b083      	sub	sp, #12
 8006d66:	af00      	add	r7, sp, #0
 8006d68:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8006d72:	bf00      	nop
}
 8006d74:	370c      	adds	r7, #12
 8006d76:	46bd      	mov	sp, r7
 8006d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7c:	4770      	bx	lr

08006d7e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8006d7e:	b480      	push	{r7}
 8006d80:	b083      	sub	sp, #12
 8006d82:	af00      	add	r7, sp, #0
 8006d84:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2201      	movs	r2, #1
 8006d8a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2200      	movs	r2, #0
 8006d92:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8006d9e:	2300      	movs	r3, #0
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	370c      	adds	r7, #12
 8006da4:	46bd      	mov	sp, r7
 8006da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006daa:	4770      	bx	lr

08006dac <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b082      	sub	sp, #8
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2201      	movs	r2, #1
 8006db8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f000 ff56 	bl	8007c7e <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	791b      	ldrb	r3, [r3, #4]
 8006dd6:	4619      	mov	r1, r3
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f000 fda3 	bl	8007924 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	795b      	ldrb	r3, [r3, #5]
 8006de2:	4619      	mov	r1, r3
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	f000 fd9d 	bl	8007924 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8006dea:	2300      	movs	r3, #0
}
 8006dec:	4618      	mov	r0, r3
 8006dee:	3708      	adds	r7, #8
 8006df0:	46bd      	mov	sp, r7
 8006df2:	bd80      	pop	{r7, pc}

08006df4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b086      	sub	sp, #24
 8006df8:	af02      	add	r7, sp, #8
 8006dfa:	6078      	str	r0, [r7, #4]
 8006dfc:	460b      	mov	r3, r1
 8006dfe:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8006e06:	78fb      	ldrb	r3, [r7, #3]
 8006e08:	b29b      	uxth	r3, r3
 8006e0a:	9300      	str	r3, [sp, #0]
 8006e0c:	4613      	mov	r3, r2
 8006e0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006e12:	2100      	movs	r1, #0
 8006e14:	6878      	ldr	r0, [r7, #4]
 8006e16:	f000 f864 	bl	8006ee2 <USBH_GetDescriptor>
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	73fb      	strb	r3, [r7, #15]
 8006e1e:	7bfb      	ldrb	r3, [r7, #15]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d10a      	bne.n	8006e3a <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f203 3026 	addw	r0, r3, #806	; 0x326
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006e30:	78fa      	ldrb	r2, [r7, #3]
 8006e32:	b292      	uxth	r2, r2
 8006e34:	4619      	mov	r1, r3
 8006e36:	f000 f918 	bl	800706a <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8006e3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	3710      	adds	r7, #16
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}

08006e44 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b086      	sub	sp, #24
 8006e48:	af02      	add	r7, sp, #8
 8006e4a:	6078      	str	r0, [r7, #4]
 8006e4c:	460b      	mov	r3, r1
 8006e4e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	331c      	adds	r3, #28
 8006e54:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8006e56:	887b      	ldrh	r3, [r7, #2]
 8006e58:	9300      	str	r3, [sp, #0]
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e60:	2100      	movs	r1, #0
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f000 f83d 	bl	8006ee2 <USBH_GetDescriptor>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	72fb      	strb	r3, [r7, #11]
 8006e6c:	7afb      	ldrb	r3, [r7, #11]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d107      	bne.n	8006e82 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006e78:	887a      	ldrh	r2, [r7, #2]
 8006e7a:	68f9      	ldr	r1, [r7, #12]
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	f000 f964 	bl	800714a <USBH_ParseCfgDesc>
  }

  return status;
 8006e82:	7afb      	ldrb	r3, [r7, #11]
}
 8006e84:	4618      	mov	r0, r3
 8006e86:	3710      	adds	r7, #16
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bd80      	pop	{r7, pc}

08006e8c <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b088      	sub	sp, #32
 8006e90:	af02      	add	r7, sp, #8
 8006e92:	60f8      	str	r0, [r7, #12]
 8006e94:	607a      	str	r2, [r7, #4]
 8006e96:	461a      	mov	r2, r3
 8006e98:	460b      	mov	r3, r1
 8006e9a:	72fb      	strb	r3, [r7, #11]
 8006e9c:	4613      	mov	r3, r2
 8006e9e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8006ea0:	7afb      	ldrb	r3, [r7, #11]
 8006ea2:	b29b      	uxth	r3, r3
 8006ea4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006ea8:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8006eb0:	893b      	ldrh	r3, [r7, #8]
 8006eb2:	9300      	str	r3, [sp, #0]
 8006eb4:	460b      	mov	r3, r1
 8006eb6:	2100      	movs	r1, #0
 8006eb8:	68f8      	ldr	r0, [r7, #12]
 8006eba:	f000 f812 	bl	8006ee2 <USBH_GetDescriptor>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	75fb      	strb	r3, [r7, #23]
 8006ec2:	7dfb      	ldrb	r3, [r7, #23]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d107      	bne.n	8006ed8 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006ece:	893a      	ldrh	r2, [r7, #8]
 8006ed0:	6879      	ldr	r1, [r7, #4]
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	f000 fa37 	bl	8007346 <USBH_ParseStringDesc>
  }

  return status;
 8006ed8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006eda:	4618      	mov	r0, r3
 8006edc:	3718      	adds	r7, #24
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bd80      	pop	{r7, pc}

08006ee2 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8006ee2:	b580      	push	{r7, lr}
 8006ee4:	b084      	sub	sp, #16
 8006ee6:	af00      	add	r7, sp, #0
 8006ee8:	60f8      	str	r0, [r7, #12]
 8006eea:	607b      	str	r3, [r7, #4]
 8006eec:	460b      	mov	r3, r1
 8006eee:	72fb      	strb	r3, [r7, #11]
 8006ef0:	4613      	mov	r3, r2
 8006ef2:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	789b      	ldrb	r3, [r3, #2]
 8006ef8:	2b01      	cmp	r3, #1
 8006efa:	d11c      	bne.n	8006f36 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8006efc:	7afb      	ldrb	r3, [r7, #11]
 8006efe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006f02:	b2da      	uxtb	r2, r3
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	2206      	movs	r2, #6
 8006f0c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	893a      	ldrh	r2, [r7, #8]
 8006f12:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8006f14:	893b      	ldrh	r3, [r7, #8]
 8006f16:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006f1a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f1e:	d104      	bne.n	8006f2a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	f240 4209 	movw	r2, #1033	; 0x409
 8006f26:	829a      	strh	r2, [r3, #20]
 8006f28:	e002      	b.n	8006f30 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	8b3a      	ldrh	r2, [r7, #24]
 8006f34:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8006f36:	8b3b      	ldrh	r3, [r7, #24]
 8006f38:	461a      	mov	r2, r3
 8006f3a:	6879      	ldr	r1, [r7, #4]
 8006f3c:	68f8      	ldr	r0, [r7, #12]
 8006f3e:	f000 fa50 	bl	80073e2 <USBH_CtlReq>
 8006f42:	4603      	mov	r3, r0
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	3710      	adds	r7, #16
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bd80      	pop	{r7, pc}

08006f4c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b082      	sub	sp, #8
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
 8006f54:	460b      	mov	r3, r1
 8006f56:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	789b      	ldrb	r3, [r3, #2]
 8006f5c:	2b01      	cmp	r3, #1
 8006f5e:	d10f      	bne.n	8006f80 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2200      	movs	r2, #0
 8006f64:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2205      	movs	r2, #5
 8006f6a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8006f6c:	78fb      	ldrb	r3, [r7, #3]
 8006f6e:	b29a      	uxth	r2, r3
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2200      	movs	r2, #0
 8006f78:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8006f80:	2200      	movs	r2, #0
 8006f82:	2100      	movs	r1, #0
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	f000 fa2c 	bl	80073e2 <USBH_CtlReq>
 8006f8a:	4603      	mov	r3, r0
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	3708      	adds	r7, #8
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd80      	pop	{r7, pc}

08006f94 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b082      	sub	sp, #8
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
 8006f9c:	460b      	mov	r3, r1
 8006f9e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	789b      	ldrb	r3, [r3, #2]
 8006fa4:	2b01      	cmp	r3, #1
 8006fa6:	d10e      	bne.n	8006fc6 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2200      	movs	r2, #0
 8006fac:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2209      	movs	r2, #9
 8006fb2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	887a      	ldrh	r2, [r7, #2]
 8006fb8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	2100      	movs	r1, #0
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	f000 fa09 	bl	80073e2 <USBH_CtlReq>
 8006fd0:	4603      	mov	r3, r0
}
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	3708      	adds	r7, #8
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bd80      	pop	{r7, pc}

08006fda <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8006fda:	b580      	push	{r7, lr}
 8006fdc:	b082      	sub	sp, #8
 8006fde:	af00      	add	r7, sp, #0
 8006fe0:	6078      	str	r0, [r7, #4]
 8006fe2:	460b      	mov	r3, r1
 8006fe4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	789b      	ldrb	r3, [r3, #2]
 8006fea:	2b01      	cmp	r3, #1
 8006fec:	d10f      	bne.n	800700e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2203      	movs	r2, #3
 8006ff8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8006ffa:	78fb      	ldrb	r3, [r7, #3]
 8006ffc:	b29a      	uxth	r2, r3
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2200      	movs	r2, #0
 8007006:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2200      	movs	r2, #0
 800700c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800700e:	2200      	movs	r2, #0
 8007010:	2100      	movs	r1, #0
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f000 f9e5 	bl	80073e2 <USBH_CtlReq>
 8007018:	4603      	mov	r3, r0
}
 800701a:	4618      	mov	r0, r3
 800701c:	3708      	adds	r7, #8
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}

08007022 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007022:	b580      	push	{r7, lr}
 8007024:	b082      	sub	sp, #8
 8007026:	af00      	add	r7, sp, #0
 8007028:	6078      	str	r0, [r7, #4]
 800702a:	460b      	mov	r3, r1
 800702c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	789b      	ldrb	r3, [r3, #2]
 8007032:	2b01      	cmp	r3, #1
 8007034:	d10f      	bne.n	8007056 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2202      	movs	r2, #2
 800703a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2201      	movs	r2, #1
 8007040:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2200      	movs	r2, #0
 8007046:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007048:	78fb      	ldrb	r3, [r7, #3]
 800704a:	b29a      	uxth	r2, r3
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2200      	movs	r2, #0
 8007054:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8007056:	2200      	movs	r2, #0
 8007058:	2100      	movs	r1, #0
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f000 f9c1 	bl	80073e2 <USBH_CtlReq>
 8007060:	4603      	mov	r3, r0
}
 8007062:	4618      	mov	r0, r3
 8007064:	3708      	adds	r7, #8
 8007066:	46bd      	mov	sp, r7
 8007068:	bd80      	pop	{r7, pc}

0800706a <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800706a:	b480      	push	{r7}
 800706c:	b085      	sub	sp, #20
 800706e:	af00      	add	r7, sp, #0
 8007070:	60f8      	str	r0, [r7, #12]
 8007072:	60b9      	str	r1, [r7, #8]
 8007074:	4613      	mov	r3, r2
 8007076:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	781a      	ldrb	r2, [r3, #0]
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	785a      	ldrb	r2, [r3, #1]
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	3302      	adds	r3, #2
 800708c:	781b      	ldrb	r3, [r3, #0]
 800708e:	b29a      	uxth	r2, r3
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	3303      	adds	r3, #3
 8007094:	781b      	ldrb	r3, [r3, #0]
 8007096:	b29b      	uxth	r3, r3
 8007098:	021b      	lsls	r3, r3, #8
 800709a:	b29b      	uxth	r3, r3
 800709c:	4313      	orrs	r3, r2
 800709e:	b29a      	uxth	r2, r3
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	791a      	ldrb	r2, [r3, #4]
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	795a      	ldrb	r2, [r3, #5]
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	799a      	ldrb	r2, [r3, #6]
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	79da      	ldrb	r2, [r3, #7]
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 80070c4:	88fb      	ldrh	r3, [r7, #6]
 80070c6:	2b08      	cmp	r3, #8
 80070c8:	d939      	bls.n	800713e <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 80070ca:	68bb      	ldr	r3, [r7, #8]
 80070cc:	3308      	adds	r3, #8
 80070ce:	781b      	ldrb	r3, [r3, #0]
 80070d0:	b29a      	uxth	r2, r3
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	3309      	adds	r3, #9
 80070d6:	781b      	ldrb	r3, [r3, #0]
 80070d8:	b29b      	uxth	r3, r3
 80070da:	021b      	lsls	r3, r3, #8
 80070dc:	b29b      	uxth	r3, r3
 80070de:	4313      	orrs	r3, r2
 80070e0:	b29a      	uxth	r2, r3
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 80070e6:	68bb      	ldr	r3, [r7, #8]
 80070e8:	330a      	adds	r3, #10
 80070ea:	781b      	ldrb	r3, [r3, #0]
 80070ec:	b29a      	uxth	r2, r3
 80070ee:	68bb      	ldr	r3, [r7, #8]
 80070f0:	330b      	adds	r3, #11
 80070f2:	781b      	ldrb	r3, [r3, #0]
 80070f4:	b29b      	uxth	r3, r3
 80070f6:	021b      	lsls	r3, r3, #8
 80070f8:	b29b      	uxth	r3, r3
 80070fa:	4313      	orrs	r3, r2
 80070fc:	b29a      	uxth	r2, r3
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	330c      	adds	r3, #12
 8007106:	781b      	ldrb	r3, [r3, #0]
 8007108:	b29a      	uxth	r2, r3
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	330d      	adds	r3, #13
 800710e:	781b      	ldrb	r3, [r3, #0]
 8007110:	b29b      	uxth	r3, r3
 8007112:	021b      	lsls	r3, r3, #8
 8007114:	b29b      	uxth	r3, r3
 8007116:	4313      	orrs	r3, r2
 8007118:	b29a      	uxth	r2, r3
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	7b9a      	ldrb	r2, [r3, #14]
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	7bda      	ldrb	r2, [r3, #15]
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	7c1a      	ldrb	r2, [r3, #16]
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	7c5a      	ldrb	r2, [r3, #17]
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	745a      	strb	r2, [r3, #17]
  }
}
 800713e:	bf00      	nop
 8007140:	3714      	adds	r7, #20
 8007142:	46bd      	mov	sp, r7
 8007144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007148:	4770      	bx	lr

0800714a <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800714a:	b580      	push	{r7, lr}
 800714c:	b08a      	sub	sp, #40	; 0x28
 800714e:	af00      	add	r7, sp, #0
 8007150:	60f8      	str	r0, [r7, #12]
 8007152:	60b9      	str	r1, [r7, #8]
 8007154:	4613      	mov	r3, r2
 8007156:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007158:	68bb      	ldr	r3, [r7, #8]
 800715a:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800715c:	2300      	movs	r3, #0
 800715e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8007162:	2300      	movs	r3, #0
 8007164:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	781a      	ldrb	r2, [r3, #0]
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	785a      	ldrb	r2, [r3, #1]
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	3302      	adds	r3, #2
 8007180:	781b      	ldrb	r3, [r3, #0]
 8007182:	b29a      	uxth	r2, r3
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	3303      	adds	r3, #3
 8007188:	781b      	ldrb	r3, [r3, #0]
 800718a:	b29b      	uxth	r3, r3
 800718c:	021b      	lsls	r3, r3, #8
 800718e:	b29b      	uxth	r3, r3
 8007190:	4313      	orrs	r3, r2
 8007192:	b29a      	uxth	r2, r3
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	791a      	ldrb	r2, [r3, #4]
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	795a      	ldrb	r2, [r3, #5]
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	799a      	ldrb	r2, [r3, #6]
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	79da      	ldrb	r2, [r3, #7]
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	7a1a      	ldrb	r2, [r3, #8]
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80071c0:	88fb      	ldrh	r3, [r7, #6]
 80071c2:	2b09      	cmp	r3, #9
 80071c4:	d95f      	bls.n	8007286 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 80071c6:	2309      	movs	r3, #9
 80071c8:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 80071ca:	2300      	movs	r3, #0
 80071cc:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80071ce:	e051      	b.n	8007274 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80071d0:	f107 0316 	add.w	r3, r7, #22
 80071d4:	4619      	mov	r1, r3
 80071d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80071d8:	f000 f8e8 	bl	80073ac <USBH_GetNextDesc>
 80071dc:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 80071de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e0:	785b      	ldrb	r3, [r3, #1]
 80071e2:	2b04      	cmp	r3, #4
 80071e4:	d146      	bne.n	8007274 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 80071e6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80071ea:	221a      	movs	r2, #26
 80071ec:	fb02 f303 	mul.w	r3, r2, r3
 80071f0:	3308      	adds	r3, #8
 80071f2:	68fa      	ldr	r2, [r7, #12]
 80071f4:	4413      	add	r3, r2
 80071f6:	3302      	adds	r3, #2
 80071f8:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80071fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80071fc:	69f8      	ldr	r0, [r7, #28]
 80071fe:	f000 f846 	bl	800728e <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007202:	2300      	movs	r3, #0
 8007204:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8007208:	2300      	movs	r3, #0
 800720a:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800720c:	e022      	b.n	8007254 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800720e:	f107 0316 	add.w	r3, r7, #22
 8007212:	4619      	mov	r1, r3
 8007214:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007216:	f000 f8c9 	bl	80073ac <USBH_GetNextDesc>
 800721a:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800721c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800721e:	785b      	ldrb	r3, [r3, #1]
 8007220:	2b05      	cmp	r3, #5
 8007222:	d117      	bne.n	8007254 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007224:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007228:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800722c:	3201      	adds	r2, #1
 800722e:	00d2      	lsls	r2, r2, #3
 8007230:	211a      	movs	r1, #26
 8007232:	fb01 f303 	mul.w	r3, r1, r3
 8007236:	4413      	add	r3, r2
 8007238:	3308      	adds	r3, #8
 800723a:	68fa      	ldr	r2, [r7, #12]
 800723c:	4413      	add	r3, r2
 800723e:	3304      	adds	r3, #4
 8007240:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8007242:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007244:	69b8      	ldr	r0, [r7, #24]
 8007246:	f000 f851 	bl	80072ec <USBH_ParseEPDesc>
            ep_ix++;
 800724a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800724e:	3301      	adds	r3, #1
 8007250:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007254:	69fb      	ldr	r3, [r7, #28]
 8007256:	791b      	ldrb	r3, [r3, #4]
 8007258:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800725c:	429a      	cmp	r2, r3
 800725e:	d204      	bcs.n	800726a <USBH_ParseCfgDesc+0x120>
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	885a      	ldrh	r2, [r3, #2]
 8007264:	8afb      	ldrh	r3, [r7, #22]
 8007266:	429a      	cmp	r2, r3
 8007268:	d8d1      	bhi.n	800720e <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800726a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800726e:	3301      	adds	r3, #1
 8007270:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007274:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007278:	2b01      	cmp	r3, #1
 800727a:	d804      	bhi.n	8007286 <USBH_ParseCfgDesc+0x13c>
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	885a      	ldrh	r2, [r3, #2]
 8007280:	8afb      	ldrh	r3, [r7, #22]
 8007282:	429a      	cmp	r2, r3
 8007284:	d8a4      	bhi.n	80071d0 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8007286:	bf00      	nop
 8007288:	3728      	adds	r7, #40	; 0x28
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}

0800728e <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800728e:	b480      	push	{r7}
 8007290:	b083      	sub	sp, #12
 8007292:	af00      	add	r7, sp, #0
 8007294:	6078      	str	r0, [r7, #4]
 8007296:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	781a      	ldrb	r2, [r3, #0]
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	785a      	ldrb	r2, [r3, #1]
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	789a      	ldrb	r2, [r3, #2]
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	78da      	ldrb	r2, [r3, #3]
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	791a      	ldrb	r2, [r3, #4]
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	795a      	ldrb	r2, [r3, #5]
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	799a      	ldrb	r2, [r3, #6]
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	79da      	ldrb	r2, [r3, #7]
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	7a1a      	ldrb	r2, [r3, #8]
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	721a      	strb	r2, [r3, #8]
}
 80072e0:	bf00      	nop
 80072e2:	370c      	adds	r7, #12
 80072e4:	46bd      	mov	sp, r7
 80072e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ea:	4770      	bx	lr

080072ec <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 80072ec:	b480      	push	{r7}
 80072ee:	b083      	sub	sp, #12
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
 80072f4:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	781a      	ldrb	r2, [r3, #0]
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	785a      	ldrb	r2, [r3, #1]
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	789a      	ldrb	r2, [r3, #2]
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	78da      	ldrb	r2, [r3, #3]
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	3304      	adds	r3, #4
 800731a:	781b      	ldrb	r3, [r3, #0]
 800731c:	b29a      	uxth	r2, r3
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	3305      	adds	r3, #5
 8007322:	781b      	ldrb	r3, [r3, #0]
 8007324:	b29b      	uxth	r3, r3
 8007326:	021b      	lsls	r3, r3, #8
 8007328:	b29b      	uxth	r3, r3
 800732a:	4313      	orrs	r3, r2
 800732c:	b29a      	uxth	r2, r3
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	799a      	ldrb	r2, [r3, #6]
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	719a      	strb	r2, [r3, #6]
}
 800733a:	bf00      	nop
 800733c:	370c      	adds	r7, #12
 800733e:	46bd      	mov	sp, r7
 8007340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007344:	4770      	bx	lr

08007346 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007346:	b480      	push	{r7}
 8007348:	b087      	sub	sp, #28
 800734a:	af00      	add	r7, sp, #0
 800734c:	60f8      	str	r0, [r7, #12]
 800734e:	60b9      	str	r1, [r7, #8]
 8007350:	4613      	mov	r3, r2
 8007352:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	3301      	adds	r3, #1
 8007358:	781b      	ldrb	r3, [r3, #0]
 800735a:	2b03      	cmp	r3, #3
 800735c:	d120      	bne.n	80073a0 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	781b      	ldrb	r3, [r3, #0]
 8007362:	1e9a      	subs	r2, r3, #2
 8007364:	88fb      	ldrh	r3, [r7, #6]
 8007366:	4293      	cmp	r3, r2
 8007368:	bf28      	it	cs
 800736a:	4613      	movcs	r3, r2
 800736c:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	3302      	adds	r3, #2
 8007372:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007374:	2300      	movs	r3, #0
 8007376:	82fb      	strh	r3, [r7, #22]
 8007378:	e00b      	b.n	8007392 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800737a:	8afb      	ldrh	r3, [r7, #22]
 800737c:	68fa      	ldr	r2, [r7, #12]
 800737e:	4413      	add	r3, r2
 8007380:	781a      	ldrb	r2, [r3, #0]
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007386:	68bb      	ldr	r3, [r7, #8]
 8007388:	3301      	adds	r3, #1
 800738a:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800738c:	8afb      	ldrh	r3, [r7, #22]
 800738e:	3302      	adds	r3, #2
 8007390:	82fb      	strh	r3, [r7, #22]
 8007392:	8afa      	ldrh	r2, [r7, #22]
 8007394:	8abb      	ldrh	r3, [r7, #20]
 8007396:	429a      	cmp	r2, r3
 8007398:	d3ef      	bcc.n	800737a <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	2200      	movs	r2, #0
 800739e:	701a      	strb	r2, [r3, #0]
  }
}
 80073a0:	bf00      	nop
 80073a2:	371c      	adds	r7, #28
 80073a4:	46bd      	mov	sp, r7
 80073a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073aa:	4770      	bx	lr

080073ac <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 80073ac:	b480      	push	{r7}
 80073ae:	b085      	sub	sp, #20
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
 80073b4:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	881a      	ldrh	r2, [r3, #0]
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	781b      	ldrb	r3, [r3, #0]
 80073be:	b29b      	uxth	r3, r3
 80073c0:	4413      	add	r3, r2
 80073c2:	b29a      	uxth	r2, r3
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	781b      	ldrb	r3, [r3, #0]
 80073cc:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	4413      	add	r3, r2
 80073d2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80073d4:	68fb      	ldr	r3, [r7, #12]
}
 80073d6:	4618      	mov	r0, r3
 80073d8:	3714      	adds	r7, #20
 80073da:	46bd      	mov	sp, r7
 80073dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e0:	4770      	bx	lr

080073e2 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80073e2:	b580      	push	{r7, lr}
 80073e4:	b086      	sub	sp, #24
 80073e6:	af00      	add	r7, sp, #0
 80073e8:	60f8      	str	r0, [r7, #12]
 80073ea:	60b9      	str	r1, [r7, #8]
 80073ec:	4613      	mov	r3, r2
 80073ee:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80073f0:	2301      	movs	r3, #1
 80073f2:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	789b      	ldrb	r3, [r3, #2]
 80073f8:	2b01      	cmp	r3, #1
 80073fa:	d002      	beq.n	8007402 <USBH_CtlReq+0x20>
 80073fc:	2b02      	cmp	r3, #2
 80073fe:	d00f      	beq.n	8007420 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8007400:	e027      	b.n	8007452 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	68ba      	ldr	r2, [r7, #8]
 8007406:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	88fa      	ldrh	r2, [r7, #6]
 800740c:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	2201      	movs	r2, #1
 8007412:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	2202      	movs	r2, #2
 8007418:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800741a:	2301      	movs	r3, #1
 800741c:	75fb      	strb	r3, [r7, #23]
      break;
 800741e:	e018      	b.n	8007452 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8007420:	68f8      	ldr	r0, [r7, #12]
 8007422:	f000 f81b 	bl	800745c <USBH_HandleControl>
 8007426:	4603      	mov	r3, r0
 8007428:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800742a:	7dfb      	ldrb	r3, [r7, #23]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d002      	beq.n	8007436 <USBH_CtlReq+0x54>
 8007430:	7dfb      	ldrb	r3, [r7, #23]
 8007432:	2b03      	cmp	r3, #3
 8007434:	d106      	bne.n	8007444 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	2201      	movs	r2, #1
 800743a:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	2200      	movs	r2, #0
 8007440:	761a      	strb	r2, [r3, #24]
      break;
 8007442:	e005      	b.n	8007450 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007444:	7dfb      	ldrb	r3, [r7, #23]
 8007446:	2b02      	cmp	r3, #2
 8007448:	d102      	bne.n	8007450 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	2201      	movs	r2, #1
 800744e:	709a      	strb	r2, [r3, #2]
      break;
 8007450:	bf00      	nop
  }
  return status;
 8007452:	7dfb      	ldrb	r3, [r7, #23]
}
 8007454:	4618      	mov	r0, r3
 8007456:	3718      	adds	r7, #24
 8007458:	46bd      	mov	sp, r7
 800745a:	bd80      	pop	{r7, pc}

0800745c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b086      	sub	sp, #24
 8007460:	af02      	add	r7, sp, #8
 8007462:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007464:	2301      	movs	r3, #1
 8007466:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007468:	2300      	movs	r3, #0
 800746a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	7e1b      	ldrb	r3, [r3, #24]
 8007470:	3b01      	subs	r3, #1
 8007472:	2b0a      	cmp	r3, #10
 8007474:	f200 8156 	bhi.w	8007724 <USBH_HandleControl+0x2c8>
 8007478:	a201      	add	r2, pc, #4	; (adr r2, 8007480 <USBH_HandleControl+0x24>)
 800747a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800747e:	bf00      	nop
 8007480:	080074ad 	.word	0x080074ad
 8007484:	080074c7 	.word	0x080074c7
 8007488:	08007531 	.word	0x08007531
 800748c:	08007557 	.word	0x08007557
 8007490:	0800758f 	.word	0x0800758f
 8007494:	080075b9 	.word	0x080075b9
 8007498:	0800760b 	.word	0x0800760b
 800749c:	0800762d 	.word	0x0800762d
 80074a0:	08007669 	.word	0x08007669
 80074a4:	0800768f 	.word	0x0800768f
 80074a8:	080076cd 	.word	0x080076cd
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f103 0110 	add.w	r1, r3, #16
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	795b      	ldrb	r3, [r3, #5]
 80074b6:	461a      	mov	r2, r3
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f000 f943 	bl	8007744 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2202      	movs	r2, #2
 80074c2:	761a      	strb	r2, [r3, #24]
      break;
 80074c4:	e139      	b.n	800773a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	795b      	ldrb	r3, [r3, #5]
 80074ca:	4619      	mov	r1, r3
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f000 fcc5 	bl	8007e5c <USBH_LL_GetURBState>
 80074d2:	4603      	mov	r3, r0
 80074d4:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80074d6:	7bbb      	ldrb	r3, [r7, #14]
 80074d8:	2b01      	cmp	r3, #1
 80074da:	d11e      	bne.n	800751a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	7c1b      	ldrb	r3, [r3, #16]
 80074e0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80074e4:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	8adb      	ldrh	r3, [r3, #22]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d00a      	beq.n	8007504 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80074ee:	7b7b      	ldrb	r3, [r7, #13]
 80074f0:	2b80      	cmp	r3, #128	; 0x80
 80074f2:	d103      	bne.n	80074fc <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2203      	movs	r2, #3
 80074f8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80074fa:	e115      	b.n	8007728 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2205      	movs	r2, #5
 8007500:	761a      	strb	r2, [r3, #24]
      break;
 8007502:	e111      	b.n	8007728 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8007504:	7b7b      	ldrb	r3, [r7, #13]
 8007506:	2b80      	cmp	r3, #128	; 0x80
 8007508:	d103      	bne.n	8007512 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2209      	movs	r2, #9
 800750e:	761a      	strb	r2, [r3, #24]
      break;
 8007510:	e10a      	b.n	8007728 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2207      	movs	r2, #7
 8007516:	761a      	strb	r2, [r3, #24]
      break;
 8007518:	e106      	b.n	8007728 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800751a:	7bbb      	ldrb	r3, [r7, #14]
 800751c:	2b04      	cmp	r3, #4
 800751e:	d003      	beq.n	8007528 <USBH_HandleControl+0xcc>
 8007520:	7bbb      	ldrb	r3, [r7, #14]
 8007522:	2b02      	cmp	r3, #2
 8007524:	f040 8100 	bne.w	8007728 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	220b      	movs	r2, #11
 800752c:	761a      	strb	r2, [r3, #24]
      break;
 800752e:	e0fb      	b.n	8007728 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007536:	b29a      	uxth	r2, r3
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6899      	ldr	r1, [r3, #8]
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	899a      	ldrh	r2, [r3, #12]
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	791b      	ldrb	r3, [r3, #4]
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	f000 f93a 	bl	80077c2 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2204      	movs	r2, #4
 8007552:	761a      	strb	r2, [r3, #24]
      break;
 8007554:	e0f1      	b.n	800773a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	791b      	ldrb	r3, [r3, #4]
 800755a:	4619      	mov	r1, r3
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	f000 fc7d 	bl	8007e5c <USBH_LL_GetURBState>
 8007562:	4603      	mov	r3, r0
 8007564:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007566:	7bbb      	ldrb	r3, [r7, #14]
 8007568:	2b01      	cmp	r3, #1
 800756a:	d102      	bne.n	8007572 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2209      	movs	r2, #9
 8007570:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007572:	7bbb      	ldrb	r3, [r7, #14]
 8007574:	2b05      	cmp	r3, #5
 8007576:	d102      	bne.n	800757e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007578:	2303      	movs	r3, #3
 800757a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800757c:	e0d6      	b.n	800772c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800757e:	7bbb      	ldrb	r3, [r7, #14]
 8007580:	2b04      	cmp	r3, #4
 8007582:	f040 80d3 	bne.w	800772c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	220b      	movs	r2, #11
 800758a:	761a      	strb	r2, [r3, #24]
      break;
 800758c:	e0ce      	b.n	800772c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6899      	ldr	r1, [r3, #8]
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	899a      	ldrh	r2, [r3, #12]
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	795b      	ldrb	r3, [r3, #5]
 800759a:	2001      	movs	r0, #1
 800759c:	9000      	str	r0, [sp, #0]
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	f000 f8ea 	bl	8007778 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80075aa:	b29a      	uxth	r2, r3
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2206      	movs	r2, #6
 80075b4:	761a      	strb	r2, [r3, #24]
      break;
 80075b6:	e0c0      	b.n	800773a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	795b      	ldrb	r3, [r3, #5]
 80075bc:	4619      	mov	r1, r3
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f000 fc4c 	bl	8007e5c <USBH_LL_GetURBState>
 80075c4:	4603      	mov	r3, r0
 80075c6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80075c8:	7bbb      	ldrb	r3, [r7, #14]
 80075ca:	2b01      	cmp	r3, #1
 80075cc:	d103      	bne.n	80075d6 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2207      	movs	r2, #7
 80075d2:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80075d4:	e0ac      	b.n	8007730 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 80075d6:	7bbb      	ldrb	r3, [r7, #14]
 80075d8:	2b05      	cmp	r3, #5
 80075da:	d105      	bne.n	80075e8 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	220c      	movs	r2, #12
 80075e0:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80075e2:	2303      	movs	r3, #3
 80075e4:	73fb      	strb	r3, [r7, #15]
      break;
 80075e6:	e0a3      	b.n	8007730 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 80075e8:	7bbb      	ldrb	r3, [r7, #14]
 80075ea:	2b02      	cmp	r3, #2
 80075ec:	d103      	bne.n	80075f6 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2205      	movs	r2, #5
 80075f2:	761a      	strb	r2, [r3, #24]
      break;
 80075f4:	e09c      	b.n	8007730 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80075f6:	7bbb      	ldrb	r3, [r7, #14]
 80075f8:	2b04      	cmp	r3, #4
 80075fa:	f040 8099 	bne.w	8007730 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	220b      	movs	r2, #11
 8007602:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007604:	2302      	movs	r3, #2
 8007606:	73fb      	strb	r3, [r7, #15]
      break;
 8007608:	e092      	b.n	8007730 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	791b      	ldrb	r3, [r3, #4]
 800760e:	2200      	movs	r2, #0
 8007610:	2100      	movs	r1, #0
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f000 f8d5 	bl	80077c2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800761e:	b29a      	uxth	r2, r3
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2208      	movs	r2, #8
 8007628:	761a      	strb	r2, [r3, #24]

      break;
 800762a:	e086      	b.n	800773a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	791b      	ldrb	r3, [r3, #4]
 8007630:	4619      	mov	r1, r3
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	f000 fc12 	bl	8007e5c <USBH_LL_GetURBState>
 8007638:	4603      	mov	r3, r0
 800763a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800763c:	7bbb      	ldrb	r3, [r7, #14]
 800763e:	2b01      	cmp	r3, #1
 8007640:	d105      	bne.n	800764e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	220d      	movs	r2, #13
 8007646:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007648:	2300      	movs	r3, #0
 800764a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800764c:	e072      	b.n	8007734 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800764e:	7bbb      	ldrb	r3, [r7, #14]
 8007650:	2b04      	cmp	r3, #4
 8007652:	d103      	bne.n	800765c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	220b      	movs	r2, #11
 8007658:	761a      	strb	r2, [r3, #24]
      break;
 800765a:	e06b      	b.n	8007734 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800765c:	7bbb      	ldrb	r3, [r7, #14]
 800765e:	2b05      	cmp	r3, #5
 8007660:	d168      	bne.n	8007734 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8007662:	2303      	movs	r3, #3
 8007664:	73fb      	strb	r3, [r7, #15]
      break;
 8007666:	e065      	b.n	8007734 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	795b      	ldrb	r3, [r3, #5]
 800766c:	2201      	movs	r2, #1
 800766e:	9200      	str	r2, [sp, #0]
 8007670:	2200      	movs	r2, #0
 8007672:	2100      	movs	r1, #0
 8007674:	6878      	ldr	r0, [r7, #4]
 8007676:	f000 f87f 	bl	8007778 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007680:	b29a      	uxth	r2, r3
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	220a      	movs	r2, #10
 800768a:	761a      	strb	r2, [r3, #24]
      break;
 800768c:	e055      	b.n	800773a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	795b      	ldrb	r3, [r3, #5]
 8007692:	4619      	mov	r1, r3
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	f000 fbe1 	bl	8007e5c <USBH_LL_GetURBState>
 800769a:	4603      	mov	r3, r0
 800769c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800769e:	7bbb      	ldrb	r3, [r7, #14]
 80076a0:	2b01      	cmp	r3, #1
 80076a2:	d105      	bne.n	80076b0 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 80076a4:	2300      	movs	r3, #0
 80076a6:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	220d      	movs	r2, #13
 80076ac:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80076ae:	e043      	b.n	8007738 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 80076b0:	7bbb      	ldrb	r3, [r7, #14]
 80076b2:	2b02      	cmp	r3, #2
 80076b4:	d103      	bne.n	80076be <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2209      	movs	r2, #9
 80076ba:	761a      	strb	r2, [r3, #24]
      break;
 80076bc:	e03c      	b.n	8007738 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 80076be:	7bbb      	ldrb	r3, [r7, #14]
 80076c0:	2b04      	cmp	r3, #4
 80076c2:	d139      	bne.n	8007738 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	220b      	movs	r2, #11
 80076c8:	761a      	strb	r2, [r3, #24]
      break;
 80076ca:	e035      	b.n	8007738 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	7e5b      	ldrb	r3, [r3, #25]
 80076d0:	3301      	adds	r3, #1
 80076d2:	b2da      	uxtb	r2, r3
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	765a      	strb	r2, [r3, #25]
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	7e5b      	ldrb	r3, [r3, #25]
 80076dc:	2b02      	cmp	r3, #2
 80076de:	d806      	bhi.n	80076ee <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2201      	movs	r2, #1
 80076e4:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2201      	movs	r2, #1
 80076ea:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80076ec:	e025      	b.n	800773a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80076f4:	2106      	movs	r1, #6
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2200      	movs	r2, #0
 80076fe:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	795b      	ldrb	r3, [r3, #5]
 8007704:	4619      	mov	r1, r3
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f000 f90c 	bl	8007924 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	791b      	ldrb	r3, [r3, #4]
 8007710:	4619      	mov	r1, r3
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f000 f906 	bl	8007924 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2200      	movs	r2, #0
 800771c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800771e:	2302      	movs	r3, #2
 8007720:	73fb      	strb	r3, [r7, #15]
      break;
 8007722:	e00a      	b.n	800773a <USBH_HandleControl+0x2de>

    default:
      break;
 8007724:	bf00      	nop
 8007726:	e008      	b.n	800773a <USBH_HandleControl+0x2de>
      break;
 8007728:	bf00      	nop
 800772a:	e006      	b.n	800773a <USBH_HandleControl+0x2de>
      break;
 800772c:	bf00      	nop
 800772e:	e004      	b.n	800773a <USBH_HandleControl+0x2de>
      break;
 8007730:	bf00      	nop
 8007732:	e002      	b.n	800773a <USBH_HandleControl+0x2de>
      break;
 8007734:	bf00      	nop
 8007736:	e000      	b.n	800773a <USBH_HandleControl+0x2de>
      break;
 8007738:	bf00      	nop
  }

  return status;
 800773a:	7bfb      	ldrb	r3, [r7, #15]
}
 800773c:	4618      	mov	r0, r3
 800773e:	3710      	adds	r7, #16
 8007740:	46bd      	mov	sp, r7
 8007742:	bd80      	pop	{r7, pc}

08007744 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b088      	sub	sp, #32
 8007748:	af04      	add	r7, sp, #16
 800774a:	60f8      	str	r0, [r7, #12]
 800774c:	60b9      	str	r1, [r7, #8]
 800774e:	4613      	mov	r3, r2
 8007750:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007752:	79f9      	ldrb	r1, [r7, #7]
 8007754:	2300      	movs	r3, #0
 8007756:	9303      	str	r3, [sp, #12]
 8007758:	2308      	movs	r3, #8
 800775a:	9302      	str	r3, [sp, #8]
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	9301      	str	r3, [sp, #4]
 8007760:	2300      	movs	r3, #0
 8007762:	9300      	str	r3, [sp, #0]
 8007764:	2300      	movs	r3, #0
 8007766:	2200      	movs	r2, #0
 8007768:	68f8      	ldr	r0, [r7, #12]
 800776a:	f000 fb46 	bl	8007dfa <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800776e:	2300      	movs	r3, #0
}
 8007770:	4618      	mov	r0, r3
 8007772:	3710      	adds	r7, #16
 8007774:	46bd      	mov	sp, r7
 8007776:	bd80      	pop	{r7, pc}

08007778 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b088      	sub	sp, #32
 800777c:	af04      	add	r7, sp, #16
 800777e:	60f8      	str	r0, [r7, #12]
 8007780:	60b9      	str	r1, [r7, #8]
 8007782:	4611      	mov	r1, r2
 8007784:	461a      	mov	r2, r3
 8007786:	460b      	mov	r3, r1
 8007788:	80fb      	strh	r3, [r7, #6]
 800778a:	4613      	mov	r3, r2
 800778c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007794:	2b00      	cmp	r3, #0
 8007796:	d001      	beq.n	800779c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007798:	2300      	movs	r3, #0
 800779a:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800779c:	7979      	ldrb	r1, [r7, #5]
 800779e:	7e3b      	ldrb	r3, [r7, #24]
 80077a0:	9303      	str	r3, [sp, #12]
 80077a2:	88fb      	ldrh	r3, [r7, #6]
 80077a4:	9302      	str	r3, [sp, #8]
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	9301      	str	r3, [sp, #4]
 80077aa:	2301      	movs	r3, #1
 80077ac:	9300      	str	r3, [sp, #0]
 80077ae:	2300      	movs	r3, #0
 80077b0:	2200      	movs	r2, #0
 80077b2:	68f8      	ldr	r0, [r7, #12]
 80077b4:	f000 fb21 	bl	8007dfa <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80077b8:	2300      	movs	r3, #0
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	3710      	adds	r7, #16
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}

080077c2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80077c2:	b580      	push	{r7, lr}
 80077c4:	b088      	sub	sp, #32
 80077c6:	af04      	add	r7, sp, #16
 80077c8:	60f8      	str	r0, [r7, #12]
 80077ca:	60b9      	str	r1, [r7, #8]
 80077cc:	4611      	mov	r1, r2
 80077ce:	461a      	mov	r2, r3
 80077d0:	460b      	mov	r3, r1
 80077d2:	80fb      	strh	r3, [r7, #6]
 80077d4:	4613      	mov	r3, r2
 80077d6:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80077d8:	7979      	ldrb	r1, [r7, #5]
 80077da:	2300      	movs	r3, #0
 80077dc:	9303      	str	r3, [sp, #12]
 80077de:	88fb      	ldrh	r3, [r7, #6]
 80077e0:	9302      	str	r3, [sp, #8]
 80077e2:	68bb      	ldr	r3, [r7, #8]
 80077e4:	9301      	str	r3, [sp, #4]
 80077e6:	2301      	movs	r3, #1
 80077e8:	9300      	str	r3, [sp, #0]
 80077ea:	2300      	movs	r3, #0
 80077ec:	2201      	movs	r2, #1
 80077ee:	68f8      	ldr	r0, [r7, #12]
 80077f0:	f000 fb03 	bl	8007dfa <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80077f4:	2300      	movs	r3, #0

}
 80077f6:	4618      	mov	r0, r3
 80077f8:	3710      	adds	r7, #16
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bd80      	pop	{r7, pc}

080077fe <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80077fe:	b580      	push	{r7, lr}
 8007800:	b088      	sub	sp, #32
 8007802:	af04      	add	r7, sp, #16
 8007804:	60f8      	str	r0, [r7, #12]
 8007806:	60b9      	str	r1, [r7, #8]
 8007808:	4611      	mov	r1, r2
 800780a:	461a      	mov	r2, r3
 800780c:	460b      	mov	r3, r1
 800780e:	80fb      	strh	r3, [r7, #6]
 8007810:	4613      	mov	r3, r2
 8007812:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800781a:	2b00      	cmp	r3, #0
 800781c:	d001      	beq.n	8007822 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800781e:	2300      	movs	r3, #0
 8007820:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007822:	7979      	ldrb	r1, [r7, #5]
 8007824:	7e3b      	ldrb	r3, [r7, #24]
 8007826:	9303      	str	r3, [sp, #12]
 8007828:	88fb      	ldrh	r3, [r7, #6]
 800782a:	9302      	str	r3, [sp, #8]
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	9301      	str	r3, [sp, #4]
 8007830:	2301      	movs	r3, #1
 8007832:	9300      	str	r3, [sp, #0]
 8007834:	2302      	movs	r3, #2
 8007836:	2200      	movs	r2, #0
 8007838:	68f8      	ldr	r0, [r7, #12]
 800783a:	f000 fade 	bl	8007dfa <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800783e:	2300      	movs	r3, #0
}
 8007840:	4618      	mov	r0, r3
 8007842:	3710      	adds	r7, #16
 8007844:	46bd      	mov	sp, r7
 8007846:	bd80      	pop	{r7, pc}

08007848 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b088      	sub	sp, #32
 800784c:	af04      	add	r7, sp, #16
 800784e:	60f8      	str	r0, [r7, #12]
 8007850:	60b9      	str	r1, [r7, #8]
 8007852:	4611      	mov	r1, r2
 8007854:	461a      	mov	r2, r3
 8007856:	460b      	mov	r3, r1
 8007858:	80fb      	strh	r3, [r7, #6]
 800785a:	4613      	mov	r3, r2
 800785c:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800785e:	7979      	ldrb	r1, [r7, #5]
 8007860:	2300      	movs	r3, #0
 8007862:	9303      	str	r3, [sp, #12]
 8007864:	88fb      	ldrh	r3, [r7, #6]
 8007866:	9302      	str	r3, [sp, #8]
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	9301      	str	r3, [sp, #4]
 800786c:	2301      	movs	r3, #1
 800786e:	9300      	str	r3, [sp, #0]
 8007870:	2302      	movs	r3, #2
 8007872:	2201      	movs	r2, #1
 8007874:	68f8      	ldr	r0, [r7, #12]
 8007876:	f000 fac0 	bl	8007dfa <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800787a:	2300      	movs	r3, #0
}
 800787c:	4618      	mov	r0, r3
 800787e:	3710      	adds	r7, #16
 8007880:	46bd      	mov	sp, r7
 8007882:	bd80      	pop	{r7, pc}

08007884 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b086      	sub	sp, #24
 8007888:	af04      	add	r7, sp, #16
 800788a:	6078      	str	r0, [r7, #4]
 800788c:	4608      	mov	r0, r1
 800788e:	4611      	mov	r1, r2
 8007890:	461a      	mov	r2, r3
 8007892:	4603      	mov	r3, r0
 8007894:	70fb      	strb	r3, [r7, #3]
 8007896:	460b      	mov	r3, r1
 8007898:	70bb      	strb	r3, [r7, #2]
 800789a:	4613      	mov	r3, r2
 800789c:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800789e:	7878      	ldrb	r0, [r7, #1]
 80078a0:	78ba      	ldrb	r2, [r7, #2]
 80078a2:	78f9      	ldrb	r1, [r7, #3]
 80078a4:	8b3b      	ldrh	r3, [r7, #24]
 80078a6:	9302      	str	r3, [sp, #8]
 80078a8:	7d3b      	ldrb	r3, [r7, #20]
 80078aa:	9301      	str	r3, [sp, #4]
 80078ac:	7c3b      	ldrb	r3, [r7, #16]
 80078ae:	9300      	str	r3, [sp, #0]
 80078b0:	4603      	mov	r3, r0
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	f000 fa53 	bl	8007d5e <USBH_LL_OpenPipe>

  return USBH_OK;
 80078b8:	2300      	movs	r3, #0
}
 80078ba:	4618      	mov	r0, r3
 80078bc:	3708      	adds	r7, #8
 80078be:	46bd      	mov	sp, r7
 80078c0:	bd80      	pop	{r7, pc}

080078c2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80078c2:	b580      	push	{r7, lr}
 80078c4:	b082      	sub	sp, #8
 80078c6:	af00      	add	r7, sp, #0
 80078c8:	6078      	str	r0, [r7, #4]
 80078ca:	460b      	mov	r3, r1
 80078cc:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 80078ce:	78fb      	ldrb	r3, [r7, #3]
 80078d0:	4619      	mov	r1, r3
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f000 fa72 	bl	8007dbc <USBH_LL_ClosePipe>

  return USBH_OK;
 80078d8:	2300      	movs	r3, #0
}
 80078da:	4618      	mov	r0, r3
 80078dc:	3708      	adds	r7, #8
 80078de:	46bd      	mov	sp, r7
 80078e0:	bd80      	pop	{r7, pc}

080078e2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80078e2:	b580      	push	{r7, lr}
 80078e4:	b084      	sub	sp, #16
 80078e6:	af00      	add	r7, sp, #0
 80078e8:	6078      	str	r0, [r7, #4]
 80078ea:	460b      	mov	r3, r1
 80078ec:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	f000 f836 	bl	8007960 <USBH_GetFreePipe>
 80078f4:	4603      	mov	r3, r0
 80078f6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80078f8:	89fb      	ldrh	r3, [r7, #14]
 80078fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80078fe:	4293      	cmp	r3, r2
 8007900:	d00a      	beq.n	8007918 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8007902:	78fa      	ldrb	r2, [r7, #3]
 8007904:	89fb      	ldrh	r3, [r7, #14]
 8007906:	f003 030f 	and.w	r3, r3, #15
 800790a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800790e:	6879      	ldr	r1, [r7, #4]
 8007910:	33e0      	adds	r3, #224	; 0xe0
 8007912:	009b      	lsls	r3, r3, #2
 8007914:	440b      	add	r3, r1
 8007916:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8007918:	89fb      	ldrh	r3, [r7, #14]
 800791a:	b2db      	uxtb	r3, r3
}
 800791c:	4618      	mov	r0, r3
 800791e:	3710      	adds	r7, #16
 8007920:	46bd      	mov	sp, r7
 8007922:	bd80      	pop	{r7, pc}

08007924 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007924:	b480      	push	{r7}
 8007926:	b083      	sub	sp, #12
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
 800792c:	460b      	mov	r3, r1
 800792e:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8007930:	78fb      	ldrb	r3, [r7, #3]
 8007932:	2b0a      	cmp	r3, #10
 8007934:	d80d      	bhi.n	8007952 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8007936:	78fb      	ldrb	r3, [r7, #3]
 8007938:	687a      	ldr	r2, [r7, #4]
 800793a:	33e0      	adds	r3, #224	; 0xe0
 800793c:	009b      	lsls	r3, r3, #2
 800793e:	4413      	add	r3, r2
 8007940:	685a      	ldr	r2, [r3, #4]
 8007942:	78fb      	ldrb	r3, [r7, #3]
 8007944:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007948:	6879      	ldr	r1, [r7, #4]
 800794a:	33e0      	adds	r3, #224	; 0xe0
 800794c:	009b      	lsls	r3, r3, #2
 800794e:	440b      	add	r3, r1
 8007950:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8007952:	2300      	movs	r3, #0
}
 8007954:	4618      	mov	r0, r3
 8007956:	370c      	adds	r7, #12
 8007958:	46bd      	mov	sp, r7
 800795a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795e:	4770      	bx	lr

08007960 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8007960:	b480      	push	{r7}
 8007962:	b085      	sub	sp, #20
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007968:	2300      	movs	r3, #0
 800796a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800796c:	2300      	movs	r3, #0
 800796e:	73fb      	strb	r3, [r7, #15]
 8007970:	e00f      	b.n	8007992 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8007972:	7bfb      	ldrb	r3, [r7, #15]
 8007974:	687a      	ldr	r2, [r7, #4]
 8007976:	33e0      	adds	r3, #224	; 0xe0
 8007978:	009b      	lsls	r3, r3, #2
 800797a:	4413      	add	r3, r2
 800797c:	685b      	ldr	r3, [r3, #4]
 800797e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007982:	2b00      	cmp	r3, #0
 8007984:	d102      	bne.n	800798c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8007986:	7bfb      	ldrb	r3, [r7, #15]
 8007988:	b29b      	uxth	r3, r3
 800798a:	e007      	b.n	800799c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800798c:	7bfb      	ldrb	r3, [r7, #15]
 800798e:	3301      	adds	r3, #1
 8007990:	73fb      	strb	r3, [r7, #15]
 8007992:	7bfb      	ldrb	r3, [r7, #15]
 8007994:	2b0a      	cmp	r3, #10
 8007996:	d9ec      	bls.n	8007972 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8007998:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800799c:	4618      	mov	r0, r3
 800799e:	3714      	adds	r7, #20
 80079a0:	46bd      	mov	sp, r7
 80079a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a6:	4770      	bx	lr

080079a8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80079ac:	2201      	movs	r2, #1
 80079ae:	490e      	ldr	r1, [pc, #56]	; (80079e8 <MX_USB_HOST_Init+0x40>)
 80079b0:	480e      	ldr	r0, [pc, #56]	; (80079ec <MX_USB_HOST_Init+0x44>)
 80079b2:	f7fe fca1 	bl	80062f8 <USBH_Init>
 80079b6:	4603      	mov	r3, r0
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d001      	beq.n	80079c0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80079bc:	f7f9 fa8a 	bl	8000ed4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80079c0:	490b      	ldr	r1, [pc, #44]	; (80079f0 <MX_USB_HOST_Init+0x48>)
 80079c2:	480a      	ldr	r0, [pc, #40]	; (80079ec <MX_USB_HOST_Init+0x44>)
 80079c4:	f7fe fd26 	bl	8006414 <USBH_RegisterClass>
 80079c8:	4603      	mov	r3, r0
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d001      	beq.n	80079d2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80079ce:	f7f9 fa81 	bl	8000ed4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80079d2:	4806      	ldr	r0, [pc, #24]	; (80079ec <MX_USB_HOST_Init+0x44>)
 80079d4:	f7fe fdaa 	bl	800652c <USBH_Start>
 80079d8:	4603      	mov	r3, r0
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d001      	beq.n	80079e2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80079de:	f7f9 fa79 	bl	8000ed4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80079e2:	bf00      	nop
 80079e4:	bd80      	pop	{r7, pc}
 80079e6:	bf00      	nop
 80079e8:	08007a09 	.word	0x08007a09
 80079ec:	20000280 	.word	0x20000280
 80079f0:	2000000c 	.word	0x2000000c

080079f4 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80079f8:	4802      	ldr	r0, [pc, #8]	; (8007a04 <MX_USB_HOST_Process+0x10>)
 80079fa:	f7fe fda7 	bl	800654c <USBH_Process>
}
 80079fe:	bf00      	nop
 8007a00:	bd80      	pop	{r7, pc}
 8007a02:	bf00      	nop
 8007a04:	20000280 	.word	0x20000280

08007a08 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8007a08:	b480      	push	{r7}
 8007a0a:	b083      	sub	sp, #12
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
 8007a10:	460b      	mov	r3, r1
 8007a12:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8007a14:	78fb      	ldrb	r3, [r7, #3]
 8007a16:	3b01      	subs	r3, #1
 8007a18:	2b04      	cmp	r3, #4
 8007a1a:	d819      	bhi.n	8007a50 <USBH_UserProcess+0x48>
 8007a1c:	a201      	add	r2, pc, #4	; (adr r2, 8007a24 <USBH_UserProcess+0x1c>)
 8007a1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a22:	bf00      	nop
 8007a24:	08007a51 	.word	0x08007a51
 8007a28:	08007a41 	.word	0x08007a41
 8007a2c:	08007a51 	.word	0x08007a51
 8007a30:	08007a49 	.word	0x08007a49
 8007a34:	08007a39 	.word	0x08007a39
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8007a38:	4b09      	ldr	r3, [pc, #36]	; (8007a60 <USBH_UserProcess+0x58>)
 8007a3a:	2203      	movs	r2, #3
 8007a3c:	701a      	strb	r2, [r3, #0]
  break;
 8007a3e:	e008      	b.n	8007a52 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8007a40:	4b07      	ldr	r3, [pc, #28]	; (8007a60 <USBH_UserProcess+0x58>)
 8007a42:	2202      	movs	r2, #2
 8007a44:	701a      	strb	r2, [r3, #0]
  break;
 8007a46:	e004      	b.n	8007a52 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8007a48:	4b05      	ldr	r3, [pc, #20]	; (8007a60 <USBH_UserProcess+0x58>)
 8007a4a:	2201      	movs	r2, #1
 8007a4c:	701a      	strb	r2, [r3, #0]
  break;
 8007a4e:	e000      	b.n	8007a52 <USBH_UserProcess+0x4a>

  default:
  break;
 8007a50:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8007a52:	bf00      	nop
 8007a54:	370c      	adds	r7, #12
 8007a56:	46bd      	mov	sp, r7
 8007a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5c:	4770      	bx	lr
 8007a5e:	bf00      	nop
 8007a60:	200001e0 	.word	0x200001e0

08007a64 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b08a      	sub	sp, #40	; 0x28
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007a6c:	f107 0314 	add.w	r3, r7, #20
 8007a70:	2200      	movs	r2, #0
 8007a72:	601a      	str	r2, [r3, #0]
 8007a74:	605a      	str	r2, [r3, #4]
 8007a76:	609a      	str	r2, [r3, #8]
 8007a78:	60da      	str	r2, [r3, #12]
 8007a7a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007a84:	d147      	bne.n	8007b16 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007a86:	2300      	movs	r3, #0
 8007a88:	613b      	str	r3, [r7, #16]
 8007a8a:	4b25      	ldr	r3, [pc, #148]	; (8007b20 <HAL_HCD_MspInit+0xbc>)
 8007a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a8e:	4a24      	ldr	r2, [pc, #144]	; (8007b20 <HAL_HCD_MspInit+0xbc>)
 8007a90:	f043 0301 	orr.w	r3, r3, #1
 8007a94:	6313      	str	r3, [r2, #48]	; 0x30
 8007a96:	4b22      	ldr	r3, [pc, #136]	; (8007b20 <HAL_HCD_MspInit+0xbc>)
 8007a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a9a:	f003 0301 	and.w	r3, r3, #1
 8007a9e:	613b      	str	r3, [r7, #16]
 8007aa0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8007aa2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007aa6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007aac:	2300      	movs	r3, #0
 8007aae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007ab0:	f107 0314 	add.w	r3, r7, #20
 8007ab4:	4619      	mov	r1, r3
 8007ab6:	481b      	ldr	r0, [pc, #108]	; (8007b24 <HAL_HCD_MspInit+0xc0>)
 8007ab8:	f7f9 fd98 	bl	80015ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007abc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007ac0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007ac2:	2302      	movs	r3, #2
 8007ac4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007aca:	2300      	movs	r3, #0
 8007acc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007ace:	230a      	movs	r3, #10
 8007ad0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007ad2:	f107 0314 	add.w	r3, r7, #20
 8007ad6:	4619      	mov	r1, r3
 8007ad8:	4812      	ldr	r0, [pc, #72]	; (8007b24 <HAL_HCD_MspInit+0xc0>)
 8007ada:	f7f9 fd87 	bl	80015ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007ade:	4b10      	ldr	r3, [pc, #64]	; (8007b20 <HAL_HCD_MspInit+0xbc>)
 8007ae0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ae2:	4a0f      	ldr	r2, [pc, #60]	; (8007b20 <HAL_HCD_MspInit+0xbc>)
 8007ae4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ae8:	6353      	str	r3, [r2, #52]	; 0x34
 8007aea:	2300      	movs	r3, #0
 8007aec:	60fb      	str	r3, [r7, #12]
 8007aee:	4b0c      	ldr	r3, [pc, #48]	; (8007b20 <HAL_HCD_MspInit+0xbc>)
 8007af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007af2:	4a0b      	ldr	r2, [pc, #44]	; (8007b20 <HAL_HCD_MspInit+0xbc>)
 8007af4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007af8:	6453      	str	r3, [r2, #68]	; 0x44
 8007afa:	4b09      	ldr	r3, [pc, #36]	; (8007b20 <HAL_HCD_MspInit+0xbc>)
 8007afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007afe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b02:	60fb      	str	r3, [r7, #12]
 8007b04:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007b06:	2200      	movs	r2, #0
 8007b08:	2100      	movs	r1, #0
 8007b0a:	2043      	movs	r0, #67	; 0x43
 8007b0c:	f7f9 fd37 	bl	800157e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007b10:	2043      	movs	r0, #67	; 0x43
 8007b12:	f7f9 fd50 	bl	80015b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007b16:	bf00      	nop
 8007b18:	3728      	adds	r7, #40	; 0x28
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd80      	pop	{r7, pc}
 8007b1e:	bf00      	nop
 8007b20:	40023800 	.word	0x40023800
 8007b24:	40020000 	.word	0x40020000

08007b28 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b082      	sub	sp, #8
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007b36:	4618      	mov	r0, r3
 8007b38:	f7ff f8db 	bl	8006cf2 <USBH_LL_IncTimer>
}
 8007b3c:	bf00      	nop
 8007b3e:	3708      	adds	r7, #8
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd80      	pop	{r7, pc}

08007b44 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b082      	sub	sp, #8
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007b52:	4618      	mov	r0, r3
 8007b54:	f7ff f913 	bl	8006d7e <USBH_LL_Connect>
}
 8007b58:	bf00      	nop
 8007b5a:	3708      	adds	r7, #8
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	bd80      	pop	{r7, pc}

08007b60 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b082      	sub	sp, #8
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007b6e:	4618      	mov	r0, r3
 8007b70:	f7ff f91c 	bl	8006dac <USBH_LL_Disconnect>
}
 8007b74:	bf00      	nop
 8007b76:	3708      	adds	r7, #8
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	bd80      	pop	{r7, pc}

08007b7c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8007b7c:	b480      	push	{r7}
 8007b7e:	b083      	sub	sp, #12
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
 8007b84:	460b      	mov	r3, r1
 8007b86:	70fb      	strb	r3, [r7, #3]
 8007b88:	4613      	mov	r3, r2
 8007b8a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8007b8c:	bf00      	nop
 8007b8e:	370c      	adds	r7, #12
 8007b90:	46bd      	mov	sp, r7
 8007b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b96:	4770      	bx	lr

08007b98 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b082      	sub	sp, #8
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	f7ff f8cd 	bl	8006d46 <USBH_LL_PortEnabled>
}
 8007bac:	bf00      	nop
 8007bae:	3708      	adds	r7, #8
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	bd80      	pop	{r7, pc}

08007bb4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b082      	sub	sp, #8
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	f7ff f8cd 	bl	8006d62 <USBH_LL_PortDisabled>
}
 8007bc8:	bf00      	nop
 8007bca:	3708      	adds	r7, #8
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	bd80      	pop	{r7, pc}

08007bd0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b082      	sub	sp, #8
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8007bde:	2b01      	cmp	r3, #1
 8007be0:	d12a      	bne.n	8007c38 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8007be2:	4a18      	ldr	r2, [pc, #96]	; (8007c44 <USBH_LL_Init+0x74>)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	4a15      	ldr	r2, [pc, #84]	; (8007c44 <USBH_LL_Init+0x74>)
 8007bee:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007bf2:	4b14      	ldr	r3, [pc, #80]	; (8007c44 <USBH_LL_Init+0x74>)
 8007bf4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007bf8:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8007bfa:	4b12      	ldr	r3, [pc, #72]	; (8007c44 <USBH_LL_Init+0x74>)
 8007bfc:	2208      	movs	r2, #8
 8007bfe:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8007c00:	4b10      	ldr	r3, [pc, #64]	; (8007c44 <USBH_LL_Init+0x74>)
 8007c02:	2201      	movs	r2, #1
 8007c04:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007c06:	4b0f      	ldr	r3, [pc, #60]	; (8007c44 <USBH_LL_Init+0x74>)
 8007c08:	2200      	movs	r2, #0
 8007c0a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8007c0c:	4b0d      	ldr	r3, [pc, #52]	; (8007c44 <USBH_LL_Init+0x74>)
 8007c0e:	2202      	movs	r2, #2
 8007c10:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007c12:	4b0c      	ldr	r3, [pc, #48]	; (8007c44 <USBH_LL_Init+0x74>)
 8007c14:	2200      	movs	r2, #0
 8007c16:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8007c18:	480a      	ldr	r0, [pc, #40]	; (8007c44 <USBH_LL_Init+0x74>)
 8007c1a:	f7f9 fe9c 	bl	8001956 <HAL_HCD_Init>
 8007c1e:	4603      	mov	r3, r0
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d001      	beq.n	8007c28 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8007c24:	f7f9 f956 	bl	8000ed4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8007c28:	4806      	ldr	r0, [pc, #24]	; (8007c44 <USBH_LL_Init+0x74>)
 8007c2a:	f7fa fa80 	bl	800212e <HAL_HCD_GetCurrentFrame>
 8007c2e:	4603      	mov	r3, r0
 8007c30:	4619      	mov	r1, r3
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f7ff f84e 	bl	8006cd4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8007c38:	2300      	movs	r3, #0
}
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	3708      	adds	r7, #8
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	bd80      	pop	{r7, pc}
 8007c42:	bf00      	nop
 8007c44:	20000658 	.word	0x20000658

08007c48 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b084      	sub	sp, #16
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c50:	2300      	movs	r3, #0
 8007c52:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007c54:	2300      	movs	r3, #0
 8007c56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007c5e:	4618      	mov	r0, r3
 8007c60:	f7fa f9ef 	bl	8002042 <HAL_HCD_Start>
 8007c64:	4603      	mov	r3, r0
 8007c66:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007c68:	7bfb      	ldrb	r3, [r7, #15]
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	f000 f95c 	bl	8007f28 <USBH_Get_USB_Status>
 8007c70:	4603      	mov	r3, r0
 8007c72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c74:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c76:	4618      	mov	r0, r3
 8007c78:	3710      	adds	r7, #16
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bd80      	pop	{r7, pc}

08007c7e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8007c7e:	b580      	push	{r7, lr}
 8007c80:	b084      	sub	sp, #16
 8007c82:	af00      	add	r7, sp, #0
 8007c84:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c86:	2300      	movs	r3, #0
 8007c88:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007c94:	4618      	mov	r0, r3
 8007c96:	f7fa f9f7 	bl	8002088 <HAL_HCD_Stop>
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007c9e:	7bfb      	ldrb	r3, [r7, #15]
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	f000 f941 	bl	8007f28 <USBH_Get_USB_Status>
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007caa:	7bbb      	ldrb	r3, [r7, #14]
}
 8007cac:	4618      	mov	r0, r3
 8007cae:	3710      	adds	r7, #16
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bd80      	pop	{r7, pc}

08007cb4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b084      	sub	sp, #16
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8007cbc:	2301      	movs	r3, #1
 8007cbe:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	f7fa fa3f 	bl	800214a <HAL_HCD_GetCurrentSpeed>
 8007ccc:	4603      	mov	r3, r0
 8007cce:	2b02      	cmp	r3, #2
 8007cd0:	d00c      	beq.n	8007cec <USBH_LL_GetSpeed+0x38>
 8007cd2:	2b02      	cmp	r3, #2
 8007cd4:	d80d      	bhi.n	8007cf2 <USBH_LL_GetSpeed+0x3e>
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d002      	beq.n	8007ce0 <USBH_LL_GetSpeed+0x2c>
 8007cda:	2b01      	cmp	r3, #1
 8007cdc:	d003      	beq.n	8007ce6 <USBH_LL_GetSpeed+0x32>
 8007cde:	e008      	b.n	8007cf2 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	73fb      	strb	r3, [r7, #15]
    break;
 8007ce4:	e008      	b.n	8007cf8 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8007ce6:	2301      	movs	r3, #1
 8007ce8:	73fb      	strb	r3, [r7, #15]
    break;
 8007cea:	e005      	b.n	8007cf8 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8007cec:	2302      	movs	r3, #2
 8007cee:	73fb      	strb	r3, [r7, #15]
    break;
 8007cf0:	e002      	b.n	8007cf8 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8007cf2:	2301      	movs	r3, #1
 8007cf4:	73fb      	strb	r3, [r7, #15]
    break;
 8007cf6:	bf00      	nop
  }
  return  speed;
 8007cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	3710      	adds	r7, #16
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd80      	pop	{r7, pc}

08007d02 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8007d02:	b580      	push	{r7, lr}
 8007d04:	b084      	sub	sp, #16
 8007d06:	af00      	add	r7, sp, #0
 8007d08:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007d0e:	2300      	movs	r3, #0
 8007d10:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007d18:	4618      	mov	r0, r3
 8007d1a:	f7fa f9d2 	bl	80020c2 <HAL_HCD_ResetPort>
 8007d1e:	4603      	mov	r3, r0
 8007d20:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007d22:	7bfb      	ldrb	r3, [r7, #15]
 8007d24:	4618      	mov	r0, r3
 8007d26:	f000 f8ff 	bl	8007f28 <USBH_Get_USB_Status>
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d2e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d30:	4618      	mov	r0, r3
 8007d32:	3710      	adds	r7, #16
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bd80      	pop	{r7, pc}

08007d38 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b082      	sub	sp, #8
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
 8007d40:	460b      	mov	r3, r1
 8007d42:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007d4a:	78fa      	ldrb	r2, [r7, #3]
 8007d4c:	4611      	mov	r1, r2
 8007d4e:	4618      	mov	r0, r3
 8007d50:	f7fa f9d9 	bl	8002106 <HAL_HCD_HC_GetXferCount>
 8007d54:	4603      	mov	r3, r0
}
 8007d56:	4618      	mov	r0, r3
 8007d58:	3708      	adds	r7, #8
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}

08007d5e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007d5e:	b590      	push	{r4, r7, lr}
 8007d60:	b089      	sub	sp, #36	; 0x24
 8007d62:	af04      	add	r7, sp, #16
 8007d64:	6078      	str	r0, [r7, #4]
 8007d66:	4608      	mov	r0, r1
 8007d68:	4611      	mov	r1, r2
 8007d6a:	461a      	mov	r2, r3
 8007d6c:	4603      	mov	r3, r0
 8007d6e:	70fb      	strb	r3, [r7, #3]
 8007d70:	460b      	mov	r3, r1
 8007d72:	70bb      	strb	r3, [r7, #2]
 8007d74:	4613      	mov	r3, r2
 8007d76:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d78:	2300      	movs	r3, #0
 8007d7a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8007d86:	787c      	ldrb	r4, [r7, #1]
 8007d88:	78ba      	ldrb	r2, [r7, #2]
 8007d8a:	78f9      	ldrb	r1, [r7, #3]
 8007d8c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007d8e:	9302      	str	r3, [sp, #8]
 8007d90:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007d94:	9301      	str	r3, [sp, #4]
 8007d96:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007d9a:	9300      	str	r3, [sp, #0]
 8007d9c:	4623      	mov	r3, r4
 8007d9e:	f7f9 fe3c 	bl	8001a1a <HAL_HCD_HC_Init>
 8007da2:	4603      	mov	r3, r0
 8007da4:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8007da6:	7bfb      	ldrb	r3, [r7, #15]
 8007da8:	4618      	mov	r0, r3
 8007daa:	f000 f8bd 	bl	8007f28 <USBH_Get_USB_Status>
 8007dae:	4603      	mov	r3, r0
 8007db0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007db2:	7bbb      	ldrb	r3, [r7, #14]
}
 8007db4:	4618      	mov	r0, r3
 8007db6:	3714      	adds	r7, #20
 8007db8:	46bd      	mov	sp, r7
 8007dba:	bd90      	pop	{r4, r7, pc}

08007dbc <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b084      	sub	sp, #16
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
 8007dc4:	460b      	mov	r3, r1
 8007dc6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007dc8:	2300      	movs	r3, #0
 8007dca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007dcc:	2300      	movs	r3, #0
 8007dce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007dd6:	78fa      	ldrb	r2, [r7, #3]
 8007dd8:	4611      	mov	r1, r2
 8007dda:	4618      	mov	r0, r3
 8007ddc:	f7f9 feac 	bl	8001b38 <HAL_HCD_HC_Halt>
 8007de0:	4603      	mov	r3, r0
 8007de2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007de4:	7bfb      	ldrb	r3, [r7, #15]
 8007de6:	4618      	mov	r0, r3
 8007de8:	f000 f89e 	bl	8007f28 <USBH_Get_USB_Status>
 8007dec:	4603      	mov	r3, r0
 8007dee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007df0:	7bbb      	ldrb	r3, [r7, #14]
}
 8007df2:	4618      	mov	r0, r3
 8007df4:	3710      	adds	r7, #16
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bd80      	pop	{r7, pc}

08007dfa <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8007dfa:	b590      	push	{r4, r7, lr}
 8007dfc:	b089      	sub	sp, #36	; 0x24
 8007dfe:	af04      	add	r7, sp, #16
 8007e00:	6078      	str	r0, [r7, #4]
 8007e02:	4608      	mov	r0, r1
 8007e04:	4611      	mov	r1, r2
 8007e06:	461a      	mov	r2, r3
 8007e08:	4603      	mov	r3, r0
 8007e0a:	70fb      	strb	r3, [r7, #3]
 8007e0c:	460b      	mov	r3, r1
 8007e0e:	70bb      	strb	r3, [r7, #2]
 8007e10:	4613      	mov	r3, r2
 8007e12:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e14:	2300      	movs	r3, #0
 8007e16:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007e18:	2300      	movs	r3, #0
 8007e1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8007e22:	787c      	ldrb	r4, [r7, #1]
 8007e24:	78ba      	ldrb	r2, [r7, #2]
 8007e26:	78f9      	ldrb	r1, [r7, #3]
 8007e28:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007e2c:	9303      	str	r3, [sp, #12]
 8007e2e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007e30:	9302      	str	r3, [sp, #8]
 8007e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e34:	9301      	str	r3, [sp, #4]
 8007e36:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007e3a:	9300      	str	r3, [sp, #0]
 8007e3c:	4623      	mov	r3, r4
 8007e3e:	f7f9 fe9f 	bl	8001b80 <HAL_HCD_HC_SubmitRequest>
 8007e42:	4603      	mov	r3, r0
 8007e44:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8007e46:	7bfb      	ldrb	r3, [r7, #15]
 8007e48:	4618      	mov	r0, r3
 8007e4a:	f000 f86d 	bl	8007f28 <USBH_Get_USB_Status>
 8007e4e:	4603      	mov	r3, r0
 8007e50:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e52:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e54:	4618      	mov	r0, r3
 8007e56:	3714      	adds	r7, #20
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	bd90      	pop	{r4, r7, pc}

08007e5c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b082      	sub	sp, #8
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
 8007e64:	460b      	mov	r3, r1
 8007e66:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007e6e:	78fa      	ldrb	r2, [r7, #3]
 8007e70:	4611      	mov	r1, r2
 8007e72:	4618      	mov	r0, r3
 8007e74:	f7fa f933 	bl	80020de <HAL_HCD_HC_GetURBState>
 8007e78:	4603      	mov	r3, r0
}
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	3708      	adds	r7, #8
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	bd80      	pop	{r7, pc}

08007e82 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8007e82:	b580      	push	{r7, lr}
 8007e84:	b082      	sub	sp, #8
 8007e86:	af00      	add	r7, sp, #0
 8007e88:	6078      	str	r0, [r7, #4]
 8007e8a:	460b      	mov	r3, r1
 8007e8c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8007e94:	2b01      	cmp	r3, #1
 8007e96:	d103      	bne.n	8007ea0 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8007e98:	78fb      	ldrb	r3, [r7, #3]
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	f000 f870 	bl	8007f80 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8007ea0:	20c8      	movs	r0, #200	; 0xc8
 8007ea2:	f7f9 fa6d 	bl	8001380 <HAL_Delay>
  return USBH_OK;
 8007ea6:	2300      	movs	r3, #0
}
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	3708      	adds	r7, #8
 8007eac:	46bd      	mov	sp, r7
 8007eae:	bd80      	pop	{r7, pc}

08007eb0 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8007eb0:	b480      	push	{r7}
 8007eb2:	b085      	sub	sp, #20
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
 8007eb8:	460b      	mov	r3, r1
 8007eba:	70fb      	strb	r3, [r7, #3]
 8007ebc:	4613      	mov	r3, r2
 8007ebe:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007ec6:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8007ec8:	78fb      	ldrb	r3, [r7, #3]
 8007eca:	68fa      	ldr	r2, [r7, #12]
 8007ecc:	212c      	movs	r1, #44	; 0x2c
 8007ece:	fb01 f303 	mul.w	r3, r1, r3
 8007ed2:	4413      	add	r3, r2
 8007ed4:	333b      	adds	r3, #59	; 0x3b
 8007ed6:	781b      	ldrb	r3, [r3, #0]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d009      	beq.n	8007ef0 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8007edc:	78fb      	ldrb	r3, [r7, #3]
 8007ede:	68fa      	ldr	r2, [r7, #12]
 8007ee0:	212c      	movs	r1, #44	; 0x2c
 8007ee2:	fb01 f303 	mul.w	r3, r1, r3
 8007ee6:	4413      	add	r3, r2
 8007ee8:	3354      	adds	r3, #84	; 0x54
 8007eea:	78ba      	ldrb	r2, [r7, #2]
 8007eec:	701a      	strb	r2, [r3, #0]
 8007eee:	e008      	b.n	8007f02 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8007ef0:	78fb      	ldrb	r3, [r7, #3]
 8007ef2:	68fa      	ldr	r2, [r7, #12]
 8007ef4:	212c      	movs	r1, #44	; 0x2c
 8007ef6:	fb01 f303 	mul.w	r3, r1, r3
 8007efa:	4413      	add	r3, r2
 8007efc:	3355      	adds	r3, #85	; 0x55
 8007efe:	78ba      	ldrb	r2, [r7, #2]
 8007f00:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8007f02:	2300      	movs	r3, #0
}
 8007f04:	4618      	mov	r0, r3
 8007f06:	3714      	adds	r7, #20
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0e:	4770      	bx	lr

08007f10 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b082      	sub	sp, #8
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	f7f9 fa31 	bl	8001380 <HAL_Delay>
}
 8007f1e:	bf00      	nop
 8007f20:	3708      	adds	r7, #8
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bd80      	pop	{r7, pc}
	...

08007f28 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007f28:	b480      	push	{r7}
 8007f2a:	b085      	sub	sp, #20
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	4603      	mov	r3, r0
 8007f30:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007f32:	2300      	movs	r3, #0
 8007f34:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007f36:	79fb      	ldrb	r3, [r7, #7]
 8007f38:	2b03      	cmp	r3, #3
 8007f3a:	d817      	bhi.n	8007f6c <USBH_Get_USB_Status+0x44>
 8007f3c:	a201      	add	r2, pc, #4	; (adr r2, 8007f44 <USBH_Get_USB_Status+0x1c>)
 8007f3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f42:	bf00      	nop
 8007f44:	08007f55 	.word	0x08007f55
 8007f48:	08007f5b 	.word	0x08007f5b
 8007f4c:	08007f61 	.word	0x08007f61
 8007f50:	08007f67 	.word	0x08007f67
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8007f54:	2300      	movs	r3, #0
 8007f56:	73fb      	strb	r3, [r7, #15]
    break;
 8007f58:	e00b      	b.n	8007f72 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8007f5a:	2302      	movs	r3, #2
 8007f5c:	73fb      	strb	r3, [r7, #15]
    break;
 8007f5e:	e008      	b.n	8007f72 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8007f60:	2301      	movs	r3, #1
 8007f62:	73fb      	strb	r3, [r7, #15]
    break;
 8007f64:	e005      	b.n	8007f72 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8007f66:	2302      	movs	r3, #2
 8007f68:	73fb      	strb	r3, [r7, #15]
    break;
 8007f6a:	e002      	b.n	8007f72 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8007f6c:	2302      	movs	r3, #2
 8007f6e:	73fb      	strb	r3, [r7, #15]
    break;
 8007f70:	bf00      	nop
  }
  return usb_status;
 8007f72:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f74:	4618      	mov	r0, r3
 8007f76:	3714      	adds	r7, #20
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7e:	4770      	bx	lr

08007f80 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b084      	sub	sp, #16
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	4603      	mov	r3, r0
 8007f88:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8007f8a:	79fb      	ldrb	r3, [r7, #7]
 8007f8c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8007f8e:	79fb      	ldrb	r3, [r7, #7]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d102      	bne.n	8007f9a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8007f94:	2301      	movs	r3, #1
 8007f96:	73fb      	strb	r3, [r7, #15]
 8007f98:	e001      	b.n	8007f9e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8007f9e:	7bfb      	ldrb	r3, [r7, #15]
 8007fa0:	461a      	mov	r2, r3
 8007fa2:	2101      	movs	r1, #1
 8007fa4:	4803      	ldr	r0, [pc, #12]	; (8007fb4 <MX_DriverVbusFS+0x34>)
 8007fa6:	f7f9 fcbd 	bl	8001924 <HAL_GPIO_WritePin>
}
 8007faa:	bf00      	nop
 8007fac:	3710      	adds	r7, #16
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bd80      	pop	{r7, pc}
 8007fb2:	bf00      	nop
 8007fb4:	40020800 	.word	0x40020800

08007fb8 <_ZdlPvj>:
 8007fb8:	f000 b80f 	b.w	8007fda <_ZdlPv>

08007fbc <__cxa_guard_acquire>:
 8007fbc:	6803      	ldr	r3, [r0, #0]
 8007fbe:	07db      	lsls	r3, r3, #31
 8007fc0:	d406      	bmi.n	8007fd0 <__cxa_guard_acquire+0x14>
 8007fc2:	7843      	ldrb	r3, [r0, #1]
 8007fc4:	b103      	cbz	r3, 8007fc8 <__cxa_guard_acquire+0xc>
 8007fc6:	deff      	udf	#255	; 0xff
 8007fc8:	2301      	movs	r3, #1
 8007fca:	7043      	strb	r3, [r0, #1]
 8007fcc:	4618      	mov	r0, r3
 8007fce:	4770      	bx	lr
 8007fd0:	2000      	movs	r0, #0
 8007fd2:	4770      	bx	lr

08007fd4 <__cxa_guard_release>:
 8007fd4:	2301      	movs	r3, #1
 8007fd6:	6003      	str	r3, [r0, #0]
 8007fd8:	4770      	bx	lr

08007fda <_ZdlPv>:
 8007fda:	f000 b839 	b.w	8008050 <free>

08007fde <atexit>:
 8007fde:	2300      	movs	r3, #0
 8007fe0:	4601      	mov	r1, r0
 8007fe2:	461a      	mov	r2, r3
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	f000 b8fd 	b.w	80081e4 <__register_exitproc>
	...

08007fec <__errno>:
 8007fec:	4b01      	ldr	r3, [pc, #4]	; (8007ff4 <__errno+0x8>)
 8007fee:	6818      	ldr	r0, [r3, #0]
 8007ff0:	4770      	bx	lr
 8007ff2:	bf00      	nop
 8007ff4:	2000002c 	.word	0x2000002c

08007ff8 <__libc_init_array>:
 8007ff8:	b570      	push	{r4, r5, r6, lr}
 8007ffa:	4d0d      	ldr	r5, [pc, #52]	; (8008030 <__libc_init_array+0x38>)
 8007ffc:	4c0d      	ldr	r4, [pc, #52]	; (8008034 <__libc_init_array+0x3c>)
 8007ffe:	1b64      	subs	r4, r4, r5
 8008000:	10a4      	asrs	r4, r4, #2
 8008002:	2600      	movs	r6, #0
 8008004:	42a6      	cmp	r6, r4
 8008006:	d109      	bne.n	800801c <__libc_init_array+0x24>
 8008008:	4d0b      	ldr	r5, [pc, #44]	; (8008038 <__libc_init_array+0x40>)
 800800a:	4c0c      	ldr	r4, [pc, #48]	; (800803c <__libc_init_array+0x44>)
 800800c:	f000 f95c 	bl	80082c8 <_init>
 8008010:	1b64      	subs	r4, r4, r5
 8008012:	10a4      	asrs	r4, r4, #2
 8008014:	2600      	movs	r6, #0
 8008016:	42a6      	cmp	r6, r4
 8008018:	d105      	bne.n	8008026 <__libc_init_array+0x2e>
 800801a:	bd70      	pop	{r4, r5, r6, pc}
 800801c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008020:	4798      	blx	r3
 8008022:	3601      	adds	r6, #1
 8008024:	e7ee      	b.n	8008004 <__libc_init_array+0xc>
 8008026:	f855 3b04 	ldr.w	r3, [r5], #4
 800802a:	4798      	blx	r3
 800802c:	3601      	adds	r6, #1
 800802e:	e7f2      	b.n	8008016 <__libc_init_array+0x1e>
 8008030:	08008364 	.word	0x08008364
 8008034:	08008364 	.word	0x08008364
 8008038:	08008364 	.word	0x08008364
 800803c:	08008368 	.word	0x08008368

08008040 <malloc>:
 8008040:	4b02      	ldr	r3, [pc, #8]	; (800804c <malloc+0xc>)
 8008042:	4601      	mov	r1, r0
 8008044:	6818      	ldr	r0, [r3, #0]
 8008046:	f000 b863 	b.w	8008110 <_malloc_r>
 800804a:	bf00      	nop
 800804c:	2000002c 	.word	0x2000002c

08008050 <free>:
 8008050:	4b02      	ldr	r3, [pc, #8]	; (800805c <free+0xc>)
 8008052:	4601      	mov	r1, r0
 8008054:	6818      	ldr	r0, [r3, #0]
 8008056:	f000 b80b 	b.w	8008070 <_free_r>
 800805a:	bf00      	nop
 800805c:	2000002c 	.word	0x2000002c

08008060 <memset>:
 8008060:	4402      	add	r2, r0
 8008062:	4603      	mov	r3, r0
 8008064:	4293      	cmp	r3, r2
 8008066:	d100      	bne.n	800806a <memset+0xa>
 8008068:	4770      	bx	lr
 800806a:	f803 1b01 	strb.w	r1, [r3], #1
 800806e:	e7f9      	b.n	8008064 <memset+0x4>

08008070 <_free_r>:
 8008070:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008072:	2900      	cmp	r1, #0
 8008074:	d048      	beq.n	8008108 <_free_r+0x98>
 8008076:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800807a:	9001      	str	r0, [sp, #4]
 800807c:	2b00      	cmp	r3, #0
 800807e:	f1a1 0404 	sub.w	r4, r1, #4
 8008082:	bfb8      	it	lt
 8008084:	18e4      	addlt	r4, r4, r3
 8008086:	f000 f913 	bl	80082b0 <__malloc_lock>
 800808a:	4a20      	ldr	r2, [pc, #128]	; (800810c <_free_r+0x9c>)
 800808c:	9801      	ldr	r0, [sp, #4]
 800808e:	6813      	ldr	r3, [r2, #0]
 8008090:	4615      	mov	r5, r2
 8008092:	b933      	cbnz	r3, 80080a2 <_free_r+0x32>
 8008094:	6063      	str	r3, [r4, #4]
 8008096:	6014      	str	r4, [r2, #0]
 8008098:	b003      	add	sp, #12
 800809a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800809e:	f000 b90d 	b.w	80082bc <__malloc_unlock>
 80080a2:	42a3      	cmp	r3, r4
 80080a4:	d90b      	bls.n	80080be <_free_r+0x4e>
 80080a6:	6821      	ldr	r1, [r4, #0]
 80080a8:	1862      	adds	r2, r4, r1
 80080aa:	4293      	cmp	r3, r2
 80080ac:	bf04      	itt	eq
 80080ae:	681a      	ldreq	r2, [r3, #0]
 80080b0:	685b      	ldreq	r3, [r3, #4]
 80080b2:	6063      	str	r3, [r4, #4]
 80080b4:	bf04      	itt	eq
 80080b6:	1852      	addeq	r2, r2, r1
 80080b8:	6022      	streq	r2, [r4, #0]
 80080ba:	602c      	str	r4, [r5, #0]
 80080bc:	e7ec      	b.n	8008098 <_free_r+0x28>
 80080be:	461a      	mov	r2, r3
 80080c0:	685b      	ldr	r3, [r3, #4]
 80080c2:	b10b      	cbz	r3, 80080c8 <_free_r+0x58>
 80080c4:	42a3      	cmp	r3, r4
 80080c6:	d9fa      	bls.n	80080be <_free_r+0x4e>
 80080c8:	6811      	ldr	r1, [r2, #0]
 80080ca:	1855      	adds	r5, r2, r1
 80080cc:	42a5      	cmp	r5, r4
 80080ce:	d10b      	bne.n	80080e8 <_free_r+0x78>
 80080d0:	6824      	ldr	r4, [r4, #0]
 80080d2:	4421      	add	r1, r4
 80080d4:	1854      	adds	r4, r2, r1
 80080d6:	42a3      	cmp	r3, r4
 80080d8:	6011      	str	r1, [r2, #0]
 80080da:	d1dd      	bne.n	8008098 <_free_r+0x28>
 80080dc:	681c      	ldr	r4, [r3, #0]
 80080de:	685b      	ldr	r3, [r3, #4]
 80080e0:	6053      	str	r3, [r2, #4]
 80080e2:	4421      	add	r1, r4
 80080e4:	6011      	str	r1, [r2, #0]
 80080e6:	e7d7      	b.n	8008098 <_free_r+0x28>
 80080e8:	d902      	bls.n	80080f0 <_free_r+0x80>
 80080ea:	230c      	movs	r3, #12
 80080ec:	6003      	str	r3, [r0, #0]
 80080ee:	e7d3      	b.n	8008098 <_free_r+0x28>
 80080f0:	6825      	ldr	r5, [r4, #0]
 80080f2:	1961      	adds	r1, r4, r5
 80080f4:	428b      	cmp	r3, r1
 80080f6:	bf04      	itt	eq
 80080f8:	6819      	ldreq	r1, [r3, #0]
 80080fa:	685b      	ldreq	r3, [r3, #4]
 80080fc:	6063      	str	r3, [r4, #4]
 80080fe:	bf04      	itt	eq
 8008100:	1949      	addeq	r1, r1, r5
 8008102:	6021      	streq	r1, [r4, #0]
 8008104:	6054      	str	r4, [r2, #4]
 8008106:	e7c7      	b.n	8008098 <_free_r+0x28>
 8008108:	b003      	add	sp, #12
 800810a:	bd30      	pop	{r4, r5, pc}
 800810c:	200001e4 	.word	0x200001e4

08008110 <_malloc_r>:
 8008110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008112:	1ccd      	adds	r5, r1, #3
 8008114:	f025 0503 	bic.w	r5, r5, #3
 8008118:	3508      	adds	r5, #8
 800811a:	2d0c      	cmp	r5, #12
 800811c:	bf38      	it	cc
 800811e:	250c      	movcc	r5, #12
 8008120:	2d00      	cmp	r5, #0
 8008122:	4606      	mov	r6, r0
 8008124:	db01      	blt.n	800812a <_malloc_r+0x1a>
 8008126:	42a9      	cmp	r1, r5
 8008128:	d903      	bls.n	8008132 <_malloc_r+0x22>
 800812a:	230c      	movs	r3, #12
 800812c:	6033      	str	r3, [r6, #0]
 800812e:	2000      	movs	r0, #0
 8008130:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008132:	f000 f8bd 	bl	80082b0 <__malloc_lock>
 8008136:	4921      	ldr	r1, [pc, #132]	; (80081bc <_malloc_r+0xac>)
 8008138:	680a      	ldr	r2, [r1, #0]
 800813a:	4614      	mov	r4, r2
 800813c:	b99c      	cbnz	r4, 8008166 <_malloc_r+0x56>
 800813e:	4f20      	ldr	r7, [pc, #128]	; (80081c0 <_malloc_r+0xb0>)
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	b923      	cbnz	r3, 800814e <_malloc_r+0x3e>
 8008144:	4621      	mov	r1, r4
 8008146:	4630      	mov	r0, r6
 8008148:	f000 f83c 	bl	80081c4 <_sbrk_r>
 800814c:	6038      	str	r0, [r7, #0]
 800814e:	4629      	mov	r1, r5
 8008150:	4630      	mov	r0, r6
 8008152:	f000 f837 	bl	80081c4 <_sbrk_r>
 8008156:	1c43      	adds	r3, r0, #1
 8008158:	d123      	bne.n	80081a2 <_malloc_r+0x92>
 800815a:	230c      	movs	r3, #12
 800815c:	6033      	str	r3, [r6, #0]
 800815e:	4630      	mov	r0, r6
 8008160:	f000 f8ac 	bl	80082bc <__malloc_unlock>
 8008164:	e7e3      	b.n	800812e <_malloc_r+0x1e>
 8008166:	6823      	ldr	r3, [r4, #0]
 8008168:	1b5b      	subs	r3, r3, r5
 800816a:	d417      	bmi.n	800819c <_malloc_r+0x8c>
 800816c:	2b0b      	cmp	r3, #11
 800816e:	d903      	bls.n	8008178 <_malloc_r+0x68>
 8008170:	6023      	str	r3, [r4, #0]
 8008172:	441c      	add	r4, r3
 8008174:	6025      	str	r5, [r4, #0]
 8008176:	e004      	b.n	8008182 <_malloc_r+0x72>
 8008178:	6863      	ldr	r3, [r4, #4]
 800817a:	42a2      	cmp	r2, r4
 800817c:	bf0c      	ite	eq
 800817e:	600b      	streq	r3, [r1, #0]
 8008180:	6053      	strne	r3, [r2, #4]
 8008182:	4630      	mov	r0, r6
 8008184:	f000 f89a 	bl	80082bc <__malloc_unlock>
 8008188:	f104 000b 	add.w	r0, r4, #11
 800818c:	1d23      	adds	r3, r4, #4
 800818e:	f020 0007 	bic.w	r0, r0, #7
 8008192:	1ac2      	subs	r2, r0, r3
 8008194:	d0cc      	beq.n	8008130 <_malloc_r+0x20>
 8008196:	1a1b      	subs	r3, r3, r0
 8008198:	50a3      	str	r3, [r4, r2]
 800819a:	e7c9      	b.n	8008130 <_malloc_r+0x20>
 800819c:	4622      	mov	r2, r4
 800819e:	6864      	ldr	r4, [r4, #4]
 80081a0:	e7cc      	b.n	800813c <_malloc_r+0x2c>
 80081a2:	1cc4      	adds	r4, r0, #3
 80081a4:	f024 0403 	bic.w	r4, r4, #3
 80081a8:	42a0      	cmp	r0, r4
 80081aa:	d0e3      	beq.n	8008174 <_malloc_r+0x64>
 80081ac:	1a21      	subs	r1, r4, r0
 80081ae:	4630      	mov	r0, r6
 80081b0:	f000 f808 	bl	80081c4 <_sbrk_r>
 80081b4:	3001      	adds	r0, #1
 80081b6:	d1dd      	bne.n	8008174 <_malloc_r+0x64>
 80081b8:	e7cf      	b.n	800815a <_malloc_r+0x4a>
 80081ba:	bf00      	nop
 80081bc:	200001e4 	.word	0x200001e4
 80081c0:	200001e8 	.word	0x200001e8

080081c4 <_sbrk_r>:
 80081c4:	b538      	push	{r3, r4, r5, lr}
 80081c6:	4d06      	ldr	r5, [pc, #24]	; (80081e0 <_sbrk_r+0x1c>)
 80081c8:	2300      	movs	r3, #0
 80081ca:	4604      	mov	r4, r0
 80081cc:	4608      	mov	r0, r1
 80081ce:	602b      	str	r3, [r5, #0]
 80081d0:	f7f8 fff2 	bl	80011b8 <_sbrk>
 80081d4:	1c43      	adds	r3, r0, #1
 80081d6:	d102      	bne.n	80081de <_sbrk_r+0x1a>
 80081d8:	682b      	ldr	r3, [r5, #0]
 80081da:	b103      	cbz	r3, 80081de <_sbrk_r+0x1a>
 80081dc:	6023      	str	r3, [r4, #0]
 80081de:	bd38      	pop	{r3, r4, r5, pc}
 80081e0:	20000968 	.word	0x20000968

080081e4 <__register_exitproc>:
 80081e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081e8:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 80082a4 <__register_exitproc+0xc0>
 80081ec:	4606      	mov	r6, r0
 80081ee:	f8d8 0000 	ldr.w	r0, [r8]
 80081f2:	461f      	mov	r7, r3
 80081f4:	460d      	mov	r5, r1
 80081f6:	4691      	mov	r9, r2
 80081f8:	f000 f856 	bl	80082a8 <__retarget_lock_acquire_recursive>
 80081fc:	4b25      	ldr	r3, [pc, #148]	; (8008294 <__register_exitproc+0xb0>)
 80081fe:	681c      	ldr	r4, [r3, #0]
 8008200:	b934      	cbnz	r4, 8008210 <__register_exitproc+0x2c>
 8008202:	4c25      	ldr	r4, [pc, #148]	; (8008298 <__register_exitproc+0xb4>)
 8008204:	601c      	str	r4, [r3, #0]
 8008206:	4b25      	ldr	r3, [pc, #148]	; (800829c <__register_exitproc+0xb8>)
 8008208:	b113      	cbz	r3, 8008210 <__register_exitproc+0x2c>
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8008210:	6863      	ldr	r3, [r4, #4]
 8008212:	2b1f      	cmp	r3, #31
 8008214:	dd07      	ble.n	8008226 <__register_exitproc+0x42>
 8008216:	f8d8 0000 	ldr.w	r0, [r8]
 800821a:	f000 f847 	bl	80082ac <__retarget_lock_release_recursive>
 800821e:	f04f 30ff 	mov.w	r0, #4294967295
 8008222:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008226:	b34e      	cbz	r6, 800827c <__register_exitproc+0x98>
 8008228:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 800822c:	b988      	cbnz	r0, 8008252 <__register_exitproc+0x6e>
 800822e:	4b1c      	ldr	r3, [pc, #112]	; (80082a0 <__register_exitproc+0xbc>)
 8008230:	b923      	cbnz	r3, 800823c <__register_exitproc+0x58>
 8008232:	f8d8 0000 	ldr.w	r0, [r8]
 8008236:	f000 f838 	bl	80082aa <__retarget_lock_release>
 800823a:	e7f0      	b.n	800821e <__register_exitproc+0x3a>
 800823c:	f44f 7084 	mov.w	r0, #264	; 0x108
 8008240:	f7ff fefe 	bl	8008040 <malloc>
 8008244:	2800      	cmp	r0, #0
 8008246:	d0f4      	beq.n	8008232 <__register_exitproc+0x4e>
 8008248:	2300      	movs	r3, #0
 800824a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 800824e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8008252:	6863      	ldr	r3, [r4, #4]
 8008254:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8008258:	2201      	movs	r2, #1
 800825a:	409a      	lsls	r2, r3
 800825c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8008260:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8008264:	4313      	orrs	r3, r2
 8008266:	2e02      	cmp	r6, #2
 8008268:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 800826c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8008270:	bf02      	ittt	eq
 8008272:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 8008276:	431a      	orreq	r2, r3
 8008278:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 800827c:	6863      	ldr	r3, [r4, #4]
 800827e:	f8d8 0000 	ldr.w	r0, [r8]
 8008282:	1c5a      	adds	r2, r3, #1
 8008284:	3302      	adds	r3, #2
 8008286:	6062      	str	r2, [r4, #4]
 8008288:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 800828c:	f000 f80e 	bl	80082ac <__retarget_lock_release_recursive>
 8008290:	2000      	movs	r0, #0
 8008292:	e7c6      	b.n	8008222 <__register_exitproc+0x3e>
 8008294:	20000278 	.word	0x20000278
 8008298:	200001ec 	.word	0x200001ec
 800829c:	00000000 	.word	0x00000000
 80082a0:	08008041 	.word	0x08008041
 80082a4:	20000090 	.word	0x20000090

080082a8 <__retarget_lock_acquire_recursive>:
 80082a8:	4770      	bx	lr

080082aa <__retarget_lock_release>:
 80082aa:	4770      	bx	lr

080082ac <__retarget_lock_release_recursive>:
 80082ac:	4770      	bx	lr
	...

080082b0 <__malloc_lock>:
 80082b0:	4801      	ldr	r0, [pc, #4]	; (80082b8 <__malloc_lock+0x8>)
 80082b2:	f7ff bff9 	b.w	80082a8 <__retarget_lock_acquire_recursive>
 80082b6:	bf00      	nop
 80082b8:	20000960 	.word	0x20000960

080082bc <__malloc_unlock>:
 80082bc:	4801      	ldr	r0, [pc, #4]	; (80082c4 <__malloc_unlock+0x8>)
 80082be:	f7ff bff5 	b.w	80082ac <__retarget_lock_release_recursive>
 80082c2:	bf00      	nop
 80082c4:	20000960 	.word	0x20000960

080082c8 <_init>:
 80082c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082ca:	bf00      	nop
 80082cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082ce:	bc08      	pop	{r3}
 80082d0:	469e      	mov	lr, r3
 80082d2:	4770      	bx	lr

080082d4 <_fini>:
 80082d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082d6:	bf00      	nop
 80082d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082da:	bc08      	pop	{r3}
 80082dc:	469e      	mov	lr, r3
 80082de:	4770      	bx	lr
